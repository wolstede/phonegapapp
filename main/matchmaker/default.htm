<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>Matchmaker</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">


function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function documentwrite(someitem)
{
document.write(someitem)
}

function changepage(somepage)
{
location.href='../'+somepage+'/default.htm'
}



var combinationattributes=[0,30]

var cfpackage='compactfun'


var thiscfpage='matchmaker'

var interruptsrequired=0

var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight

var overallwidthscale=screenwidth/190
var overallheightscale=screenheight/270
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}

var heightspacer=(Math.floor(screenheight-Math.floor(scalef*270))/2)-2
if (heightspacer<0) {heightspacer=0}

documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')



</script>

</head>
<body onLoad="showstartad()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:black; width:100%; height:100%"><script language="Javascript">


function showpicturesfordownloading()
{

if (document.getElementById('theimages').style.display == 'none')
{document.getElementById('theimages').style.display = 'inline'}
else
{document.getElementById('theimages').style.display = 'none'}



}


var runcheckvalue='ok'
function runcheck()
{
return true
}

var helpdisplayed=0
function togglehelp()
{
if (document.getElementById('addivtotal').style.display=='none' && document.getElementById('therestart').style.display=='none')
{
helpdisplayed=1-helpdisplayed
if (helpdisplayed==1) {document.getElementById('help').style.display = 'inline'; document.getElementById('thegame').style.display = 'none'}
if (helpdisplayed==0) {document.getElementById('help').style.display = 'none'; document.getElementById('thegame').style.display = 'inline'}
handleclickproblem()
}
}
</script><div style="width:100%; height:100%">
<script language="Javascript">documentwrite('<table border=0 width=100% cellspacing=0 cellpadding=0 style="text-align: left" align=center><tr><td valign=bottom style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white; vertical-align: bottom; background-image:url(buttonbg.jpg)"><a name="Top"></a><table border=0 cellpadding=2 width=100% height='+Math.floor(scalef*14)+' cellspacing=0 valign=middle ><tr><td style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white">Matchmaker</td><td valign=middle align=center width='+Math.floor(scalef*20)+'></td><td style="width:'+Math.floor(scalef*30)+'px;font-size:'+Math.floor(scalef*12)+'px;text-align:center;font-weight:bold;color:black"  onClick="togglehelp()">?</td></tr></table>')</script></td></tr><tr><td style="text-align: left; font-weight: normal; color: black; vertical-align: top;background-color:#222222"><div id="therestart" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table cellspacing=0 cellpadding=0 border=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<script language="Javascript">
var restartconfirmationrequired=0
var adfrequency=1

window.onbeforeunload=checkforunload;

function checkforunload()
{
if (restartconfirmationrequired==1) 
{
return "Confirmation of leaving page"
}

}

function displayrestartconfirmation()
{
document.getElementById('thegame').style.display = 'none'; 
document.getElementById('therestart').style.display = 'inline'; 
handleclickproblem()
}

function cancelrestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
}

function continuerestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
showad2() 
}

</script>

<center><br><br>
<script language="Javascript">documentwrite('<table border=1 width='+Math.floor(scalef*150)+' style="background-color:silver;vertical-align:middle" valign=middle><tr><td align=center><br><br><img width='+Math.floor(scalef*36)+' src="cflogo.png"><br><br>Please confirm that you wish to restart.<br><br><br><table border=0 align=center><tr><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(redgradient.jpg);text-align:center" onClick="cancelrestartconfirmation()">Cancel</td></tr></table></td><td width='+Math.floor(scalef*20)+'></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(greengradient.jpg);text-align:center" onClick="continuerestartconfirmation()">Confirm</td></tr></table></td></tr></table><br><br></td></tr></table></center>')</script>



</div></div></td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="thegame" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=top style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<SCRIPT LANGUAGE="JavaScript">
// All code copyright of TopAccolades Limited
// Original game by Dave Wolstenholme


function runonload()
{
newgame()
}

var playedone=0

function showad1()
{
if (playedone==0)
{
playedone=1
newgame()

}
else
{
showad()
}
}

function continueafterad()
{
newgame()
}



function addelementatend(someelement, somearray)
{
return somearray.concat([someelement])
}

function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=[]
var packsize=somearray.length
var ran
var i
for (i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}



function tailarray(somearray)
{
return somearray.slice(1, somearray.length)
}

function headarray(somearray)
{
return somearray[0]
}



function empty(array) 
// checks whether an array is empty:  returns true if so, false if not.
{
if (array.length == 0)
     return true  
else
     return false

}

function member(element, array) 
// checks whether element is a member of array:  returns true if so, false if not.
{
var check = false
var i = 0
while (i<array.length && !check){check = array[i]==element; i++};
return check

}


var linkedpieces=[]
var checkedvertically=[]
var checkedhorizontally=[]


var timer



function ismember(element, somearray) // for lists of pairs
{
var check = false
var i = 0
while (i<somearray.length && !check){check = (somearray[i][0]==element[0] && somearray[i][1]==element[1]); i++};
return check

}


var startarray=[]


function copyvalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=[]
for (var j=0; j<somearray[i].length; j++)
{
temparray[i][j]=somearray[i][j]
}
}
return temparray
}

function copysimplevalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=somearray[i]
}
return temparray
}

var secondtimer



var piecearray = []
var temppiecearray=[]
var height=11
var width=11
var blocksize=Math.floor(scalef*15)
var score
var playstate="wait"
function newgame()
{

newgame1()

}


var thepattern=[]
var thepossibles=['grey','grey','grey', 'magenta', 'magenta', 'magenta', 'blue', 'blue', 'blue', 'yellow', 'yellow', 'yellow', 'green', 'green', 'green']

function newgame1()
{
playstate="play"
plug=[[5,5], ['grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey']]
piecearray = []
temppiecearray=[]
piecestoredisplay=[]
var someshuffle=shufflearray(thepossibles)
thepattern=someshuffle.slice(0,8)
setupmatchmakerboard()
lastmoverequest=['nothing']
blockarray=[]
blockset=[]
thismoveactual=['nothing']
vaporizedthistime=[]
score=0
for (var i=0; i<8; i++)
{
if (thepattern[i]!='grey') {score=score+themultiple}
}
piecearray=copyvalues(temppiecearray)
redisplayboard()
if (timer != null) {clearTimeout(timer)}

timer= setTimeout('movecycle(0)', 1000)
}

var buttonpositions=[]
// [[8,8, "notemoveplug(-1)", 'left'], [10,8, "notemoveplug(1)", 'right'], [8,10, "noterotate(-1)", 'anticlockwise'], [10,10, "noterotate(1)", 'clockwise']]

function setupboard()
{

var piecename
var someclick
documentwrite('<table border=1 align=center><tr><td><table border=0 cellspacing=0 cellpadding=0 bgcolor="black" align="center">');

for (var i=0; i<height; i++)
{
documentwrite('<tr>')
for (var j=0; j<width; j++)
{
piecename='piece'+j+'_'+i
someclick=''
for (var k=0; k<buttonpositions.length; k++)
{
if (i==buttonpositions[k][1] && j==buttonpositions[k][0]) {someclick=' onClick="'+buttonpositions[k][2]+'" '; break}

}
documentwrite('<td height="'+blocksize+'" width="'+blocksize+'" ><img style="display:block" src="blank.gif" name="'+piecename+'" width='+blocksize+' height='+blocksize+' '+someclick+'></td>')
}
documentwrite('</tr>')
}


documentwrite('</table></td></tr></table>')

}







function setupmatchmakerboard()
{

// first set up all cells to be blank 
var initcolour

for (var i=0; i<width; i++)
{
temppiecearray[i]=[]
for (var j=0; j<height; j++)
{
temppiecearray[i][j]='blank'
}
}

// next set up buttons

for (var k=0; k<buttonpositions.length; k++)
{

temppiecearray[buttonpositions[k][0]][buttonpositions[k][1]]=buttonpositions[k][3]
}

// set up barrier

for (var i=0; i<width; i++)
{
temppiecearray[i][7]='brown'
}

// set up target
var corecol=5
var corerow=9
var agglomarray=plug[1]
var chunkcol
var chunkrow

temppiecearray[corecol][corerow]="white"
for (var i=0; i<agglomarray.length; i++)
{
chunkcol=corecol+plugrelpositions[i][0]
chunkrow=corerow+plugrelpositions[i][1]
temppiecearray[chunkcol][chunkrow]=thepattern[i]
}

// display plug
enterplugintoarray()


}





var plug=[[5,5], ['grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey']]
var plugrelpositions=[[-1,-1], [0,-1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1,0]]
 
function enterplugintoarray()
{
var corecol=plug[0][0]
var corerow=plug[0][1]
var agglomarray=plug[1]
var chunkcol
var chunkrow
temppiecearray[corecol][corerow]="white"
for (var i=0; i<agglomarray.length; i++)
{
chunkcol=corecol+plugrelpositions[i][0]
chunkrow=corerow+plugrelpositions[i][1]
temppiecearray[chunkcol][chunkrow]=plug[1][i]

}
}

function validtranslate(somehoriz)
{
var newcorecol=plug[0][0]+somehoriz
if (newcorecol<1 || newcorecol>9) {return false} else {return true}
}

function validrotate(somedir)
{
return true
}

var piecestoredisplay=[]





function removeplugfromarray()
{
var corecol=plug[0][0]
var corerow=plug[0][1]
var agglomarray=plug[1]
var chunkcol
var chunkrow
temppiecearray[corecol][corerow]="white"
for (var i=0; i<agglomarray.length; i++)
{
chunkcol=corecol+plugrelpositions[i][0]
chunkrow=corerow+plugrelpositions[i][1]
temppiecearray[chunkcol][chunkrow]='blank'

}

}



function moveplug(somehoriz)
{
if (validtranslate(somehoriz)==true)
{
removeplugfromarray()

plug[0][0]=plug[0][0]+somehoriz

enterplugintoarray()
return true
}
else 
{return false}

}


function rotateplug(somedir)
{
if (validrotate(somedir)==true)
{

removeplugfromarray()

if (somedir==-1) 
{plug[1]=plug[1].slice(2,8).concat(plug[1].slice(0,2))}
else
{plug[1]=plug[1].slice(6,8).concat(plug[1].slice(0,6))}

enterplugintoarray()

return true
}
else 
{return false}
}



function pairprintout(somearray)
{
var sometext=""
for (var i=0; i<somearray.length; i++)
{
sometext=sometext+'['+somearray[i][0]+', ['+somearray[i][1]+']],'
}
return sometext
}


function insertvalintoarray(someval, somearray)
{
if (somearray.length>0)
{
if (someval < somearray[0])
	{
	return [someval].concat(somearray)
	}
	else
	{
	return [somearray[0]].concat(insertvalintoarray(someval, tailarray(somearray)))
	}
}
else
{
return [someval]
}

}

function redisplayboard()
{


var piecename
var bordersize
var piececolour

for (var i=0; i<width; i++)
    {
for (var j=0; j<height; j++)
{
piecename='piece'+i+'_'+j
document.images[piecename].src=piecearray[i][j]+'.gif'
// document.all[piecename].bgColor=colourcode(piecearray[i][j])
// piececolour=piecearray[i][j]
// if (member(piececolour, ["blank", "red", "grey"])==true) {bordersize=0} else {bordersize=1}
// document.all[piecename].border=bordersize

}
	
    }

}

function updateboard()
{

var piecename
var bordersize
var piececolour

for (var i=0; i<width; i++)
{
for (var j=0; j<height; j++)
{
if (piecearray[i][j] != temppiecearray[i][j])
{
piecename='piece'+i+'_'+j
document.images[piecename].src=temppiecearray[i][j]+'.gif'
piecearray[i][j] = temppiecearray[i][j]
}
}

}

}

var thecolours=['magenta', 'green', 'blue', 'yellow']
var blockset=[]
var themultiple=4
function createblockset()
{
var somecolours=[]
var rancol
var rancol1
for (var i=0; i<8; i++)
{
if (thepattern[i]!='grey') {somecolours=somecolours.concat([[thepattern[i], thepattern[i]]])}
} 
var somenumcolours=somecolours.length*themultiple
blockset=somecolours.concat(somecolours) // ensures at least two of each required colour
for (var i=((somenumcolours*2)/themultiple); i<somenumcolours; i++)
{
rancol=thecolours[randomnumber(4)-1]
rancol1=rancol
if (randomnumber(20)==1) {rancol1='bomb'}
blockset[i]=[rancol, rancol1]
}
blockset=shufflearray(blockset)
}


function createnewblock()
{

var rannum=randomnumber(width)-1
if (blockset.length==0) {createblockset()}
var someblock=blockset[0]
var rancol=someblock[0]
var rancol1=someblock[1]
blockset=tailarray(blockset)

if (temppiecearray[rannum][0]=="blank" && temppiecearray[rannum][1]=="blank")
{

blockarray=blockarray.concat([[rannum, -1, rancol, rancol1]])

}
}





var lastmoverequest=['nothing']
var blockarray=[]
var cyclespeed=400
var thismoveactual=['nothing']
var newblockindex=0
var newblockfrequency=6
var vaporizedthistime=[]

function movecycle(somenum)
{

if (playstate=="play")
{
displaymessage("Game on")
thismoveactual=[]
for (var i=0; i<lastmoverequest.length; i++)
{
thismoveactual[i]=lastmoverequest[i]
}
temppiecearray=copyvalues(piecearray)
if (thismoveactual[0]=='translate')
{
if (moveplug(thismoveactual[1])==false) {thismoveactual=["nothing"]}
}

if (thismoveactual[0]=='rotate')
{
if (rotateplug(thismoveactual[1])==false) {thismoveactual=["nothing"]}
}

if (thismoveactual[0]=='translate' && somenum!=0)
{dealwithsidewaysblockcollisions(thismoveactual[1])} // deals with collisions caused by sideways move of plug only when no downwards move of falling blocks


if (somenum==0) 
{
if (newblockindex==0)
{createnewblock()}
newblockindex++
if (newblockindex>=4+randomnumber(3)) {newblockindex=0}
}

if (somenum==0) {moveblocksdown()}

showscore()

updateboard()
lastmoverequest=['nothing']
thismoveactual=['nothing']
if (checkforwin()==true) {playstate="won"; displaymessage("You win!")}

if (timer != null) {clearTimeout(timer)}
somenewnum=somenum+1
if (somenewnum==3) {somenewnum=0}

timer= setTimeout('movecycle('+(somenewnum)+')', cyclespeed)
}


}


function removefallingblock(blockcol, blockrow)
{
blockarray=removepairfromarray([blockcol, blockrow], blockarray)
}

function removepairfromarray(somepair, somearray)
{
if (somearray.length==0)
{
return []
}
else
	{
if (somearray[0][0]==somepair[0] && somearray[0][1]==somepair[1])
{
return tailarray(somearray)
}

else
{
return [somearray[0]].concat(removepairfromarray(somepair, tailarray(somearray)))
}
	}
}



function withinplugarea(blockcol, blockrow)
{
for (var i=-1; i<=1; i++)
{
for (var j=-1; j<=1; j++)
{
if (blockcol==plug[0][0]+i && blockrow==plug[0][1]+j) {return true}
}
}
return false
}

function dealwithsidewaysblockcollisions(somehoriz)
{
var tempblockarray=copyvalues(blockarray)
for (var i=0; i<tempblockarray.length; i++)
{
dealwithsingleinitialblockcollisions(tempblockarray[i][0], tempblockarray[i][1], tempblockarray[i][2])
}

}

function dealwithsingleinitialblockcollisions(blockcol, blockrow, somecol)
{
// if the current position of the block is not within the area of the plug and already on the board, change its colour to blank
if (withinplugarea(blockcol, blockrow)==false && blockrow>=0) {temppiecearray[blockcol][blockrow]="blank"}
var newblockrow=blockrow // in this case it hasn't moved down - code copy from below

var someindex=ith([blockcol, blockrow, somecol], blockarray)

var somemergingblock

// check whether the new position of the block is within the area of the plug and, if so, integrate or explode
if (withinplugarea(blockcol, newblockrow)==true)  // if1
{
 for (var i=-1; i<=1; i++)
 {
  for (var j=-1; j<=1; j++)
  {
   if (blockcol==plug[0][0]+i && newblockrow==plug[0][1]+j) // if2
   {
   somemergingblock=ith([i,j], plugrelpositions)
    if (plug[1][somemergingblock]==somecol) // if the block is on a piece of the same colour, vaporize piece and the player loses and the game stops
    {

    playstate="stop"
    temppiecearray[blockcol][newblockrow]='vapor'
    displaymessage("Vaporized")
    }
    else
    {
    if (somecol=='bomb')
    {
    playstate="stop"
    temppiecearray[blockcol][newblockrow]='red'
    displaymessage("Bombed")


    }
    else
    {
    var somenewcol='grey'
    if (plug[1][somemergingblock]=='grey'){somenewcol=somecol}
    temppiecearray[blockcol][newblockrow]=somenewcol
    plug[1][somemergingblock]=somenewcol
    removefallingblock(blockcol, blockrow)
    }
    }
   break
   } // end if2
  }
 }
}  // end if1

}






function moveblocksdown()
{
var tempblockarray=copyvalues(blockarray)
// do above to ensure correct selection of blocks as they get removed from blockarray
for (var i=0; i<tempblockarray.length; i++)
{
dealwithsingleblock(tempblockarray[i][0], tempblockarray[i][1], tempblockarray[i][2], tempblockarray[i][3])
}
}




function dealwithsingleblock(blockcol, blockrow, somecol, somecol1)
{
// if the current position of the block is not within the area of the plug and already on the board, change its colour to blank
if (withinplugarea(blockcol, blockrow)==false && blockrow>=0) {temppiecearray[blockcol][blockrow]="blank"}
var newblockrow=blockrow+1

var someindex=ith([blockcol, blockrow, somecol], blockarray)

var somemergingblock

// check whether the new position of the block is within the area of the plug and, if so, integrate or explode
if (withinplugarea(blockcol, newblockrow)==true)  // if1
{
 for (var i=-1; i<=1; i++)
 {
  for (var j=-1; j<=1; j++)
  {
   if (blockcol==plug[0][0]+i && newblockrow==plug[0][1]+j) // if2
   {
   somemergingblock=ith([i,j], plugrelpositions)
    if (plug[1][somemergingblock]==somecol) // if the block falls on a piece of the same colour, explode piece and the player loses and the game stops
    {

    playstate="stop"
    temppiecearray[blockcol][newblockrow]='vapor'
    displaymessage("Vaporized")

    }
    else
    {
    if (somecol=='bomb')
    {
    playstate="stop"
    temppiecearray[blockcol][newblockrow]='red'
    displaymessage("Bombed")


    }
    else
    {
    var somenewcol='grey'
    if (plug[1][somemergingblock]=='grey'){somenewcol=somecol}
    temppiecearray[blockcol][newblockrow]=somenewcol
    plug[1][somemergingblock]=somenewcol
    removefallingblock(blockcol, blockrow)
    }
    }
   break
   } // end if2
  }
 }
}  // end if1

else
{
// if reached the barrier
 if (newblockrow==7)
 {
 removefallingblock(blockcol, blockrow)
 if (somecol!='bomb') {decrementscore(1)}
 }
 else
 {
 var somenewcol
 // simply move it down  but use the alternative colour (maybe a bomb) if new row is 1
 if (newblockrow==1) {somenewcol=somecol1} else {somenewcol=somecol}
 temppiecearray[blockcol][newblockrow]=somenewcol
 blockarray[someindex][1]=blockarray[someindex][1]+1
 blockarray[someindex][2]=somenewcol

 }
}

}



function ith(somepair, somearray)
{
var someresult
for (var i=0; i<somearray.length; i++)
{
if (somepair[0]==somearray[i][0] && somepair[1]==somearray[i][1])
{
someresult=i; break
}
}
return someresult
}

function removefallenblocks()
{
var numfallen=fallenblocks.length
for (var i=0; i<numfallen; i++)
{
blockarray=removeElement(fallenblocks[i]-i, blockarray)
}

}





function removethiselement(someelement, somearray)
{
if (somearray[0]==someelement)
{
return tailarray(somearray)
}
else
{
return [somearray[0]].concat(removethiselement(someelement, tailarray(somearray)))
}

}




function noterotate(somedir)
{
if (runcheck()==true)
{
lastmoverequest=['rotate', somedir]
}
}

function notemoveplug(somex)
{
if (runcheck()==true)
{
lastmoverequest=['translate', somex]
}
}




function colourcode(somecolour)
{
var somecode
if (somecolour=="red") {somecode="#FF0000"}
if (somecolour=="white") {somecode="#FFFFFF"}
if (somecolour=="blank") {somecode="#000000"}
if (somecolour=="grey") {somecode="#C0C0C0"}
if (somecolour=="green") {somecode="#00FF00"}
if (somecolour=="yellow") {somecode="#FFFF00"}
if (somecolour=="brown") {somecode="#A62A2A"}
if (somecolour=="copper") {somecode="#236B8E"}
if (somecolour=="purple") {somecode="#871F78"}
if (somecolour=="cyan") {somecode="#00FFFF"}
if (somecolour=="explosion") {somecode="#4F2F4F"}
if (somecolour=="magenta") {somecode="#FF00FF"}


return somecode
}


function displaymessage(sometext)
{
changetextvalue('messagedisplay', sometext)
}

function showscore()
{
changetextvalue('score', score)
}

function decrementscore(someval)
{
score=score-someval
if (score<=0) 
{playstate="stop"; 
displaymessage('Zero')
removeplugfromarray()
plug[0][1]++
enterplugintoarray()

}
}



function checkforwin()
{
var sometransform
var somecheck
for (var i=0; i<8; i=i+2)
{
sometransform=thepattern.slice(i, 8).concat(thepattern.slice(0, i))

somecheck=true
for (var j=0; j<8; j++)
{
if (sometransform[j]!=plug[1][j])
{
somecheck=false
break
}
}
if (somecheck==true) {return true}

}
return false
}


function speed(somespeed)
{

for (var i=1; i<=4; i++)
{
if (somespeed==i)
{
cyclespeed=(5-i)*100
document.images['speed'+i].src="selected.gif"
// document.all['speed'+i].bgColor="#000000"
}
else
{
document.images['speed'+i].src="unselected.gif"
// document.all['speed'+i].bgColor="#FFFFFF"

}
}
}


var thedivs=['maingame', 'more']
function displaydiv(somediv)
{
for (var i=0; i<thedivs.length; i++)
{
document.getElementById(thedivs[i]).style.display = 'none'


}
document.getElementById(thedivs[somediv]).style.display = 'inline'
handleclickproblem()

}
</SCRIPT>




<script language="JavaScript">
documentwrite('<form name="main"><div id="maingame" style="display:inline"><center>')
documentwrite('<div style="display:block;height:'+Math.floor(scalef*2)+'px"></div>')
documentwrite('<table style="background-color:#222222" height='+Math.floor(scalef*235)+' width=100% border=0 cellspacing=0 cellpadding=0><tr><td><div style="display:block;height:'+Math.floor(scalef*2)+'px"></div>')

setupboard()

documentwrite('</td></tr><tr><td valign=top>')

documentwrite('<table border=0 width=100% valign=top cellpadding=0 cellspacing=2 align=center><tr>')
documentwrite('<td width='+Math.floor(scalef*30)+'><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="noterotate(-1)" ><img style="display:block" height='+Math.floor(scalef*15)+' width='+Math.floor(scalef*15)+' src="anticlockwise.gif"></td></tr></table></td>')
documentwrite('<td width='+Math.floor(scalef*30)+'><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="notemoveplug(-1, 0)"><img style="display:block" height='+Math.floor(scalef*15)+' width='+Math.floor(scalef*15)+' src="left.gif"></td></tr></table></td>')
documentwrite('<td width='+Math.floor(scalef*30)+'><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="notemoveplug(1, 0)"><img style="display:block" height='+Math.floor(scalef*15)+' width='+Math.floor(scalef*15)+' src="right.gif"></td></tr></table></td>')
documentwrite('<td width='+Math.floor(scalef*30)+'><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="noterotate(1)" ><img style="display:block" height='+Math.floor(scalef*15)+' width='+Math.floor(scalef*15)+' src="clockwise.gif"></td></tr></table></td>')
documentwrite('</tr></table>')
documentwrite('</td></tr><tr><td valign=bottom>')

documentwrite('<table border=0 width=100% valign=bottom cellpadding=0 cellspacing=2 align=center><tr>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 align=center><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="showad1()" width='+Math.floor(scalef*35)+'>New</td></tr></table></td>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*80)+'px;background-color:lemonchiffon;text-align:center"><div id="messagedisplay" style="text-align: center; color:black">Press New</div></td></tr></table></td>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*25)+'px;background-color:lemonchiffon;text-align:center"><div id="score" style="text-align: center; color:black">&nbsp;</div></td></tr></table></td>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 align=center><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="displaydiv(1)" width='+Math.floor(scalef*35)+'>More</td></tr></table></td>')
documentwrite('</tr></table>')

documentwrite('</td></tr></table>')


documentwrite('</div><div id="more" style="display:none;width:100%">')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*5)+'px;display:block"></div>')

documentwrite('<table width=100% bgcolor=silver cellpadding=1>')
documentwrite('<tr><td align=left><table border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center" onClick="displaydiv(0)">Back</td></tr></table></td></tr>')
documentwrite('<tr><td align=left valign=center ><span style="font-weight:bold">Speed:</span></td></tr>')
documentwrite('<tr><td ><table cellspacing=0 cellpadding=0 border=1 style="align:center" align:center >')
documentwrite('<tr><td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(1)">&nbsp;1&nbsp;</td>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(2)">&nbsp;2&nbsp;</td>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(3)">&nbsp;3&nbsp;</td>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(4)">&nbsp;4&nbsp;</td></tr>')
documentwrite('<tr><td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed1" src="unselected.gif" onClick="speed(1)"></td>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed2" src="unselected.gif" onClick="speed(2)"></td>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed3" src="unselected.gif" onClick="speed(3)"></td>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed4" src="unselected.gif" onClick="speed(4)"></td></tr>')
documentwrite('</table></td></tr></table>')


speed(2)
setupmatchmakerboard()

documentwrite('</div></form>')


</script>


</div></div>
</td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="addivtotal" style="width:100%; display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">
<script language="Javascript">


var startad=1

function showstartad()
{
if (interruptsrequired==1 && thiscfpage!='ourproducts' && thiscfpage!=cfpackage )
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()
}
}


function showad()
{
if (restartconfirmationrequired==1)
{
displayrestartconfirmation()
}
else
{
showad2()
}
}

function showad2()
{
if (interruptsrequired==1  && thiscfpage!='ourproducts' && thiscfpage!=cfpackage)
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
continueafterad()
}

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='unselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='selected.gif'
}
}

var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
if (startad==1)
{
startad=0
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()

}
else
{
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
continueafterad()
}
}
else
{
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",2000);
}
}


documentwrite('<div style="height:'+Math.floor(scalef*3)+'px"></div><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*160)+' height='+Math.floor(scalef*100)+'><tr><td align=center><b>Trial Version</b><br><br>The Compact Fun games and puzzles are available without these countdown interrupts and ads in the full <br><b>Compact Fun</b> <br>app, as well as other apps.</td></tr></table>')


documentwrite('<br><table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0 width='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' height='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' onClick="changepage(\'ourproducts\')"><tr><td><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"></td></tr><tr><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="cflogo.png" border=0></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif"></td></tr><tr><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif"></td></tr></table>')

documentwrite('<br><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*140)+' height='+Math.floor(scalef*50)+'><tr><td align=center>To see details of these and other apps from TopAccolades press the button above.</td></tr></table>')


</script>











</div></div>
</td></tr></table>

<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>

</div><div id="help" style="width:100%;display:none;background-color:white"><table bgcolor=white width=100% border=0 cellpadding=1><tr><td><script language="Javascript">var helpindexrequired=0;</script><br><script language="Javascript">documentwrite('<table align=left border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center"  onClick="togglehelp()">Back</td></tr></table>')</script>
<br><p><script language="Javascript">
if (helpindexrequired==1)
{
documentwrite('<a href="#intro">Introduction</a><br><a href="#controls">Controls and actions</a><br><a href="#newgame">Starting a new game</a><br><a href="#terms">Terms of use</a><br><br>')}
</script>


<a name="intro"></a>
Matchmaker is a simple, but frustrating, game for one person.
<br><br>
When a new game is started (either by opening the game or by pressing the <span style="font-style:italic">New</span> button), a target pattern is produced on a 3x3 square shape - the <span style="font-style:italic">Target</span> - below the brown floor.  The middle small square of this is always white, while the eight outer small squares may be either blue, green, yellow or magenta (colours), or else grey (colourless). 
<br>

<br>
Directly above the target is a brown floor, upon which sits another 3x3 square, called the <span style="font-style:italic">Slider</span>, again with a white middle, but with all the smaller out squares initially not coloured (shown as grey).  The Slider can move to the left and to the right, and can also rotate.
The objective of the game is to change the colours of the outer squares of the Slider so that they are the same as the Target (regardless of its current rotation).  
<br>

<br>Small coloured squares then start to drop from the top.  The idea of the game is to 'catch' these squares, as appropriate, on the Slider, either by letting them fall onto it or by moving the Slider sideways so that it collides with the falling square. When a square falls onto or otherwise collides with an outer square of the Slider the result is as follows:
<br>


<ul>
<li>if the outer square is grey, the outer square takes on the colour of the falling square;
<li>if the outer square is the same colour as the falling square, the outer square vaporizes and you lose;
<li>if the outer square is not grey and a different colour from the falling square, the outer square turns grey.
</ul>



<span style="font-style:italic">Beware bombs!</span>
<br><br>
Not all squares that start to fall are exactly as they appear.  In some cases, the square may disappear as it's falling to reveal a bomb hidden within it.  A bomb always appears one row below where the square first appears at the top. If a bomb falls on or otherwise collides with the Slider, you lose, and the square of the Slider it hits explodes.
<br>

<br>
<span style="font-style:italic">Don't let too many squares hit the floor!</span>
<br><br>
When a game begins, you will see a number displayed in the small white box at the bottom;  this number is 4 times the number of coloured (not grey) outer squares on the Target.  Every time a square (but not a bomb) hits the floor, this number is reduced by one.  If this number reaches zero, you lose.  So, you may need deliberately to catch colours that don't match the Target just to stop them hitting the floor.
<br>

<br>
<span style="font-style:italic">Winning the game</span>
<br><br>
You win the game when the patterns on the Slider are the same as those on the Target.  Please note that the orientation of the Slider is irrelevant, which means that you win even when you would need to rotate the Slider to achieve the match with the Target.  
<br>

<br>
So, you would win if the Target (left) and Slider (right) were:
<br><br>

<script language="Javascript">
documentwrite('<table border=0 style="align:center" align=center width=100%><tr><td>')
documentwrite('<table cellpadding=0 cellspacing=0 border=0 style="align:center" align=center>')
documentwrite('<tr>')
documentwrite('<td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="grey.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="magenta.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="yellow.gif"></td>')
documentwrite('</tr>')
documentwrite('<tr>')
documentwrite('<td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="yellow.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="white.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blue.gif"></td>')
documentwrite('</tr>')
documentwrite('<tr>')
documentwrite('<td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="green.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="grey.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="magenta.gif"></td>')
documentwrite('</tr>')
documentwrite('</table>')
documentwrite('</td><td>')
documentwrite('<table cellpadding=0 cellspacing=0 border=0 style="align:center" align=center>')
documentwrite('<tr>')
documentwrite('<td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="green.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="yellow.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="grey.gif"></td>')
documentwrite('</tr>')
documentwrite('<tr>')
documentwrite('<td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="grey.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="white.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="magenta.gif"></td>')
documentwrite('</tr>')
documentwrite('<tr>')
documentwrite('<td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="magenta.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blue.gif"></td><td><img style="display:block" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="yellow.gif"></td>')
documentwrite('</tr>')
documentwrite('</table>')
documentwrite('</td></tr></table>')
</script>
<br>

<br>as the Slider could be rotated 90 degrees anticlockwise and it would be a match for the Target.

<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>



<p><a name="controls"></a><span style="font-weight:bold">Controls and actions</span>
<br><br>After starting the game (by pressing the <span style="font-style:italic">New</span> button), you can move the Slider by pressing the right- or left-arrow buttons to change its position in the direction of the arrow.  You can also rotate the plug by 90 degrees by pressing the clockwise or anticlockwise rotation buttons.

<br>

<br>You can also change the speed of the game by first pressing the <span style="font-style:italic">More</span>  button, and then pressing on one of the numbers representing speed (1 =lowest, 4=highest).  The game always starts off with a default speed setting of 2.  The current speed is shown by a black square below the number.  To return to the main game screen, press the <span style="font-style:italic">Back</span> button.
      
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="newgame"></a><span style="font-weight:bold">New Game</span>
             
      <br><br>A new game, with a new target, may be generated at any time by pressing on the <span style="font-style:italic">
      New </span>button.
      <br><br><span style="font-style:italic">Matchmaker is an original game devised by Dr. David Wolstenholme</span>


<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<a name="terms"></a>
<p style="font-weight: bold;"><a name="terms">Terms of use</a></p>
<p>This software may be used for personal purposes only.&nbsp;  It may not be used for commercial purposes.</p>
<p>The software, code and script of this application may not be copied or be distributed to others.</p>
<p>The software, code and script may not be altered in any way.</p>
<p >Copyright of the software, code and script, and its
help
documentation, is held by TopAccolades Limited.&nbsp; No part of
the software,
code, script or documentation may be copied or used in another application or
document.</p>
<p >Although
every effort has been made to ensure that this software functions
as intended, TopAccolades Limited provides no warranty of
merchantability, or
fitness for a particular purpose, in relation to this application or
its
support.</p>
<p >TopAccolades
Limited shall not be liable for any damages whatsoever arising
out of the use of or inability to use this application or the
provision of
or failure
to provide support.</p>
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>

Version: 3.0 (20160321) <br>Scale: <script language="Javascript">documentwrite(scalef)</script><br><br>&nbsp;</td></tr></table></div>
<script language="Javascript">documentwrite('<div id="theimages" style="width:100%;height:'+Math.floor(scalef*12)+'px;overflow:hidden;background-color:black"  onClick="changepage(\'ourproducts\')"><center>');
var adsrequired=1

var baseonelinermessages=[
'Press ? for Help', '', 
'Use device Back for menu/exit', '', 
'TopAccolades Limited',
'Specializing in Original & Classic...',
'Game & Puzzle Apps',
'']

var admessages=[
'<span style="color:violet">For Birthdays & Anniversaries...</span>',
'<span style="color:violet">For Valentine\'s Day...</span>',
'<span style="color:violet">For Mother\'s & Father\'s Days...</span>',
'<span style="color:violet">Try with-my-love.com</span>',
'<span style="color:violet">Make the day really special!</span>',
'<span style="color:violet">We have web sites such as...</span>',
'<span style="color:violet">best-wife.com, sexiest-lover.com</span>',
'<span style="color:violet">supremely.sexy, just-so.sexy</span>',
'<span style="color:violet">best-husband.com, best-lover.com</span>',
'<span style="color:violet">best-mother.com, best-father.com</span>',
'<span style="color:violet">best-dad.com, best-daughter.com</span>',
'<span style="color:violet">... and many more.</span>',
'<span style="color:violet">Supply a loved one\'s name...</span>',
'<span style="color:violet">...to have a page such as...</span>',
'<span style="color:violet">jane-smith.best-wife.com</span>',
'<span style="color:violet">harry-styles.just-so.sexy</span>',
'<span style="color:violet">laura-brown.best-mother.com</span>',
'<span style="color:violet">Go to with-my-love.com...</span>',
'<span style="color:violet">...and make their day.</span>',
'',
'<span style="color:red">Sherlock is at the Bates Hotel</span>',
'<span style="color:red">Vic has been murdered</span>',
'<span style="color:red">Who killed Vic?</span>',
'<span style="color:red">With what?  And where?</span>',
'<span style="color:red">Ask Sherlock for clues...</span>',
'<span style="color:red">Then try to solve them</span>',
'<span style="color:red">Buy our great logic puzzle...</span>',
'<span style="color:red">CSI Sherlock</span>',
'',
'<span style="color:magenta">Play Rummy aginst the system...</span>',
'<span style="color:magenta">...or against a friend</span>',
'<span style="color:magenta">Full animation of deals and moves</span>',
'<span style="color:magenta">Game state remembered on exit</span>',
'<span style="color:magenta">Try our Rummy 7 app</span>',
'',
'<span style="color:cyan">Try our Kublitz Cube app</span>',
'<span style="color:cyan">Turn the layers to get...</span>',
'<span style="color:cyan">...the same colour on each side</span>',
'<span style="color:cyan">Guidance on solving the Cube</span>',
'<span style="color:cyan">Notation and mnemonics</span>',
'<span style="color:cyan">Kublitz Cube - it\'s free</span>',
'',
'<span style="color:magenta">Try our Peg Solitaire app</span>',
'<span style="color:magenta">Play with the full 32 pegs...</span>',
'<span style="color:magenta">...or start with fewer pegs </span>',
'<span style="color:magenta">Notation and mnemonics...</span>',
'<span style="color:magenta">...to remember the solution</span>',
'<span style="color:magenta">Peg Solitaire - it\'s free</span>',
'',
'<span style="color:lime">Try our Xword4x4 app</span>',
'<span style="color:lime">Crossword game for 2-4 players</span>',
'<span style="color:lime">Pass and Play mode</span>',
'<span style="color:lime">No internet connection required</span>',
'<span style="color:lime">You can even design the layout</span>',
'<span style="color:lime">Or change letter numbers/values</span>',
'<span style="color:lime">Try our <span style="color:white">Xword4x4</span> app</span>',
'',
'<span style="color:lime">If you like games such as...</span>',
'<span style="color:lime">Rummy, 4-in-a-line...</span>',
'<span style="color:lime">Hangman, Mancala...</span>',
'<span style="color:lime">Letters Game, Numbers Game...</span>',
'<span style="color:lime">& more classic & original games</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Games</span> app now</span>',
'',
'<span style="color:cyan">If you like puzzles such as...</span>',
'<span style="color:cyan">Sudoku, Hangman...</span>',
'<span style="color:cyan">Peg Solitaire, Step Challenge...</span>',
'<span style="color:cyan">WordSearch & other word puzzles...</span>',
'<span style="color:cyan">Numberskull & other number puzzles...</span>',
'<span style="color:cyan">Memory Pairs...</span>',
'<span style="color:cyan">& more classic & original puzzles</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Puzzles</span> app now</span>',
'',
'<span style="color:lime">Beat the Letters Game countdown;</span>',
'<span style="color:lime">Avoid the Hangman\'s noose;</span>',
'<span style="color:lime">Look for words in WordSearch+...</span>',
'<span style="color:lime">And other mind-boggling grids;</span>',
'<span style="color:lime">Try our original Pentad game;</span>',
'<span style="color:lime">Find connections in Linkword Snap;</span>',
'<span style="color:lime">Or solve the Word Ladder.</span>',
'<span style="color:lime">For word-based games and puzzles...</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Words</span> app now</span>',
'',
'<span style="color:magenta">Beat the Numbers Game countdown;</span>',
'<span style="color:magenta">Take 30 secs for our Step Challenge;</span>',
'<span style="color:magenta">Or Pyramid Numbers;</span>',
'<span style="color:magenta">Or try our original Numberskull.</span>',
'<span style="color:magenta">For number-based games & puzzles...</span>',
'<span style="color:magenta">Buy our <span style="color:white">Compact Numbers</span> app now</span>',
'',
'<span style="color:cyan">Solve Sudoku puzzles, with help;</span>',
'<span style="color:cyan">Be a mastermind and break the codes,</span>',
'<span style="color:cyan">Solve equations and use logic...</span>',
'<span style="color:cyan">In our original Numberskull puzzle;</span>',
'<span style="color:cyan">Find the killer based on clues...</span>',
'<span style="color:cyan">In Mystery Clues.</span>',
'<span style="color:cyan">For logic-based puzzles...</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Logic</span> app now</span>',
'',
'<span style="color:cyan">Exercise your brain;</span>',
'<span style="color:cyan">10 sets of exercises;</span>',
'<span style="color:cyan">5 exercises in each set...</span>',
'<span style="color:cyan">Word power...</span>',
'<span style="color:cyan">Verbal comprehension...</span>',
'<span style="color:cyan">Mental arithmetic...</span>',
'<span style="color:cyan">Memory...</span>',
'<span style="color:cyan">Pattern-matching...</span>',
'<span style="color:cyan">Great brain-training exercises...</span>',
'<span style="color:cyan">Buy our <span style="color:white">BrainBoxFun</span> app now</span>',
''

]

if (adsrequired==1) {baseonelinermessages=baseonelinermessages.concat(admessages)}

var onelinermessages=baseonelinermessages
documentwrite('<div id="oneliner" style="font-size='+Math.floor(scalef*9)+'px;text-align:center;font-weight:bold;color:white;background-color:black; width:100%">'+onelinermessages[0]+'</div><br><br>&nbsp;')
var clickproblemtimer=null
function handleclickproblem()
{
if (clickproblemtimer != null) {clearTimeout(clickproblemtimer)}
clickproblemtimer=setTimeout("modifyoneliner()",50);

}

function modifyoneliner()
{
changetextvalue('oneliner', document.getElementById('oneliner').innerHTML)
// document.getElementById('oneliner').innerHTML = document.getElementById('oneliner').innerHTML 
}

currentoneliner=0
function changeoneliner()
{
currentoneliner++
if (currentoneliner==onelinermessages.length) {currentoneliner=0}
changetextvalue('oneliner', onelinermessages[currentoneliner])
// document.getElementById('oneliner').innerHTML = onelinermessages[currentoneliner]
if (onelinertimer != null) {clearTimeout(onelinertimer)}
onelinertimer=setTimeout("changeoneliner()",5000);

}
var onelinertimer=null
onelinertimer=setTimeout("changeoneliner()",5000);


</script>

</center></div></td></tr></table></div></body></html>