<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>Treble Whammy</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">


function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function documentwrite(someitem)
{
document.write(someitem)
}

function changepage(somepage)
{
location.href='../'+somepage+'/default.htm'
}



var combinationattributes=[0,30]

var cfpackage='compactfun'


var thiscfpage='treblewhammy'

var interruptsrequired=0

var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight

var overallwidthscale=screenwidth/190
var overallheightscale=screenheight/270
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}

var heightspacer=(Math.floor(screenheight-Math.floor(scalef*270))/2)-2
if (heightspacer<0) {heightspacer=0}

documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')



</script>

</head>
<body onLoad="showstartad()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:black; width:100%; height:100%"><script language="Javascript">


function showpicturesfordownloading()
{

if (document.getElementById('theimages').style.display == 'none')
{document.getElementById('theimages').style.display = 'inline'}
else
{document.getElementById('theimages').style.display = 'none'}



}


var runcheckvalue='ok'
function runcheck()
{
return true
}

var helpdisplayed=0
function togglehelp()
{
if (document.getElementById('addivtotal').style.display=='none' && document.getElementById('therestart').style.display=='none')
{
helpdisplayed=1-helpdisplayed
if (helpdisplayed==1) {document.getElementById('help').style.display = 'inline'; document.getElementById('thegame').style.display = 'none'}
if (helpdisplayed==0) {document.getElementById('help').style.display = 'none'; document.getElementById('thegame').style.display = 'inline'}
handleclickproblem()
}
}
</script><div style="width:100%; height:100%">
<script language="Javascript">documentwrite('<table border=0 width=100% cellspacing=0 cellpadding=0 style="text-align: left" align=center><tr><td valign=bottom style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white; vertical-align: bottom; background-image:url(buttonbg.jpg)"><a name="Top"></a><table border=0 cellpadding=2 width=100% height='+Math.floor(scalef*14)+' cellspacing=0 valign=middle ><tr><td style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white">Treble Whammy</td><td valign=middle align=center width='+Math.floor(scalef*20)+'></td><td style="width:'+Math.floor(scalef*30)+'px;font-size:'+Math.floor(scalef*12)+'px;text-align:center;font-weight:bold;color:black"  onClick="togglehelp()">?</td></tr></table>')</script></td></tr><tr><td style="text-align: left; font-weight: normal; color: black; vertical-align: top;background-color:#222222"><div id="therestart" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table cellspacing=0 cellpadding=0 border=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<script language="Javascript">
var restartconfirmationrequired=0
var adfrequency=1

window.onbeforeunload=checkforunload;

function checkforunload()
{
if (restartconfirmationrequired==1) 
{
return "Confirmation of leaving page"
}

}

function displayrestartconfirmation()
{
document.getElementById('thegame').style.display = 'none'; 
document.getElementById('therestart').style.display = 'inline'; 
handleclickproblem()
}

function cancelrestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
}

function continuerestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
showad2() 
}

</script>

<center><br><br>
<script language="Javascript">documentwrite('<table border=1 width='+Math.floor(scalef*150)+' style="background-color:silver;vertical-align:middle" valign=middle><tr><td align=center><br><br><img width='+Math.floor(scalef*36)+' src="cflogo.png"><br><br>Please confirm that you wish to restart.<br><br><br><table border=0 align=center><tr><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(redgradient.jpg);text-align:center" onClick="cancelrestartconfirmation()">Cancel</td></tr></table></td><td width='+Math.floor(scalef*20)+'></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(greengradient.jpg);text-align:center" onClick="continuerestartconfirmation()">Confirm</td></tr></table></td></tr></table><br><br></td></tr></table></center>')</script>



</div></div></td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="thegame" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=top style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
// All code copyright of TopAccolades Limited
// Original game by Dave Wolstenholme
restartconfirmationrequired=1
function runonload()
{

}

function continueafterad()
{
newgame()

}

function createshuffledpacks() 
{
createshuffledpack(0)

}



function createshuffledpack(int1) 
{

var makeup = cardset[int1][1]
var n = 0
var i

for (i=0; i<makeup.length; i++)
{
var letter = makeup[i][0]
var quantity=makeup[i][1]


var j
for (j=0; j<quantity; j++)
{
cardset[int1][2][n]=letter
n = n+1
} // end for2

} // end for1

cardset[int1][2] = shufflearray(shufflearray(cardset[int1][2]))

}



function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=[]
packsize=somearray.length
var ran
var i
for (i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}



function tailarray(somearray)
{
return somearray.slice(1, somearray.length)
}

function headarray(somearray)
{
return somearray[0]
}



function empty(array) 
// checks whether an array is empty:  returns true if so, false if not.
{
if (array.length == 0)
     return true  
else
     return false

}

function member(element, array) 
// checks whether element is a member of array:  returns true if so, false if not.
{
var check = false
var i = 0
while (i<array.length && !check){check = array[i]==element; i++};
return check

}

function exists(array, exp, vars)
/* 
Takes an array and checks whether there is an element of the array that satisfies the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars.


Returns an array = [element, true] where element is the first element found satisfying the expression, or [false, false] if no solution found.

Examples: 
exists([2, -6, 5, -9], "X<0", []) returns [-6, true]
exists([2, -6, 5, -9], "X<V1", [-10]) returns [false, false]

*/
{
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var check = false
var i = 0
var X; while (i<array.length && !check){X=array[i]; check=eval(exp); i++};
if (check) 
return [true, array[i-1]]


else
return [false, false]

}

function existsXon(array, exp)
/* 
Takes an array and checks whether there is an element of the array that satisfies the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars.


Returns true if there is, false if not

Examples: 
existsXon([2, -6, 5, -9], "X<0", []) returns true
existsXon([2, -6, 5, -9], "X<V1", [-10]) returns false

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
return exists(array, exp, vars)[0]


}

function findallXon(array, exp)
/* 
Takes array (an array) and finds all elements of the array that satisfy the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns an array comprising all the elements that satisfy the expression ([] if none).

Examples: 
findallXon([2, -6, 5, -9], "X<0", []) returns [-6, -9]
findallXon([2, -6, 5, -9], "X<V1", [-10]) returns []

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var X; var solutions = []; for (var j=0; j<array.length; j++){X=array[j]; if (eval(exp)) solutions = solutions.concat([x])};
return solutions

}

function forallXon(array, exp)
/* 
Takes an array and checks whether all elements of the array satisfy the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns true if they do, false if not.

Examples: 
forallXon([2, -6, 5, -9], "X<0", []) returns false
forallXon([2, -6, 5, -9], "X>V1", [-10]) returns true

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var check = true
var i = 0
var X; while (i < array.length && check) {X=array[i]; check=eval(exp);i++};
return check
}





function mapX(array, exp)
/* 
Takes array (an array) and generates a list (itself an array) of all the results of evaluating a function for each element of the array, where the expression exp
where exp is a string representing a function in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns an array, the same length as the original, comprising all the results.

Examples: 
mapX([2, -6, 5, -9], "X*2*V1", [3]) returns [12, -36, 30, -54]

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var X; var solutions = []; for (var j = 0; j< array.length; j++) {X = array[j]; solutions = solutions.concat([eval(exp)])}
return solutions

}

var solution=[]

function noteclickingcell(somecol, somerow)
{
solution=[[somecol, somerow]].concat(solution)
}


function collapsecolumns()
{
for (var i=0; i<linkedpieces.length; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='blank'
}
collapsepieces()

}

function collapsepieces()
{
for (var i=0; i<width; i++)
{
collapsecolumn(i)
}

}

var empties=[]
var nonempties=[]

function collapsecolumn(somecol)
{
empties=[]
nonempties=[]
var colourincell
for (var somerow=0; somerow<height+comingheight; somerow++)
{
colourincell=piecearray[somecol][somerow]
if (colourincell=='blank')
{
empties=empties.concat([colourincell])
}
else
{
nonempties=nonempties.concat([colourincell])
}

}
var newcol=empties.concat(nonempties)
for (var somerow=0; somerow<height+comingheight; somerow++)
{
piecearray[somecol][somerow] = newcol[somerow]
}

}


function displaymissingpieces()
{
for (var i=0; i<linkedpieces.length; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='grey'
}
redisplayboard()
}

function ismember(element, somearray) // for lists of pairs
{
var check = false
var i = 0
while (i<somearray.length && !check){check = (somearray[i][0]==element[0] && somearray[i][1]==element[1]); i++};
return check

}


var piecearray = []
var selectionrecord=[]
var height=8
var width=8
var comingheight=3
var playstate='play'


var newtiletypes=7
function changetiletypes(somenum)
{

for (var i=6; i<=8; i++)
{
if (somenum==i)
{
document.all['newtiletypes'+i].bgColor="#000000"
}
else
{
document.all['newtiletypes'+i].bgColor="#FFFFFF"
}
}
newtiletypes=somenum
}

var newnumturns=100
function changenumturns(somenum)
{

for (var i=50; i<=150; i=i+50)
{
if (somenum==i)
{
document.all['newnumturns'+i].bgColor="#000000"
}
else
{
document.all['newnumturns'+i].bgColor="#FFFFFF"
}
}
newnumturns=somenum
}

var potmoves=[]
function checkmoves()
{
potmoves=[] 
for (var i=0; i<width; i++)
    {
for (var j=comingheight; j<height+comingheight; j++)
{

if (patternfound(i, j)==true) {potmoves=potmoves.concat([[i, j]])}

}
	
    }

}

function patternfound(somecol, somerow)
{

var somecolour 
var mincol=0
var maxcol=width-1
var minrow=comingheight
var maxrow=comingheight+height-1
// checks for threes horizontally
// check to fill in first of 3

if (somecol>=mincol+1 && somecol<=maxcol-2 ) {somecolour=piecearray[somecol-1][somerow]; if (piecearray[somecol+1][somerow]==somecolour && piecearray[somecol+2][somerow]==somecolour) {return true}}
if (somerow>=minrow+1 && somecol<=maxcol-2) {somecolour=piecearray[somecol][somerow-1]; if (piecearray[somecol+1][somerow]==somecolour && piecearray[somecol+2][somerow]==somecolour) {return true}}
if (somerow<=maxrow-1 && somecol<=maxcol-2) {somecolour=piecearray[somecol][somerow+1]; if (piecearray[somecol+1][somerow]==somecolour && piecearray[somecol+2][somerow]==somecolour) {return true}}
// check to fill in second of 3
if (somerow>=minrow+1 && somecol>=mincol+1 && somecol<=maxcol-1) {somecolour=piecearray[somecol][somerow-1]; if (piecearray[somecol-1][somerow]==somecolour && piecearray[somecol+1][somerow]==somecolour) {return true}}
if (somerow<=maxrow-1 && somecol>=mincol+1 && somecol<=maxcol-1) {somecolour=piecearray[somecol][somerow+1]; if (piecearray[somecol-1][somerow]==somecolour && piecearray[somecol+1][somerow]==somecolour) {return true}}
// check to fill in last of 3
if (somecol>=mincol+2 && somecol<=maxcol-1 ) {somecolour=piecearray[somecol+1][somerow]; if (piecearray[somecol-1][somerow]==somecolour && piecearray[somecol-2][somerow]==somecolour) {return true}}
if (somerow>=minrow+1 && somecol>=mincol+2) {somecolour=piecearray[somecol][somerow-1]; if (piecearray[somecol-1][somerow]==somecolour && piecearray[somecol-2][somerow]==somecolour) {return true}}
if (somerow<=maxrow-1 && somecol>=mincol+2) {somecolour=piecearray[somecol][somerow+1]; if (piecearray[somecol-1][somerow]==somecolour && piecearray[somecol-2][somerow]==somecolour) {return true}}

// checks for threes vertically
// check to fill in top of 3
if (somerow>=minrow+1 && somerow<=maxrow-2) {somecolour=piecearray[somecol][somerow-1]; if (piecearray[somecol][somerow+1]==somecolour && piecearray[somecol][somerow+2]==somecolour) {return true}}
if (somecol>=mincol+1 && somerow<=maxrow-2) {somecolour=piecearray[somecol-1][somerow]; if (piecearray[somecol][somerow+1]==somecolour && piecearray[somecol][somerow+2]==somecolour) {return true}}
if (somecol<=maxcol-1 && somerow<=maxrow-2) {somecolour=piecearray[somecol+1][somerow]; if (piecearray[somecol][somerow+1]==somecolour && piecearray[somecol][somerow+2]==somecolour) {return true}}
// check to fill in middle of 3
if (somecol>=mincol+1 && somerow>=minrow+1 && somerow<=maxrow-1) {somecolour=piecearray[somecol-1][somerow]; if (piecearray[somecol][somerow-1]==somecolour && piecearray[somecol][somerow+1]==somecolour) {return true}}
if (somecol<=maxcol-1 && somerow>=minrow+1 && somerow<=maxrow-1) {somecolour=piecearray[somecol+1][somerow]; if (piecearray[somecol][somerow-1]==somecolour && piecearray[somecol][somerow+1]==somecolour) {return true}}
// check to fill in bottom of 3
if (somerow>=minrow+2 && somerow<=maxrow-1) {somecolour=piecearray[somecol][somerow+1]; if (piecearray[somecol][somerow-1]==somecolour && piecearray[somecol][somerow-2]==somecolour) {return true}}
if (somerow>=minrow+2 && somecol>=mincol+1) {somecolour=piecearray[somecol-1][somerow]; if (piecearray[somecol][somerow-1]==somecolour && piecearray[somecol][somerow-2]==somecolour) {return true}}
if (somerow>=minrow+2 && somecol<=maxcol-1) {somecolour=piecearray[somecol+1][somerow]; if (piecearray[somecol][somerow-1]==somecolour && piecearray[somecol][somerow-2]==somecolour) {return true}}

return false
}

function showavailablemoves()
{
if (playstate=='play' && selectionrecord.length==0)
{
playstate='pause'
showhighlights(copyvalues(potmoves))
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('showavailablemoves2()', 2000)
}
}

function showavailablemoves2()
{
removehighlights(copyvalues(potmoves))
playstate='play'
}

function newgame()
{
if (playstate!='pause')
{
tiletypes=newtiletypes
maxturns=newnumturns
changetextvalue('maxturnsmessage', maxturns)
scorehandler('newgame')

addtiles()
redisplayboard()
messagedisplay('Select first below')
playstate='play'
checkmoves()
// if no viable moves, start again
if (potmoves.length==0) {newgame()}
}

}

function copyvalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=[]
for (var j=0; j<somearray[i].length; j++)
{
temparray[i][j]=somearray[i][j]
}
}
return temparray
}

var secondtimer




var linkedpieces=[]
var timer

function selectpiece(coli, rowj)
{
if (runcheck()==true)
{
var selectedcolour=piecearray[coli][rowj]
if (playstate=='play')
{
playstate='pause'
showhighlights([[coli, rowj]])

messagedisplay('Select adjacent')
scorehandler('newturn')

selectionrecord=selectionrecord.concat([[coli, rowj]])
if (selectionrecord.length==1)
{playstate='play'}
else // second piece selected
{makemove()}

}
}
}

function makemove()
{
var firsttile=selectionrecord[0]
var secondtile=selectionrecord[1]
if (adjacenttiles(firsttile, secondtile)==true)
{
swapcolours(firsttile, secondtile)
redisplayboard()
showhighlights([firsttile, secondtile])
messagedisplay('Pair swapped')
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('continuemakingmove()', 500)
}
else
{
showhighlights([firsttile, secondtile])

messagedisplay('Not adjacent: no swap')
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('noswaps()', 500)

}
}

function noswaps()
{
messagedisplay('Select first below')
selectionrecord=[]
redisplayboard()
playstate='play'
}

function continuemakingmove()
{

// deals with removing and collapsing - or returning to original position
var tile1=selectionrecord[0]
var col1=tile1[0]
var row1=tile1[1]
var colour1=piecearray[col1][row1]

var tile2=selectionrecord[1]
var col2=tile2[0]
var row2=tile2[1]
var colour2=piecearray[col2][row2]

var colourlengths1
colourlengths1=samecolourpiecesaround(colour1, col1, row1, 0, width-1, comingheight, height+comingheight-1)
var colourlengths2
colourlengths2=samecolourpiecesaround(colour2, col2, row2, 0, width-1, comingheight, height+comingheight-1)
var theremovals=[]
var found31=false
var found32=false
if (colourlengths1[0]+colourlengths1[1]>=2) {found31=true}
if (colourlengths1[2]+colourlengths1[3]>=2) {found31=true}

if (colourlengths2[0]+colourlengths2[1]>=2) {found32=true}
if (colourlengths2[2]+colourlengths2[3]>=2) {found32=true}

if (found31==true) {theremovals=[[[col1, row1], colourlengths1]]}
if (found32==true) {theremovals=theremovals.concat([[[col2, row2], colourlengths2]])}

if (theremovals.length>0)
{
removehighlights([tile1, tile2])
removethetiles(theremovals)
}
else
{
messagedisplay('No 3 lines: undoing')
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('swapback(['+col1+', '+row1+'], ['+col2+', '+row2+'])', 500)


}
}

function swapback(tile1, tile2)
{
swapcolours(tile1, tile2)
redisplayboard()
selectionrecord=[]
playstate='play'
messagedisplay('Select first below')
}

function removethetiles(theremovals)
{
linkedpieces=[]
var sometile
var bonusscore=0
var horizlinks
var vertlinks
for (var i=0; i<theremovals.length; i++)
{
// first check whether the piece itself is in the linked pieces - if not add it in
sometile=theremovals[i][0]
somecounter=theremovals[i][1]
horizlinks=somecounter[0]+somecounter[1]
vertlinks=somecounter[2]+somecounter[3]
if (ismember(sometile, linkedpieces)==false) {linkedpieces=linkedpieces.concat([sometile])}
// then do the same for each of the rows or columns making a set of three or more
if (horizlinks>=2)
{
addlinkedpiecestoarray(sometile, somecounter[0], somecounter[1], 0, 0)
}
if (horizlinks>2)
{
bonusscore=bonusscore+horizlinks+1
}
if (vertlinks>=2)
{
addlinkedpiecestoarray(sometile, 0, 0, somecounter[2], somecounter[3])
}
if (vertlinks>2)
{
bonusscore=bonusscore+vertlinks+1
}
}
if (theremovals.length>1) {bonusscore=bonusscore+10}

showhighlights(copyvalues(linkedpieces))
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('removethetiles2('+bonusscore+')', 500)


}

function removethetiles2(bonusscore)
{
var thisscore=linkedpieces.length
for (var i=0; i<thisscore; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='blank'
redisplayboard()
}
var scoretext='Score: '+thisscore
if (bonusscore>0) {scoretext=scoretext+' + '+bonusscore+' bonus'}
messagedisplay(scoretext)

scorehandler(thisscore+bonusscore)

// next remove all linked pieces
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('docollapse()', 500)
}

function docollapse()
{
collapsecolumns()
refillemptycells()
redisplayboard()
// next deal with newly fallen tiles and see if they result in further triplets and hence collapsing
dealwithfallentiles()

}

function dealwithfallentiles()
{
linkedpieces=[]
var found
for (var i=0; i<width; i++)
{
for (var j=comingheight; j<height+comingheight; j++)
{
var somecounter=samecolourpiecesaround(piecearray[i][j], i, j, 0, width-1, comingheight, height+comingheight-1)
found=false
if (somecounter[0]+somecounter[1]>=2) {found=true}
if (somecounter[2]+somecounter[3]>=2) {found=true}
if (found==true) {linkedpieces=linkedpieces.concat([[i, j]])}
}
}
if (linkedpieces.length>0) // if one or more pieces can be removed
{
showhighlights(copyvalues(linkedpieces))

if (timer != null) {clearTimeout(timer)}
timer= setTimeout('dealwithfallen2()', 1500)


}
else
{
messagedisplay('Select first below')
selectionrecord=[]
scorehandler('turnend')
}
}

function dealwithfallen2()
{

var bonusscore=10
var thisscore=linkedpieces.length
for (var i=0; i<thisscore; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='blank'
redisplayboard()
}
var scoretext='Score: '+thisscore
if (bonusscore>0) {scoretext=scoretext+' + '+bonusscore+' bonus'}
messagedisplay(scoretext)
scorehandler(thisscore+bonusscore)


// next remove all linked pieces
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('docollapse()', 500)

}

var gameturnscore=0
var gametotalscore=0
var hiturnscore=0
var hitotalscore=0
var turnstaken=0
var maxturns=newnumturns


function scorehandler(somescore)
{

if (member(somescore, ['turnend', 'newturn', 'newgame'])==true)
{

if (somescore=='turnend')
{
turnstaken++
changetextvalue('turnstakenmessage', turnstaken)
gameturnscore=0


if (turnstaken<maxturns) 
{
checkmoves()
if (potmoves.length==0)
{
playstate="stop"; messagedisplay('No moves: End')
}
else {playstate="play"}
} else {playstate="stop"; messagedisplay('Turns over: End')}
}

if (somescore=='newturn')
{
changetextvalue('gameturnscoremessage', 0)
}

if (somescore=='newgame')
{
gameturnscore=0
gametotalscore=0
turnstaken=0
changetextvalue('gameturnscoremessage', 0)
changetextvalue('gametotalscoremessage', 0)
changetextvalue('turnstakenmessage', 0)
}

}
else

{

gameturnscore=gameturnscore+somescore
gametotalscore=gametotalscore+somescore
changetextvalue('gameturnscoremessage', gameturnscore)
changetextvalue('gametotalscoremessage', gametotalscore)

if (gameturnscore>hiturnscore) {hiturnscore=gameturnscore; document.main.hiturnscoremessage.value=hiturnscore}
if (gametotalscore>hitotalscore) {hitotalscore=gametotalscore; document.main.hitotalscoremessage.value=hitotalscore}

}

}


function addlinkedpiecestoarray(sometile, minx, maxx, miny, maxy)
{

var thistile
for (var i=minx; i>0; i--) 
{
thistile=[sometile[0]-i, sometile[1]]
if (ismember(thistile, linkedpieces)==false) {linkedpieces=linkedpieces.concat([thistile])}
}
for (var i=maxx; i>0; i--) 
{
thistile=[sometile[0]+i, sometile[1]]
if (ismember(thistile, linkedpieces)==false) {linkedpieces=linkedpieces.concat([thistile])}
}
for (var i=miny; i>0; i--) 
{
thistile=[sometile[0], sometile[1]-i]
if (ismember(thistile, linkedpieces)==false) {linkedpieces=linkedpieces.concat([thistile])}
}
for (var i=maxy; i>0; i--) 
{
thistile=[sometile[0], sometile[1]+i]
if (ismember(thistile, linkedpieces)==false) {linkedpieces=linkedpieces.concat([thistile])}
}

}

function adjacenttiles(firsttile, secondtile)
{
var adjacent=false
var thediff

if (firsttile[0]-secondtile[0]==0) // if in same column
{
thediff=firsttile[1]-secondtile[1]
if (thediff==1) {adjacent=true}
if (thediff==-1) {adjacent=true}
}
if (firsttile[1]-secondtile[1]==0) // if in same row
{
thediff=firsttile[0]-secondtile[0]
if (thediff==1) {adjacent=true}
if (thediff==-1) {adjacent=true}
}
return adjacent
}

function swapcolours(firsttile, secondtile)
{
var firstcol=piecearray[firsttile[0]][firsttile[1]]
var secondcol=piecearray[secondtile[0]][secondtile[1]]
piecearray[firsttile[0]][firsttile[1]]=secondcol
piecearray[secondtile[0]][secondtile[1]]=firstcol
}


function addtiles()
{
// first set up all cells to be blank

for (var i=0; i<width; i++)
{
piecearray[i]=[]
for (var j=0; j<height+comingheight; j++)
{
piecearray[i][j]="blank"
}
}

// next set up each one to be a legitimate colour

for (var i=0; i<width; i++)
{
for (var j=0; j<height+comingheight; j++)
{
settolegitimatecolour(i, j)

}
}
}

function refillemptycells()
{
for (var i=0; i<width; i++)
{
for (var j=0; j<height+comingheight; j++)
{
if (piecearray[i][j]=="blank") {settolegitimatecolour(i, j)}

}
}
}

function checkrandomness()
{
var ccheck=[0, 0, 0, 0, 0, 0]
var somecolour
for (var i=0; i<12000; i++)
{
var potentialcolours=[0, 1, 2, 3, 4, 5] 
potentialcolours=shufflearray(potentialcolours) // forces sequential but random selection of colour
somecolour=potentialcolours[0]
ccheck[somecolour]++
}
alert(ccheck)

}

var tiletypes=newtiletypes

function tilecolourlist()
{
if (tiletypes==6) {return ["red", "green", "yellow", "blue", "magenta", "white"]}
if (tiletypes==7) {return ["red", "green", "yellow", "blue", "magenta", "white", "cyan"]}
if (tiletypes==8) {return ["red", "green", "yellow", "blue", "magenta", "white", "cyan", "orange"]}


}

function settolegitimatecolour(coli, rowj)
{
var potentialcolours=tilecolourlist() 
potentialcolours=shufflearray(potentialcolours) // forces sequential but random selection of colour
piecearray[coli][rowj]=findfirstlegitcolour(potentialcolours, coli, rowj)
}

function findfirstlegitcolour(potentialcolours, coli, rowj)
{
if (legitimatecolour(potentialcolours[0], coli, rowj) == true)
{return potentialcolours[0]}
else
{return findfirstlegitcolour(tailarray(potentialcolours), coli, rowj)}
}

function legitimatecolour(somecolour, coli, rowj)
{
var somecheck=true
var colourlengths
colourlengths=samecolourpiecesaround(somecolour, coli, rowj, 0, width-1, 0, height+comingheight-1)
if (colourlengths[0]+colourlengths[1]>1) {somecheck=false}
if (colourlengths[2]+colourlengths[3]>1) {somecheck=false}
return somecheck
}

function samecolourpiecesaround(somecolour, coli, rowj, mini, maxi, minj, maxj)
{
// checks in four directions to determine number of pieces same colour as somecolour, starting (not including) position coli, rowj
var colourdirections=[0, 0, 0, 0]
colourdirections[0]=samecolourpiecesonedirection(somecolour, coli, rowj, -1, 0, mini, maxi, minj, maxj)
colourdirections[1]=samecolourpiecesonedirection(somecolour, coli, rowj, 1, 0, mini, maxi, minj, maxj)
colourdirections[2]=samecolourpiecesonedirection(somecolour, coli, rowj, 0, -1, mini, maxi, minj, maxj)
colourdirections[3]=samecolourpiecesonedirection(somecolour, coli, rowj, 0, 1, mini, maxi, minj, maxj)
return colourdirections
}

function samecolourpiecesonedirection(somecolour, coli, rowj, di, dj, mini, maxi, minj, maxj)
{
var sometotal=0
var newcol=coli+di
var newrow=rowj+dj
var inrange=true
if (newcol< mini) {inrange=false}
if (newcol> maxi) {inrange=false}
if (newrow< minj) {inrange=false}
if (newrow> maxj) {inrange=false}
if (inrange==false) 
{return 0}
else // inrange=true
{
if (piecearray[newcol][newrow]==somecolour) 
{return 1+samecolourpiecesonedirection(somecolour, newcol, newrow, di, dj, mini, maxi, minj, maxj)}
else
{return 0}

}

}

function colourcode(somecolour)
{
var somecode
if (somecolour=="red") {somecode="#FF0000"}
if (somecolour=="white") {somecode="#FFFFFF"}
if (somecolour=="blue") {somecode="#0000FF"}
if (somecolour=="blank") {somecode="#000000"}
if (somecolour=="grey") {somecode="#C0C0C0"}
if (somecolour=="green") {somecode="#00FF00"}
if (somecolour=="yellow") {somecode="#FFFF00"}
if (somecolour=="magenta") {somecode="#FF00FF"}
if (somecolour=="orange") {somecode="#FF7F00"}
if (somecolour=="cyan") {somecode="#00FFFF"}
return somecode
}

function messagedisplay(messagetext)
{
changetextvalue('statusmessage', messagetext)

}



// Begin the code that is different in SingleFile and graphics version

function setupboard()
{

var piecename
documentwrite('<table align=center valign=top cellspacing=0 cellpadding=0><tr>')




documentwrite('<td><table border=1 cellspacing=0 cellpadding=0 align=center valign=top><tr><td><table border=0 cellspacing=0 cellpadding=0 style="background-color:black" valign=top align="center">');
for (var i=0; i<comingheight; i++)
{
documentwrite('<tr>')
for (var j=0; j<width; j++)
{
piecename='piece'+j+'_'+i
documentwrite('<td height="'+Math.floor(scalef*17)+'" width="'+Math.floor(scalef*17)+'" ><img style="display:block" height="'+Math.floor(scalef*17)+'" width="'+Math.floor(scalef*17)+'" name="'+piecename+'" src="blank.gif"></td>')
}
documentwrite('</tr>')
}
documentwrite('<tr><td height="'+Math.floor(scalef*17)+'" colspan='+height+'  style="background-color:silver" align="center"><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*115)+'px;background-color:white;text-align:center"><div id="statusmessage" style="text-align: center; color:black"></div></td></tr></table></td></tr>')
for (var i=0; i<height; i++)
{
documentwrite('<tr>')
for (var j=0; j<width; j++)
{
piecename='piece'+j+'_'+(i+comingheight)
documentwrite('<td height="'+Math.floor(scalef*17)+'" width="'+Math.floor(scalef*17)+'" ><img style="display:block" height="'+Math.floor(scalef*17)+'" width="'+Math.floor(scalef*17)+'" name="'+piecename+'" src="blank.gif" onClick="selectpiece('+j+', '+(i+comingheight)+')" ></td>')
}
documentwrite('</tr>')
}



documentwrite('</table></td></tr>')

documentwrite('</table ></td></tr><tr><td height='+Math.floor(scalef*2)+'></td></tr><tr><td  valign=top ><table border=0 cellspacing=0 cellpadding=0><tr><td><table border=1 cellpadding=0 cellspacing=0 align=center><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="showad()" width='+Math.floor(scalef*35)+'>New</td></tr></table></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*30)+'px;background-color:green;text-align:center"><div id="gametotalscoremessage" style="text-align: center; color:black">0</div></td></tr></table></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*50)+'px;background-color:white;text-align:center"><div id="turnstakenmessage" style="text-align: center; color:black;display:inline">0</div>/<div id="maxturnsmessage" style="text-align: center; color:black;display:inline"></div></td></tr></table></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*30)+'px;background-color:yellow;text-align:center"><div id="gameturnscoremessage" style="text-align: center; color:black">0</div></td></tr></table><input type="hidden" name="hitotalscoremessage" readonly=readonly  value="0"><input type="hidden" name="hiturnscoremessage" readonly=readonly  value="0"></td><td><table border=1 cellpadding=0 cellspacing=0 align=center><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="showavailablemoves()" width='+Math.floor(scalef*35)+'>Clues</td></tr></table></td></tr></table>')




documentwrite('</td></tr></table>')



}

function redisplayboard()
{


var piecename
var bordersize
for (var i=0; i<width; i++)
    {
for (var j=0; j<height+comingheight; j++)
{
piecename='piece'+i+'_'+j
document.images[piecename].src=piecearray[i][j]+'.gif'


}
	
    }



}

function showhighlights(highlightsarray)
{

var piecename
for (var i=0; i<highlightsarray.length; i++)
{
piecename='piece'+highlightsarray[i][0]+'_'+highlightsarray[i][1]

document.images[piecename].src='highlight'+piecearray[highlightsarray[i][0]][highlightsarray[i][1]]+'.gif'
}
}

function removehighlights(highlightsarray)
{
var piecename
for (var i=0; i<highlightsarray.length; i++)
{
piecename='piece'+highlightsarray[i][0]+'_'+highlightsarray[i][1]
document.images[piecename].src=piecearray[highlightsarray[i][0]][highlightsarray[i][1]]+'.gif'
}
}

function changetiletypes(somenum)
{

for (var i=6; i<=8; i++)
{
if (somenum==i)
{
document.images['newtiletypes'+i].src="selecton.gif"
}
else
{
document.images['newtiletypes'+i].src="selectoff.gif"
}
}
newtiletypes=somenum
}

function changenumturns(somenum)
{

for (var i=50; i<=150; i=i+50)
{
if (somenum==i)
{
document.images['newnumturns'+i].src="selecton.gif"
}
else
{
document.images['newnumturns'+i].src="selectoff.gif"
}
}
newnumturns=somenum
}





// End the code that is different in SingleFile and graphics version



//  End -->


documentwrite('<div style="position:relative;left:0px;top:0px;height:100%;width:100%"><div style="position:absolute;left:0px;top:'+Math.floor(scalef*2)+'px;display:block; px;height:'+Math.floor(scalef*235)+'px;width:100%">')

documentwrite('<form name="main">')


documentwrite('<table border=0 align=center>')
documentwrite('<tr><td>')
setupboard()
// changetiletypes(newtiletypes)
// changenumturns(newnumturns)
newgame()

documentwrite('</td>')
documentwrite('</tr>')


documentwrite('</table>')


documentwrite('</form>')
documentwrite('</div></div>')
</SCRIPT>

</div></div>
</td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="addivtotal" style="width:100%; display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">
<script language="Javascript">


var startad=1

function showstartad()
{
if (interruptsrequired==1 && thiscfpage!='ourproducts' && thiscfpage!=cfpackage )
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()
}
}


function showad()
{
if (restartconfirmationrequired==1)
{
displayrestartconfirmation()
}
else
{
showad2()
}
}

function showad2()
{
if (interruptsrequired==1  && thiscfpage!='ourproducts' && thiscfpage!=cfpackage)
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
continueafterad()
}

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='unselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='selected.gif'
}
}

var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
if (startad==1)
{
startad=0
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()

}
else
{
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
continueafterad()
}
}
else
{
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",2000);
}
}


documentwrite('<div style="height:'+Math.floor(scalef*3)+'px"></div><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*160)+' height='+Math.floor(scalef*100)+'><tr><td align=center><b>Trial Version</b><br><br>The Compact Fun games and puzzles are available without these countdown interrupts and ads in the full <br><b>Compact Fun</b> <br>app, as well as other apps.</td></tr></table>')


documentwrite('<br><table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0 width='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' height='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' onClick="changepage(\'ourproducts\')"><tr><td><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"></td></tr><tr><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="cflogo.png" border=0></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif"></td></tr><tr><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif"></td></tr></table>')

documentwrite('<br><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*140)+' height='+Math.floor(scalef*50)+'><tr><td align=center>To see details of these and other apps from TopAccolades press the button above.</td></tr></table>')


</script>











</div></div>
</td></tr></table>

<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>

</div><div id="help" style="width:100%;display:none;background-color:white"><table bgcolor=white width=100% border=0 cellpadding=1><tr><td><script language="Javascript">var helpindexrequired=0;</script><br><script language="Javascript">documentwrite('<table align=left border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center"  onClick="togglehelp()">Back</td></tr></table>')</script>
<br><p><script language="Javascript">
if (helpindexrequired==1)
{
documentwrite('<a href="#intro">Introduction</a><br><a href="#turn">Taking a turn</a><br><a href="#scoring">Scoring</a><br><a href="#clues">Clues</a><br><a href="#newgame">New game</a><br><a href="#terms">Terms of use</a><br><br>')}
</script>




<a name="intro"></a>
Treble Whammy is a game or pastime for one person.&nbsp; 
<p>The basic idea of Treble Whammy is very simple.  There is an 8x8 main frame, with an 8x3 hopper above it, into which tiles of seven different types, are placed randomly, but with a constraint that they must not form lines of three of the same type horizontally or vertically. 
<p>You try to form lines of three or more tiles of the same type, in rows or columns of the main frame (not diagonally, and ignoring the tiles in the hopper), by swapping over two adjacent tiles.  Any lines of 3 or more formed are removed from the frame.  The tiles in the main frame and hopper above the gaps fall down to fill the columns.  This will, of course, leave gaps at the top of some columns.  Any gaps in either the main frame or the hopper are then filled randomly - but again with the constraint that no lines of three are immediately formed in the main frame or the hopper.</p>
<p >The falling tiles may, of course, result in further lines of three or more tiles.  These, too, are removed, and further collapsing and replenishment takes place.  The cycle consisting of removal of lines of three or more, collapsing to fill the gaps, and replenishment, continues until no further lines of three are formed, at which point the turn ends.</p>
<p >Points are scored for each tile removed.  Bonus points can also be scored;  these form a crucial part of playing the game.  The objective is to maximize your score for the game, which ends when the number of turns allowed (100) has been reached, or when you cannot form any more lines of three by swapping adjacent tiles.  You may also wish to maximize your score for a given turn.</p>
<p>Although the tiles in the hopper cannot be selected, swapped or removed, the ability to see the contents of the hopper should enable you optimize your scoring chances, since you can see some of the tiles that will fall down to replace the ones that are removed.  This should enable you to see some of the potential for immediate bonuses due to the formation of further lines of three or more and also the opportunities for future swapping.</p>

<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="turn"></a><span style="font-weight:bold">Taking a turn</span></p>
<p>Whenever the system is waiting for you to take a turn, the message bar between the hopper and the main frame will display <span style="font-style:italic">Select first below</span>.  Simply press on the first of a pair of adjacent tiles in the main frame that you wish to swap.  This tile will be highlighted, and the message will then change to <span style="font-style:italic">Select adjacent</span>.  You should then press on the second tile, which will also be highlighted.</p>
<p>If the two tiles are adjacent, they are swapped over.  If they're not adjacent, an error message will be displayed and you should start the turn again by pressing on the first of an adjacent pair.</p>
<p>Once swapped, the system checks whether at least one legitimate line of three has been formed.  If it has not, the tiles are swapped back and you should start the turn again.</p>
<p>If at least one line of three has been formed, all the tiles in lines of three or more are highlighted, then removed, and then the collapsing and replenishment takes place.  The message bar informs you of the score for this (see below).  The cycle of checking for further lines of three, removal of these, collapsing and replenishment then takes place.  At each step, the lines of three or more are shown highlighted and removed, so that you can see what is happening.</p>
<p>Once no more lines of three are formed, the turn ends and you're ready for the next turn (as shown by the <span style="font-style:italic">Select first below</span> message), unless you've had the allowed number of turns, as shown by the <span style="font-style:italic">Turns over: End</span> message in the message bar, or there are no adjacent pairs to swap, as shown by the <span style="font-style:italic">No moves: End</span> message in the message bar.</p>

<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>

<p><a name="scoring"></a><span style="font-weight:bold">Scoring</span></p>
<p>After the tiles have been swapped:</p>
<ul>
<li>score 1 point for each tile that is removed;
<li>score 10 points bonus if both the tiles you selected and swapped are removed;
<li>score 4 points bonus for any line of four;
<li>score 5 points bonus for any line of five.
</ul>
<p><span style="font-style:italic">Scoring example 1</span></p>
<p>Selecting the two highlighted tiles on the left, results in the highlighting of the tiles as shown on the right, ready for removal.</p>
<p>The score for this is 3 - simply 1 point for each tile removed.</p>
<script language="Javascript">
documentwrite('<table width=100%><tr><td align=center width=50%>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 ><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="cyan.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="cyan.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="white.gif"></td></tr></table></td><td align=center>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 ><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="cyan.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="cyan.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="white.gif"></td></tr></table></td></tr></table>')
documentwrite('<p><span style="font-style:italic">Scoring example 2</span></p>')
documentwrite('<p>The total score for this is 10: 5 points for the five tiles removed, plus a bonus of  5 as a line of five has been formed.</p>')
documentwrite('<table width=100%><tr><td align=center width=50%>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 ><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="white.gif"></td></tr></table></td><td align=center>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 ><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="white.gif"></td></tr></table></td></tr></table>')
documentwrite('<p><span style="font-style:italic">Scoring example 3</span></p>')
documentwrite('<p>The total score for this is 28: 10 points for the ten tiles removed, plus a bonus of 8 (2x4) for the two lines of four, and finally a bonus of 10 as both swapped tiles are removed.</p>')
documentwrite('<table width=100%><tr><td align=center width=50%>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 ><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="cyan.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="white.gif"></td></tr></table></td><td align=center>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 ><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="green.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="cyan.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightblue.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="highlightred.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="yellow.gif"></td></tr><tr><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="magenta.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="red.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="blue.gif"></td><td height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'" ><img height="'+Math.floor(scalef*15)+'" width="'+Math.floor(scalef*15)+'"  style="display:block"  src="white.gif"></td></tr></table></td></tr></table>')
</script>
<p>If the collapse and replenishment causes further lines of 3 or more to be formed, score as follows in each cycle:</p>
<ul>
<li>score 1 point for each tile that is removed;
<li>score 10 points bonus.
</ul>
<p>So, for example, if the initial selection and removal scores 11, and after the first collapse and replenishment a further line of 3 and a line of 4 are formed and removed, and this in turn results in another line of 3 being formed and removed, the score for the turn would be as follows: </p>
<ul>
<li>11 initially
<li>17 for the first follow-up cycle (7 for the seven tiles removed + 10 bonus for the cycle
<li>13 for the second follow-up cycle (3 for the three tiles removed + 10 bonus for the cycle
</ul>
<p>The total for the turn is therefore 41.</p>
<p>The scores at each stage of a turn are displayed in the message bar.  The scores are also added on to the score for the turn (yellow background - reset to zero before each turn) and for the game (green background).</p>

<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="clues"></a><span style="font-weight:bold">Clues</span></p>
<p>If you are finding it difficult to spot where you could select a pair to swap, you can press the <span style="font-style:italic">Clues</span> button, but only before you have selected the first of a pair.  This results in the highlighting of all tiles that form gaps in a line of three, but which could be swapped with an adjacent tile of the appropriate colour to form a line of three or more.  The highlights are shown only briefly then switched off, after which you can select the first tile of a pair.</p>
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="newgame"></a><span style="font-weight:bold">New Game</span></p>
<p>A new game, with a new layout, may be generated at any time by pressing on the <span style="font-style:italic">New</span> button. 


<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<a name="terms"></a>
<p style="font-weight: bold;"><a name="terms">Terms of use</a></p>
<p>This software may be used for personal purposes only.&nbsp;  It may not be used for commercial purposes.</p>
<p>The software, code and script of this application may not be copied or be distributed to others.</p>
<p>The software, code and script may not be altered in any way.</p>
<p >Copyright of the software, code and script, and its
help
documentation, is held by TopAccolades Limited.&nbsp; No part of
the software,
code, script or documentation may be copied or used in another application or
document.</p>
<p >Although
every effort has been made to ensure that this software functions
as intended, TopAccolades Limited provides no warranty of
merchantability, or
fitness for a particular purpose, in relation to this application or
its
support.</p>
<p >TopAccolades
Limited shall not be liable for any damages whatsoever arising
out of the use of or inability to use this application or the
provision of
or failure
to provide support.</p>
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>

Version: 3.0 (20160321) <br>Scale: <script language="Javascript">documentwrite(scalef)</script><br><br>&nbsp;</td></tr></table></div>
<script language="Javascript">documentwrite('<div id="theimages" style="width:100%;height:'+Math.floor(scalef*12)+'px;overflow:hidden;background-color:black"  onClick="changepage(\'ourproducts\')"><center>');
var adsrequired=1

var baseonelinermessages=[
'Press ? for Help', '', 
'Use device Back for menu/exit', '', 
'TopAccolades Limited',
'Specializing in Original & Classic...',
'Game & Puzzle Apps',
'']

var admessages=[
'<span style="color:violet">For Birthdays & Anniversaries...</span>',
'<span style="color:violet">For Valentine\'s Day...</span>',
'<span style="color:violet">For Mother\'s & Father\'s Days...</span>',
'<span style="color:violet">Try with-my-love.com</span>',
'<span style="color:violet">Make the day really special!</span>',
'<span style="color:violet">We have web sites such as...</span>',
'<span style="color:violet">best-wife.com, sexiest-lover.com</span>',
'<span style="color:violet">supremely.sexy, just-so.sexy</span>',
'<span style="color:violet">best-husband.com, best-lover.com</span>',
'<span style="color:violet">best-mother.com, best-father.com</span>',
'<span style="color:violet">best-dad.com, best-daughter.com</span>',
'<span style="color:violet">... and many more.</span>',
'<span style="color:violet">Supply a loved one\'s name...</span>',
'<span style="color:violet">...to have a page such as...</span>',
'<span style="color:violet">jane-smith.best-wife.com</span>',
'<span style="color:violet">harry-styles.just-so.sexy</span>',
'<span style="color:violet">laura-brown.best-mother.com</span>',
'<span style="color:violet">Go to with-my-love.com...</span>',
'<span style="color:violet">...and make their day.</span>',
'',
'<span style="color:red">Sherlock is at the Bates Hotel</span>',
'<span style="color:red">Vic has been murdered</span>',
'<span style="color:red">Who killed Vic?</span>',
'<span style="color:red">With what?  And where?</span>',
'<span style="color:red">Ask Sherlock for clues...</span>',
'<span style="color:red">Then try to solve them</span>',
'<span style="color:red">Buy our great logic puzzle...</span>',
'<span style="color:red">CSI Sherlock</span>',
'',
'<span style="color:magenta">Play Rummy aginst the system...</span>',
'<span style="color:magenta">...or against a friend</span>',
'<span style="color:magenta">Full animation of deals and moves</span>',
'<span style="color:magenta">Game state remembered on exit</span>',
'<span style="color:magenta">Try our Rummy 7 app</span>',
'',
'<span style="color:cyan">Try our Kublitz Cube app</span>',
'<span style="color:cyan">Turn the layers to get...</span>',
'<span style="color:cyan">...the same colour on each side</span>',
'<span style="color:cyan">Guidance on solving the Cube</span>',
'<span style="color:cyan">Notation and mnemonics</span>',
'<span style="color:cyan">Kublitz Cube - it\'s free</span>',
'',
'<span style="color:magenta">Try our Peg Solitaire app</span>',
'<span style="color:magenta">Play with the full 32 pegs...</span>',
'<span style="color:magenta">...or start with fewer pegs </span>',
'<span style="color:magenta">Notation and mnemonics...</span>',
'<span style="color:magenta">...to remember the solution</span>',
'<span style="color:magenta">Peg Solitaire - it\'s free</span>',
'',
'<span style="color:lime">Try our Xword4x4 app</span>',
'<span style="color:lime">Crossword game for 2-4 players</span>',
'<span style="color:lime">Pass and Play mode</span>',
'<span style="color:lime">No internet connection required</span>',
'<span style="color:lime">You can even design the layout</span>',
'<span style="color:lime">Or change letter numbers/values</span>',
'<span style="color:lime">Try our <span style="color:white">Xword4x4</span> app</span>',
'',
'<span style="color:lime">If you like games such as...</span>',
'<span style="color:lime">Rummy, 4-in-a-line...</span>',
'<span style="color:lime">Hangman, Mancala...</span>',
'<span style="color:lime">Letters Game, Numbers Game...</span>',
'<span style="color:lime">& more classic & original games</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Games</span> app now</span>',
'',
'<span style="color:cyan">If you like puzzles such as...</span>',
'<span style="color:cyan">Sudoku, Hangman...</span>',
'<span style="color:cyan">Peg Solitaire, Step Challenge...</span>',
'<span style="color:cyan">WordSearch & other word puzzles...</span>',
'<span style="color:cyan">Numberskull & other number puzzles...</span>',
'<span style="color:cyan">Memory Pairs...</span>',
'<span style="color:cyan">& more classic & original puzzles</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Puzzles</span> app now</span>',
'',
'<span style="color:lime">Beat the Letters Game countdown;</span>',
'<span style="color:lime">Avoid the Hangman\'s noose;</span>',
'<span style="color:lime">Look for words in WordSearch+...</span>',
'<span style="color:lime">And other mind-boggling grids;</span>',
'<span style="color:lime">Try our original Pentad game;</span>',
'<span style="color:lime">Find connections in Linkword Snap;</span>',
'<span style="color:lime">Or solve the Word Ladder.</span>',
'<span style="color:lime">For word-based games and puzzles...</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Words</span> app now</span>',
'',
'<span style="color:magenta">Beat the Numbers Game countdown;</span>',
'<span style="color:magenta">Take 30 secs for our Step Challenge;</span>',
'<span style="color:magenta">Or Pyramid Numbers;</span>',
'<span style="color:magenta">Or try our original Numberskull.</span>',
'<span style="color:magenta">For number-based games & puzzles...</span>',
'<span style="color:magenta">Buy our <span style="color:white">Compact Numbers</span> app now</span>',
'',
'<span style="color:cyan">Solve Sudoku puzzles, with help;</span>',
'<span style="color:cyan">Be a mastermind and break the codes,</span>',
'<span style="color:cyan">Solve equations and use logic...</span>',
'<span style="color:cyan">In our original Numberskull puzzle;</span>',
'<span style="color:cyan">Find the killer based on clues...</span>',
'<span style="color:cyan">In Mystery Clues.</span>',
'<span style="color:cyan">For logic-based puzzles...</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Logic</span> app now</span>',
'',
'<span style="color:cyan">Exercise your brain;</span>',
'<span style="color:cyan">10 sets of exercises;</span>',
'<span style="color:cyan">5 exercises in each set...</span>',
'<span style="color:cyan">Word power...</span>',
'<span style="color:cyan">Verbal comprehension...</span>',
'<span style="color:cyan">Mental arithmetic...</span>',
'<span style="color:cyan">Memory...</span>',
'<span style="color:cyan">Pattern-matching...</span>',
'<span style="color:cyan">Great brain-training exercises...</span>',
'<span style="color:cyan">Buy our <span style="color:white">BrainBoxFun</span> app now</span>',
''

]

if (adsrequired==1) {baseonelinermessages=baseonelinermessages.concat(admessages)}

var onelinermessages=baseonelinermessages
documentwrite('<div id="oneliner" style="font-size='+Math.floor(scalef*9)+'px;text-align:center;font-weight:bold;color:white;background-color:black; width:100%">'+onelinermessages[0]+'</div><br><br>&nbsp;')
var clickproblemtimer=null
function handleclickproblem()
{
if (clickproblemtimer != null) {clearTimeout(clickproblemtimer)}
clickproblemtimer=setTimeout("modifyoneliner()",50);

}

function modifyoneliner()
{
changetextvalue('oneliner', document.getElementById('oneliner').innerHTML)
// document.getElementById('oneliner').innerHTML = document.getElementById('oneliner').innerHTML 
}

currentoneliner=0
function changeoneliner()
{
currentoneliner++
if (currentoneliner==onelinermessages.length) {currentoneliner=0}
changetextvalue('oneliner', onelinermessages[currentoneliner])
// document.getElementById('oneliner').innerHTML = onelinermessages[currentoneliner]
if (onelinertimer != null) {clearTimeout(onelinertimer)}
onelinertimer=setTimeout("changeoneliner()",5000);

}
var onelinertimer=null
onelinertimer=setTimeout("changeoneliner()",5000);


</script>

</center></div></td></tr></table></div></body></html>