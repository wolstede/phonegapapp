<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>Turncoat</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">


function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function documentwrite(someitem)
{
document.write(someitem)
}

function changepage(somepage)
{
location.href='../'+somepage+'/default.htm'
}



var combinationattributes=[0,30]

var cfpackage='compactfun'


var thiscfpage='turncoat'

var interruptsrequired=0


var screenwidth=window.innerWidth
var screenheight=window.innerHeight

var overallwidthscale=screenwidth/190
var overallheightscale=screenheight/270
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}

var heightspacer=(Math.floor(screenheight-Math.floor(scalef*270))/2)-2
if (heightspacer<0) {heightspacer=0}

documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')



</script>

</head>
<body onLoad="showstartad()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:black; width:100%; height:100%"><script language="Javascript">


function showpicturesfordownloading()
{

if (document.getElementById('theimages').style.display == 'none')
{document.getElementById('theimages').style.display = 'inline'}
else
{document.getElementById('theimages').style.display = 'none'}



}


var runcheckvalue='ok'
function runcheck()
{
return true
}

var helpdisplayed=0
function togglehelp()
{
if (document.getElementById('addivtotal').style.display=='none' && document.getElementById('therestart').style.display=='none')
{
helpdisplayed=1-helpdisplayed
if (helpdisplayed==1) {document.getElementById('help').style.display = 'inline'; document.getElementById('thegame').style.display = 'none'}
if (helpdisplayed==0) {document.getElementById('help').style.display = 'none'; document.getElementById('thegame').style.display = 'inline'}
handleclickproblem()
}
}
</script><div style="width:100%; height:100%">
<script language="Javascript">documentwrite('<table border=0 width=100% cellspacing=0 cellpadding=0 style="text-align: left" align=center><tr><td valign=bottom style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white; vertical-align: bottom; background-image:url(buttonbg.jpg)"><a name="Top"></a><table border=0 cellpadding=2 width=100% height='+Math.floor(scalef*14)+' cellspacing=0 valign=middle ><tr><td style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white">Turncoat</td><td valign=middle align=center width='+Math.floor(scalef*20)+'></td><td style="width:'+Math.floor(scalef*30)+'px;font-size:'+Math.floor(scalef*12)+'px;text-align:center;font-weight:bold;color:black"  onClick="togglehelp()">?</td></tr></table>')</script></td></tr><tr><td style="text-align: left; font-weight: normal; color: black; vertical-align: top;background-image:url(blank.gif)"><div id="therestart" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table cellspacing=0 cellpadding=0 border=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<script language="Javascript">
var restartconfirmationrequired=0
var adfrequency=1

window.onbeforeunload=checkforunload;

function checkforunload()
{
if (restartconfirmationrequired==1) 
{
return "Confirmation of leaving page"
}

}

function displayrestartconfirmation()
{
document.getElementById('thegame').style.display = 'none'; 
document.getElementById('therestart').style.display = 'inline'; 
handleclickproblem()
}

function cancelrestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
}

function continuerestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
showad2() 
}

</script>

<center><br><br>
<script language="Javascript">documentwrite('<table border=1 width='+Math.floor(scalef*150)+' style="background-color:silver;vertical-align:middle" valign=middle><tr><td align=center><br><br><img width='+Math.floor(scalef*36)+' src="cflogo.png"><br><br>Please confirm that you wish to restart.<br><br><br><table border=0 align=center><tr><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(redgradient.jpg);text-align:center" onClick="cancelrestartconfirmation()">Cancel</td></tr></table></td><td width='+Math.floor(scalef*20)+'></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(greengradient.jpg);text-align:center" onClick="continuerestartconfirmation()">Confirm</td></tr></table></td></tr></table><br><br></td></tr></table></center>')</script>



</div></div></td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="thegame" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=top style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">


<SCRIPT LANGUAGE="JavaScript">

// All code copyright of TopAccolades Limited
// Original game by Dave Wolstenholme

restartconfirmationrequired=1

var cardset = new Array()

function runonload()
{

}

function continueafterad()
{
newgame()
}

function createshuffledpacks() 
{
createshuffledpack(0)

}




function createshuffledpack(int1) 
{

var makeup = cardset[int1][1]
var n = 0
var i

for (i=0; i<makeup.length; i++)
{
var letter = makeup[i][0]
var quantity=makeup[i][1]


var j
for (j=0; j<quantity; j++)
{
cardset[int1][2][n]=letter
n = n+1
} // end for2

} // end for1

cardset[int1][2] = shufflearray(shufflearray(cardset[int1][2]))

}

function defineinitialcolours()
{
var numblanks=randomnumber(4)-1 // 0 - 3 blanks
var numblacks=randomnumber(5)+1 // 2- 6 blacks  
var numwhites=64-(numblanks+numblacks)
cardset=[
['Colours', [['white', numwhites], ['black', numblacks], ['blank', numblanks]], []]
]

createshuffledpack(0)

}


function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=new Array()
packsize=somearray.length
var ran
var i
for (i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}






function empty(array) 
// checks whether an array is empty:  returns true if so, false if not.
{
if (array.length == 0)
     return true  
else
     return false

}

function member(element, array) 
// checks whether element is a member of array:  returns true if so, false if not.
{
var check = false
var i = 0
while (i<array.length && !check){check = array[i]==element; i++};
return check

}

function exists(array, exp, vars)
/* 
Takes an array and checks whether there is an element of the array that satisfies the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars.


Returns an array = [element, true] where element is the first element found satisfying the expression, or [false, false] if no solution found.

Examples: 
exists([2, -6, 5, -9], "X<0", []) returns [-6, true]
exists([2, -6, 5, -9], "X<V1", [-10]) returns [false, false]

*/
{
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var check = false
var i = 0
var X; while (i<array.length && !check){X=array[i]; check=eval(exp); i++};
if (check) 
return [true, array[i-1]]


else
return [false, false]

}

function existsXon(array, exp)
/* 
Takes an array and checks whether there is an element of the array that satisfies the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars.


Returns true if there is, false if not

Examples: 
existsXon([2, -6, 5, -9], "X<0", []) returns true
existsXon([2, -6, 5, -9], "X<V1", [-10]) returns false

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
return exists(array, exp, vars)[0]


}

function findallXon(array, exp)
/* 
Takes array (an array) and finds all elements of the array that satisfy the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns an array comprising all the elements that satisfy the expression ([] if none).

Examples: 
findallXon([2, -6, 5, -9], "X<0", []) returns [-6, -9]
findallXon([2, -6, 5, -9], "X<V1", [-10]) returns []

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var X; var solutions = []; for (var j=0; j<array.length; j++){X=array[j]; if (eval(exp)) solutions = solutions.concat([x])};
return solutions

}

function forallXon(array, exp)
/* 
Takes an array and checks whether all elements of the array satisfy the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns true if they do, false if not.

Examples: 
forallXon([2, -6, 5, -9], "X<0", []) returns false
forallXon([2, -6, 5, -9], "X>V1", [-10]) returns true

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var check = true
var i = 0
var X; while (i < array.length && check) {X=array[i]; check=eval(exp);i++};
return check
}





function mapX(array, exp)
/* 
Takes array (an array) and generates a list (itself an array) of all the results of evaluating a function for each element of the array, where the expression exp
where exp is a string representing a function in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns an array, the same length as the original, comprising all the results.

Examples: 
mapX([2, -6, 5, -9], "X*2*V1", [3]) returns [12, -36, 30, -54]

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var X; var solutions = []; for (var j = 0; j< array.length; j++) {X = array[j]; solutions = solutions.concat([eval(exp)])}
return solutions

}



function position(player, name)
{
check=false
i=0
while (!check)
{	if (pieces[player][i][0]==name) 
            check=true
	else i++
}
return [pieces[player][i][1], pieces[player][i][2]]

}


function state(player, name)
{
var pos = position(player, name)

		
return states[player][pos[0]][pos[1]][1]	
}

function imghighlight(player, name, type)	
{

var highlight;
var newcolour;
if (state(player, name) == "black") highlight = "darkgrey";
if (state(player, name) == "white") highlight = "lightgrey";
if (state(player, name) == "blank") highlight = "blank";
if (type == "on") newcolour = highlight 
else newcolour = state(player, name);

          eval("document." + name + ".src = '" + newcolour + ".gif'");	
return false
}


function imgclick(player, index)
{
if (playstate == 'play')
{

playstate='pause'

var name='p'+player+'piece'+index
imghighlight(player, name, 'on')
var playermessage='p'+player+'message'
changetextvalue(playermessage, algebraic(index))

if (timer != null) {clearTimeout(timer)}
var command='imgclick2('+player+', '+index+')'

timer= setTimeout(command, 1000)
}

}

function imgclick2(player, index)
{

var name='p'+player+'piece'+index
imghighlight(player, name, 'off')

var validity='ok'
if (state(player, name) == "blank") {validity='Error! You cannot select blank squares'}
if (gametype == "white" && state(player, name) == "black") {validity='Error! You can select only white pieces'}

if (validity == 'ok')
{
changetextvalue('p'+player+'selected', 'X')

var somemessage=''
if (playersgone[player] == 1) {somemessage='New selection made'} else {somemessage='Selection made'}
playersgone[player]=1
if (playersgone[0] == 1 && playersgone[1] == 1) {somemessage=somemessage+' - Press Turn when ready'}
playerselection[player]=index

var playermessage='p'+player+'message'
changetextvalue(playermessage, somemessage)
playstate='play'
// if (playersgone[0] == 1 && playersgone[1] == 1) {make_turns()} else {playstate = 'play'}
}
else
{
var playermessage='p'+player+'message'
changetextvalue(playermessage, validity)
playstate='play'
}
}


function move()
{
playstate='pause'

if (playersgone[0] == 1 && playersgone[1] == 1) {make_turns()} else {playstate = 'play'}
}


function make_turns()
{
// make_move_set(1, playerselection[0], playerselection[1])
make_display_turn(0,0)

}

function make_display_turn(player, which)
{
displaygame(player)
var somecell
if (which==0) {somecell=playerselection[player]} else {somecell=playerselection[1-player]}
var sometilename='p'+player+'piece'+somecell
imghighlight(player, sometilename, 'on')
var usermessage

if (which == 0) {usermessage="Move based on own selection: " } else  {usermessage="Move based on opponent\'s selection: "}
changetextvalue('p'+player+'message', usermessage+algebraic(somecell))
if (timer != null) {clearTimeout(timer)}
var command='move_one_player('+player+', '+which+', '+somecell+')'

timer= setTimeout(command, 2000)
}

function make_move_set(which, pos0, pos1)
{

var p0tilename='p'+0+'piece'+pos0
var p1tilename='p'+1+'piece'+pos1

imghighlight(0, p0tilename, 'on')
imghighlight(1, p1tilename, 'on')
var usermessage

if (which == 1) {usermessage="Move based on own selection: " } else  {usermessage="Move based on opponent\'s selection: "}
changetextvalue('p0message', usermessage+algebraic(pos0))
changetextvalue('p1message', usermessage+algebraic(pos1))

if (timer != null) {clearTimeout(timer)}
var command='move_both_players('+which+', '+pos0+', '+pos1+')'

timer= setTimeout(command, 2000)
}


function algebraic(pos)
{
var theoutput
var rowi=0
var coli=0
for (var i=0; i<64; i++)
    {
	if (i == pos) {theoutput=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'][coli]+ (rowi+1)};
	if (coli == 7) {rowi++; coli=0} else coli++
	
    };
return theoutput
}

function move_one_player(player, which, somecell)
{
var sometilename='p'+player+'piece'+somecell
imghighlight(player, sometilename, 'off')
make_turn(player, somecell)
if (timer != null) {clearTimeout(timer)}
var command
if (player==0) 
{
command="make_display_turn(1, "+which+")"
timer= setTimeout(command, 2000)
}
else // player=1
{
check_for_win()
if (playstate=='pause')
{
if (which==1) 
{
command='finish_turn()'
}
else
{
command="make_display_turn(0, 1)"
}
timer= setTimeout(command, 2000)
}
}

}

function finish_turn()
{
playerselection=[0, 0]
playersgone=[0, 0]
var selectiontype
if (gametype == "white") {selectiontype = "white only"} else {selectiontype = "white or black"}
changetextvalue('p0message', 'Next turn - make your selection - '+selectiontype)
changetextvalue('p1message',  'Next turn - make your selection - '+selectiontype)

changetextvalue('p0selected', totalblacks(0))
changetextvalue('p1selected', totalblacks(1))
playstate='play'

}

function totalblacks(player)
{
var sometot=0
for (var i=0; i<64; i++)
{
if (state(player, 'p'+player+'piece'+i)=='black') {sometot++}
}
return sometot
}

function move_both_players(which, pos0, pos1)
{

var p0tilename='p'+0+'piece'+pos0
var p1tilename='p'+1+'piece'+pos1
imghighlight(0, p0tilename, 'off')
imghighlight(1, p1tilename, 'off')
make_turn(0, pos0)
make_turn(1, pos1)

if (timer != null) {clearTimeout(timer)}
check_for_win()
if (playstate == 'pause')
{
if (which == 1) 
{
make_move_set(2, pos1, pos0)
}
else
{
playerselection=[0, 0]
playersgone=[0, 0]
var selectiontype
if (gametype == "white") {selectiontype = "white only"} else {selectiontype = "white or black"}
changetextvalue('p0message', 'Next turn - make your selection - '+selectiontype)
changetextvalue('p1message',  'Next turn - make your selection - '+selectiontype)

playstate='play'
}
}
}

function winningstate(player)
{
var thisstate='win'
for (var coli=0; coli<8; coli++)
{
for (var rowi=0; rowi<8; rowi++)
{
if (states[player][coli][rowi][1] == "white") {thisstate='go'}
}

}
return thisstate
}

function check_for_win() 
{

var p0state = winningstate(0)

var p1state = winningstate(1)

if (p0state == 'win' && p1state == 'win')
{
changetextvalue('p0message',  'Game drawn')
changetextvalue('p1message', 'Game drawn')
playstate='stop'
}
if (p0state == 'win' && p1state == 'go')
{
changetextvalue('p0message',  'You win')
changetextvalue('p1message',  'You lose')
playstate='stop'
}

if (p0state == 'go' && p1state == 'win')
{
changetextvalue('p0message',  'You lose')
changetextvalue('p0message',  'You win')
playstate='stop'
}





}


function changecolour(player, name)	
{
var opposite;
if (state(player, name) == "black") opposite = "white";
if (state(player, name) == "white") opposite = "black";
if (state(player, name) == "blank") opposite = "blank";
var pos = position(player, name)
states[player][pos[0]][pos[1]][1] = opposite;


          eval("document." + name + ".src = '" + opposite + ".gif'");	
return false
}

function setupboard(player)
{
var rowi = 0;
var coli = 0;

var playername='p'+player
var piecename
documentwrite('<table border=1 cellspacing=0 cellpadding=0 style="align:center" align=center>');
documentwrite('<tr><td style="background-color:'+fullcolors[player]+'" height='+Math.floor(scalef*15)+' width='+Math.floor(scalef*15)+' ></td>');

for (var i=0; i<8; i++)
  {
  documentwrite('<td width='+Math.floor(scalef*15)+' style="background-color:'+fullcolors[player]+';text-align:center;font-weight:bold">&#' + (i+65) + ';</td>')
  }

documentwrite('</tr>');
var cell
for (var i=0; i<8; i++)
{
documentwrite('<tr><td height='+Math.floor(scalef*15)+' style="background-color:'+fullcolors[player]+';text-align:center;font-weight:bold">'+(i+1)+'</td>')
for (var j=0; j<8; j++)
{
cell=(8*i)+j
piecename=playername+'piece'+cell
documentwrite('<td style="text-align:center;background-color:green"><img style="display:block"  onClick="imgclick('+player+', '+cell+')" width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.gif" name="'+piecename+'"></td>')
}


documentwrite('</tr>')

}


documentwrite('</table>');

}

function initialcolour(coli, rowi)
{
var j = 8*coli + rowi;
var initcolour=cardset[0][2][j]

return initcolour
}

function make_turn(player, index)
{
var name='p'+player+'piece'+index
var trapped = trappedpieces(player, name); 
changecolour(player, name)
var command='changecolour('+player+', X)'
var sols = mapX(trapped, command)
}

function trappedpieces(player, name)
{
var trapped=[]
col=position(player, name)[0]
row=position(player, name)[1]
current_state=state(player, name)
var opposite
if (current_state == "black") opposite = "white";
if (current_state == "white") opposite = "black";
var trappeddirection
for (i=-1;i<2;i++)
{
for (j=-1;j<2;j++)
{
trappeddirection=trapped_direction(player, [], opposite, col, row, i, j)
trapped=trapped.concat(trappeddirection)
}
}
return trapped
}


function trapped_direction(player, inlist, thestate, col, row, dcol, drow)
{
// thestate is the opposite colour of the piece being turned
var col1=col+dcol;
var row1=row+drow;
if (dcol==0 && drow==0) return []
else
if (onboard(col1, row1))
{
var state_pair=states[player][col1][row1]
var piece_state = state_pair[1]
var piece_name = state_pair[0]
if (piece_state == thestate) return inlist
else
if (piece_state == "blank") return []
else
// else it's the same colour as the piece being turned so might be trapped
{
// eval("document." + piece_name + ".src = '" + "blank" + ".gif'");
return trapped_direction(player, inlist.concat([piece_name]), thestate, col1, row1, dcol, drow)
}
}
else return []
  
}

function onboard(col, row)
{
if ((col > -1 && col < 8) && (row > -1 && row < 8)) 
return true
else
return false
}

function newgame()
{
gametype=nextgametype
defineinitialcolours()
resetupboard(0)
resetupboard(1)



}

function resetupboard(player)
{
var rowi = 0;
var coli = 0;
var initcolour;
playersgone=[0, 0]
playerselection=[0, 0] // any old value
playstate='play'


var playername='p'+player
var piecename

for (var i=0; i<64; i++)
    {
	initcolour = initialcolour(coli, rowi)
	piecename=playername+'piece' + i
	document.images[piecename].src=initcolour+'.gif'
	pieces[player][i]=[piecename, coli, rowi]
	states[player][coli][rowi]=[piecename, initcolour]
	
	if (coli == 7) {rowi++; coli=0}
	else coli++
	
    };
var usermessage
if (gametype == "whiteorblack") {usermessage="Aim: only black pieces.  Select white or black."}
else  {usermessage="Aim: only black pieces.  Select white only."}

changetextvalue(playername+'message', usermessage)
changetextvalue('p'+player+'selected', totalblacks(player))
}

var nextgametype='whiteorblack'
function changegametype(ptype)
{
nextgametype=ptype
var oppgametype='white'
if (nextgametype=='white') {oppgametype='whiteorblack'}
document.images['playtype'+nextgametype].src='selected.gif'
document.images['playtype'+oppgametype].src='unselected.gif'
}


var fullcolors=['#FF0000', '#FFFF00']
var lightcolors=['#FFCCCC', '#FFFFCC']








var thedivs=['maingame', 'more']
function displaydiv(somediv)
{
for (var i=0; i<thedivs.length; i++)
{
document.getElementById(thedivs[i]).style.display = 'none'
}
document.getElementById(thedivs[somediv]).style.display = 'inline'
handleclickproblem()
}



var thegametypes=['red', 'yellow']

function displaygame(somediv)
{
olddiv=1-somediv
for (var i=0; i<2; i++)
{
document.getElementById('playerselect'+i).style.backgroundColor = lightcolors[i]
}
document.getElementById('playerselect'+somediv).style.backgroundColor = fullcolors[somediv]

document.getElementById(thegametypes[olddiv]).style.display = 'none'
document.getElementById(thegametypes[somediv]).style.display = 'inline'
handleclickproblem()
}



</SCRIPT>




<script LANGUAGE="JavaScript">
documentwrite('<div style="position:relative;left:0px;top:0px;height:100%;width:100%"><div style="position:absolute;left:0px;top:'+Math.floor(scalef*2)+'px;height:'+Math.floor(scalef*235)+'px;width:100%; background-color:#996699">')

documentwrite('<form name="main"><div id="maingame">')
documentwrite('<table border=1 width=100% cellpadding=0><tr><td><table border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center" onClick="showad()">New</td></tr></table></td><td id="playerselect0" onClick="displaygame(0)" style="background-color:#FF0000; text-align:center; font-weight:bold" width='+Math.floor(scalef*30)+'><div id="p0selected"></div></td><td id="playerselect1" onClick="displaygame(1)" style="background-color:#FFFFCC; text-align:center; font-weight:bold" width='+Math.floor(scalef*30)+'><div id="p1selected"></div></td><td style="background-color:white; text-align:center; font-weight:bold"><table border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center" onClick="move()">Turn</td></tr></table></td><td style="background-color:white; text-align:center; font-weight:bold"><table border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center" onClick="displaydiv(1)">More</td></tr></table></td></tr></table><br><div id="red" style="display:inline"><center>')
setupboard(0)
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*2)+'px;display:block"></div>')
documentwrite('<div id="p0message" style="width:'+Math.floor(scalef*180)+'px;height:'+Math.floor(scalef*35)+'px;border:1px solid gray; background-color:lemonchiffon">Aim: only black pieces.  Select white or black.</div></center></div><div id="yellow" style="display:none"><center>')
setupboard(1)
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*2)+'px;display:block"></div>')
documentwrite('<div id="p1message" style="width:'+Math.floor(scalef*180)+'px;height:'+Math.floor(scalef*35)+'px;border:1px solid gray; background-color:lemonchiffon">Aim: only black pieces.  Select white or black.</div></center></div>')
</script>


<SCRIPT LANGUAGE="JavaScript">
var playstate='play'

var pieces=[[], []]

var playerselection
var playersgone
var timer
var gametype="whiteorblack"

var states=new Array


for (var k=0; k<2; k++)
{
states[k] = new Array(8)
for (var i=0; i < 8; i++) 
{
   states[k][i] = new Array(8)
   for (var j=0; j < 8; j++) 
   {
      states[k][i][j] = new Array(2)
   }
}
}
newgame()

documentwrite('</div><div id="more" style="display:none"><br><table><tr><td align=left><table border=1 cellpadding=0 cellspacing=0><tr><td style="text-align:center;background-image:url(buttonbg.jpg);width:'+Math.floor(scalef*45)+'px" onClick="displaydiv(0)">Back</td></tr></table></td></tr><tr><td style="font-weight:bold"><br>Permitted colour selection:</td></tr><tr><td><table width=100% border=1 cellpadding=0 cellspacing=0><tr><td onClick="changegametype(\'whiteorblack\')" style="text-align:center;background-image:url(buttonbg.jpg)">White or Black</td><td onClick="changegametype(\'white\')" style="text-align:center;background-image:url(buttonbg.jpg)">White Only</td></tr><tr><td style="text-align:center"><img width='+Math.floor(scalef*10)+' name="playtypewhiteorblack"  src="selected.gif" onClick="changegametype(\'whiteorblack\')" ></td><td   style="text-align:center"><img width='+Math.floor(scalef*10)+' name="playtypewhite" src="unselected.gif" onClick="changegametype(\'white\')" ></td></tr></table></td></tr></table></div></form></div></div>')

</SCRIPT>





</div></div>
</td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="addivtotal" style="width:100%; display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">
<script language="Javascript">


var startad=1

function showstartad()
{
if (interruptsrequired==1 && thiscfpage!='ourproducts' && thiscfpage!=cfpackage )
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()
}
}


function showad()
{
if (restartconfirmationrequired==1)
{
displayrestartconfirmation()
}
else
{
showad2()
}
}

function showad2()
{
if (interruptsrequired==1  && thiscfpage!='ourproducts' && thiscfpage!=cfpackage)
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
continueafterad()
}

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='unselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='selected.gif'
}
}

var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
if (startad==1)
{
startad=0
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()

}
else
{
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
continueafterad()
}
}
else
{
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",2000);
}
}


documentwrite('<div style="height:'+Math.floor(scalef*3)+'px"></div><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*160)+' height='+Math.floor(scalef*100)+'><tr><td align=center><b>Trial Version</b><br><br>The Compact Fun games and puzzles are available without these countdown interrupts and ads in the full <br><b>Compact Fun</b> <br>app, as well as other apps.</td></tr></table>')


documentwrite('<br><table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0 width='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' height='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' onClick="changepage(\'ourproducts\')"><tr><td><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"></td></tr><tr><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="cflogo.png" border=0></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif"></td></tr><tr><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif"></td></tr></table>')

documentwrite('<br><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*140)+' height='+Math.floor(scalef*50)+'><tr><td align=center>To see details of these and other apps from TopAccolades press the button above.</td></tr></table>')


</script>











</div></div>
</td></tr></table>

<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>

</div><div id="help" style="width:100%;display:none;background-color:white"><table bgcolor=white width=100% border=0 cellpadding=1><tr><td><script language="Javascript">var helpindexrequired=0;</script><br><script language="Javascript">documentwrite('<table align=left border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center"  onClick="togglehelp()">Back</td></tr></table>')</script>
<br><p><script language="Javascript">
if (helpindexrequired==1)
{
documentwrite('<a href="#intro">Introduction</a><br><a href="#overview">Overview</a><br><a href="#playing">Playing the game</a><br><a href="#newgame">New game</a><br><a href="#terms">Terms of use</a><br><br>')}
</script>


<a name="intro"></a>Turncoat is a game for two players. Although it is played on
      Reversi boards, uses Reversi pieces that are black on one side and white
      on the other, and involves the capturing and turning of these pieces, the
      way it is played is quite different from Reversi. 
<p>In Turncoat, no pieces are
      introduced onto the board during play - all the pieces are already on the
      board. And, instead of using one board, both players have their own board. 
      Each of these boards starts off with
      the same layout, and the objective of both players is the same: to be the
      first player to achieve a state where their board contains no white
      pieces. And, whatever
      one player does the other player must do next.
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="overview"></a><b>Overview</b></p>
      <p>In Turncoat, both players have their own 8x8 board, each set up in the
      same way, with most squares containing pieces showing white, but with just
      a few containing pieces showing black (from 2 to 6 squares showing black)
      and possibly some squares left blank, with no pieces on them (there may be
      0-3 blanks).</p>
      <p >Play consists of a series of rounds, each of which has
      two moves (unless a player wins after the first move).</p>
      <p >At the beginning of a round, each player selects one of
      the squares containing a piece, hidden from the other player. These selections are revealed and each player makes two moves
      based on these selections; the first move by each player is based on his
      or her own selection, the second on that of the opponent.</p>
      <p >So, first of all, the piece on the square that
      the player has selected is turned on that player's board, so that it shows
      the opposite colour. Once this has been turned, any pieces trapped directly
      between this piece and the first piece of the same (new) colour along any
      horizontal, vertical or diagonal straight line, with no empty squares
      included, are also turned so that they show the new colour.
      Three points should be emphasized:</p>
            <ul>
      <li> trapping cannot pass through an empty square;        
      <li> a move is valid even when no pieces are trapped;
      <li> trapped pieces must be turned.
      </ul>
             
      <p>Once these moves, based on the players' own choices, have been made, the
      second moves take place based on the opponents' selections. The
      piece on the square selected by the opponent is turned, and any trapped
      pieces are then also turned (as in the first move). Note that this
      could mean that a piece turned over in the first move is turned back again
      in the second move of the turn.</p>
             
      <p>The winner is the first player to achieve a situation where all the
      pieces on their board show black - after the first or second move of a
      turn. If both players achieve this at the same time, then the game
      is drawn.
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="playing"></a><b>Playing the game</b></p>
             
      <p>There are two coloured tabs at the top to the right of the <i>New</i> button: 
a red tab and a yellow tab.  Pressing on one of these displays the associated board (the red board has red labels, and the yellow board has yellow labels). The two players must first agree who is to play with which colour.
<p>Next, the <i>More</i> button should be pressed, and the players should agree whether to allow white and black only to be selected, or to allow both white pieces only to be selected (this can provide an interesting variation). By default, selection of both white and black pieces is allowed.
<p>The game is started by pressing the <i>New</i> button. Both boards are then set up identically, with a
      random selection both of the number of black pieces and blank squares (within the constraints mentioned above), and
      their locations.  The number of black pieces on a board is shown on the relevant coloured tab.</p>
      <p>Both players then take turns to make their board visible and to select one of the pieces to be turned by pressing on a valid square. When one player makes a selection the
      other should look away. Once a player has made a selection an X is shown on the coloured tab instead of the number of black pieces.  
<p>It does not matter who makes their selection first.  Players may change their minds about their selection and choose another if they so wish.  Note that the label (e.g. C3) of the square selected is shown briefly under the board. 
<p>Once
      both players have completed their selections (and both tabs have an X displayed in 
them), the <i>Turn</i> button should be pressed.  
<p>The red board is then displayed, the piece that red has selected is 
highlighted then turned, and any trapped pieces are also then turned.  The yellow board is then displayed and the same happens for yellow's selection.
<p>Next, the red board is again displayed, and this time the piece on the square with the same label as the piece selected by yellow is highlighted, turned and any trapped pieces are also turned.  The yellow board is then displayed and turns are made based on red's selection.
<p>At the end of the turn, the numbers of black pieces on the boards are then displayed on the tabs, and play continues with the next turn.

      <p>If a situation is reached where one or both boards are displaying only
      black pieces (plus blanks), either at the end of the first set of moves based on the players' own selections or at the end of the turn, the game ends.
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<p><a name="newgame"></a><b>New game</b></p>
             
      <p>A new game may be started at any time by pressing on the <i>New</i> button.  The same setting (white only or white and black selection allowed) will be used as for the previous game, unless the settings are changed via the <i>More</i> button before pressing on <i>New</i>.  Although this setting may be changed at any time, even mid-game, it will not take effect until a new game is started.  To return to the playing boards from the selection options, just press on the <i>Back</i> button.</p>
      <p><i>Turncoat is an original game devised by Dr. David Wolstenholme</i>

<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<a name="terms"></a>
<p style="font-weight: bold;"><a name="terms">Terms of use</a></p>
<p>This software may be used for personal purposes only.&nbsp;  It may not be used for commercial purposes.</p>
<p>The software, code and script of this application may not be copied or be distributed to others.</p>
<p>The software, code and script may not be altered in any way.</p>
<p >Copyright of the software, code and script, and its
help
documentation, is held by TopAccolades Limited.&nbsp; No part of
the software,
code, script or documentation may be copied or used in another application or
document.</p>
<p >Although
every effort has been made to ensure that this software functions
as intended, TopAccolades Limited provides no warranty of
merchantability, or
fitness for a particular purpose, in relation to this application or
its
support.</p>
<p >TopAccolades
Limited shall not be liable for any damages whatsoever arising
out of the use of or inability to use this application or the
provision of
or failure
to provide support.</p>
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>

Version: 2.07 (20160219) <br>Scale: <script language="Javascript">documentwrite(scalef)</script><br><br>&nbsp;</td></tr></table></div>
<script language="Javascript">documentwrite('<div id="theimages" style="width:100%;height:'+Math.floor(scalef*12)+'px;overflow:hidden;background-color:black"  onClick="changepage(\'ourproducts\')"><center>');
var adsrequired=0

var baseonelinermessages=[
'Press ? for Help', '', 
'Use device Back for menu/exit', '', 
'TopAccolades Limited',
'Specializing in Original & Classic...',
'Game & Puzzle Apps',
'']

var admessages=[
'<span style="color:violet">For Birthdays & Anniversaries...</span>',
'<span style="color:violet">For Valentine\'s Day...</span>',
'<span style="color:violet">For Mother\'s & Father\'s Days...</span>',
'<span style="color:violet">Try with-my-love.com</span>',
'<span style="color:violet">Make the day really special!</span>',
'<span style="color:violet">We have web sites such as...</span>',
'<span style="color:violet">best-wife.com, sexiest-lover.com</span>',
'<span style="color:violet">supremely.sexy, just-so.sexy</span>',
'<span style="color:violet">best-husband.com, best-lover.com</span>',
'<span style="color:violet">best-mother.com, best-father.com</span>',
'<span style="color:violet">best-dad.com, best-daughter.com</span>',
'<span style="color:violet">... and many more.</span>',
'<span style="color:violet">Supply a loved one\'s name...</span>',
'<span style="color:violet">...to have a page such as...</span>',
'<span style="color:violet">jane-smith.best-wife.com</span>',
'<span style="color:violet">harry-styles.just-so.sexy</span>',
'<span style="color:violet">laura-brown.best-mother.com</span>',
'<span style="color:violet">Go to with-my-love.com...</span>',
'<span style="color:violet">...and make their day.</span>',
'',
'<span style="color:red">Sherlock is at the Bates Hotel</span>',
'<span style="color:red">Vic has been murdered</span>',
'<span style="color:red">Who killed Vic?</span>',
'<span style="color:red">With what?  And where?</span>',
'<span style="color:red">Ask Sherlock for clues...</span>',
'<span style="color:red">Then try to solve them</span>',
'<span style="color:red">Buy our great logic puzzle...</span>',
'<span style="color:red">CSI Sherlock</span>',
'',
'<span style="color:magenta">Play Rummy aginst the system...</span>',
'<span style="color:magenta">...or against a friend</span>',
'<span style="color:magenta">Full animation of deals and moves</span>',
'<span style="color:magenta">Game state remembered on exit</span>',
'<span style="color:magenta">Try our Rummy 7 app</span>',
'',
'<span style="color:cyan">Try our Kublitz Cube app</span>',
'<span style="color:cyan">Turn the layers to get...</span>',
'<span style="color:cyan">...the same colour on each side</span>',
'<span style="color:cyan">Guidance on solving the Cube</span>',
'<span style="color:cyan">Notation and mnemonics</span>',
'<span style="color:cyan">Kublitz Cube - it\'s free</span>',
'',
'<span style="color:magenta">Try our Peg Solitaire app</span>',
'<span style="color:magenta">Play with the full 32 pegs...</span>',
'<span style="color:magenta">...or start with fewer pegs </span>',
'<span style="color:magenta">Notation and mnemonics...</span>',
'<span style="color:magenta">...to remember the solution</span>',
'<span style="color:magenta">Peg Solitaire - it\'s free</span>',
'',
'<span style="color:lime">Try our Xword4x4 app</span>',
'<span style="color:lime">Crossword game for 2-4 players</span>',
'<span style="color:lime">Pass and Play mode</span>',
'<span style="color:lime">No internet connection required</span>',
'<span style="color:lime">You can even design the layout</span>',
'<span style="color:lime">Or change letter numbers/values</span>',
'<span style="color:lime">Try our <span style="color:white">Xword4x4</span> app</span>',
'',
'<span style="color:lime">If you like games such as...</span>',
'<span style="color:lime">Rummy, 4-in-a-line...</span>',
'<span style="color:lime">Hangman, Mancala...</span>',
'<span style="color:lime">Letters Game, Numbers Game...</span>',
'<span style="color:lime">& more classic & original games</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Games</span> app now</span>',
'',
'<span style="color:cyan">If you like puzzles such as...</span>',
'<span style="color:cyan">Sudoku, Hangman...</span>',
'<span style="color:cyan">Peg Solitaire, Step Challenge...</span>',
'<span style="color:cyan">WordSearch & other word puzzles...</span>',
'<span style="color:cyan">Numberskull & other number puzzles...</span>',
'<span style="color:cyan">Memory Pairs...</span>',
'<span style="color:cyan">& more classic & original puzzles</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Puzzles</span> app now</span>',
'',
'<span style="color:lime">Beat the Letters Game countdown;</span>',
'<span style="color:lime">Avoid the Hangman\'s noose;</span>',
'<span style="color:lime">Look for words in WordSearch+...</span>',
'<span style="color:lime">And other mind-boggling grids;</span>',
'<span style="color:lime">Try our original Pentad game;</span>',
'<span style="color:lime">Find connections in Linkword Snap;</span>',
'<span style="color:lime">Or solve the Word Ladder.</span>',
'<span style="color:lime">For word-based games and puzzles...</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Words</span> app now</span>',
'',
'<span style="color:magenta">Beat the Numbers Game countdown;</span>',
'<span style="color:magenta">Take 30 secs for our Step Challenge;</span>',
'<span style="color:magenta">Or Pyramid Numbers;</span>',
'<span style="color:magenta">Or try our original Numberskull.</span>',
'<span style="color:magenta">For number-based games & puzzles...</span>',
'<span style="color:magenta">Buy our <span style="color:white">Compact Numbers</span> app now</span>',
'',
'<span style="color:cyan">Solve Sudoku puzzles, with help;</span>',
'<span style="color:cyan">Be a mastermind and break the codes,</span>',
'<span style="color:cyan">Solve equations and use logic...</span>',
'<span style="color:cyan">In our original Numberskull puzzle;</span>',
'<span style="color:cyan">Find the killer based on clues...</span>',
'<span style="color:cyan">In Mystery Clues.</span>',
'<span style="color:cyan">For logic-based puzzles...</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Logic</span> app now</span>',
'',
'<span style="color:cyan">Exercise your brain;</span>',
'<span style="color:cyan">10 sets of exercises;</span>',
'<span style="color:cyan">5 exercises in each set...</span>',
'<span style="color:cyan">Word power...</span>',
'<span style="color:cyan">Verbal comprehension...</span>',
'<span style="color:cyan">Mental arithmetic...</span>',
'<span style="color:cyan">Memory...</span>',
'<span style="color:cyan">Pattern-matching...</span>',
'<span style="color:cyan">Great brain-training exercises...</span>',
'<span style="color:cyan">Buy our <span style="color:white">BrainBoxFun</span> app now</span>',
''

]

if (adsrequired==1) {baseonelinermessages=baseonelinermessages.concat(admessages)}

var onelinermessages=baseonelinermessages
documentwrite('<div id="oneliner" style="font-size='+Math.floor(scalef*9)+'px;text-align:center;font-weight:bold;color:white;background-color:black; width:100%">'+onelinermessages[0]+'</div><br><br>&nbsp;')
var clickproblemtimer=null
function handleclickproblem()
{
if (clickproblemtimer != null) {clearTimeout(clickproblemtimer)}
clickproblemtimer=setTimeout("modifyoneliner()",50);

}

function modifyoneliner()
{
changetextvalue('oneliner', document.getElementById('oneliner').innerHTML)
// document.getElementById('oneliner').innerHTML = document.getElementById('oneliner').innerHTML 
}

currentoneliner=0
function changeoneliner()
{
currentoneliner++
if (currentoneliner==onelinermessages.length) {currentoneliner=0}
changetextvalue('oneliner', onelinermessages[currentoneliner])
// document.getElementById('oneliner').innerHTML = onelinermessages[currentoneliner]
if (onelinertimer != null) {clearTimeout(onelinertimer)}
onelinertimer=setTimeout("changeoneliner()",5000);

}
var onelinertimer=null
onelinertimer=setTimeout("changeoneliner()",5000);


</script>

</center></div></td></tr></table></div></body></html>