<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>Volcano</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">


function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function documentwrite(someitem)
{
document.write(someitem)
}

function changepage(somepage)
{
location.href='../'+somepage+'/default.htm'
}



var combinationattributes=[0,30]

var cfpackage='compactfun'


var thiscfpage='volcano'

var interruptsrequired=0

var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight

var overallwidthscale=screenwidth/190
var overallheightscale=screenheight/270
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}

var heightspacer=(Math.floor(screenheight-Math.floor(scalef*270))/2)-2
if (heightspacer<0) {heightspacer=0}

documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')



</script>

</head>
<body onLoad="showstartad()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:black; width:100%; height:100%"><script language="Javascript">


function showpicturesfordownloading()
{

if (document.getElementById('theimages').style.display == 'none')
{document.getElementById('theimages').style.display = 'inline'}
else
{document.getElementById('theimages').style.display = 'none'}



}


var runcheckvalue='ok'
function runcheck()
{
return true
}

var helpdisplayed=0
function togglehelp()
{
if (document.getElementById('addivtotal').style.display=='none' && document.getElementById('therestart').style.display=='none')
{
helpdisplayed=1-helpdisplayed
if (helpdisplayed==1) {document.getElementById('help').style.display = 'inline'; document.getElementById('thegame').style.display = 'none'}
if (helpdisplayed==0) {document.getElementById('help').style.display = 'none'; document.getElementById('thegame').style.display = 'inline'}
handleclickproblem()
}
}
</script><div style="width:100%; height:100%">
<script language="Javascript">documentwrite('<table border=0 width=100% cellspacing=0 cellpadding=0 style="text-align: left" align=center><tr><td valign=bottom style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white; vertical-align: bottom; background-image:url(buttonbg.jpg)"><a name="Top"></a><table border=0 cellpadding=2 width=100% height='+Math.floor(scalef*14)+' cellspacing=0 valign=middle ><tr><td style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white">Volcano</td><td valign=middle align=center width='+Math.floor(scalef*20)+'></td><td style="width:'+Math.floor(scalef*30)+'px;font-size:'+Math.floor(scalef*12)+'px;text-align:center;font-weight:bold;color:black"  onClick="togglehelp()">?</td></tr></table>')</script></td></tr><tr><td style="text-align: left; font-weight: normal; color: black; vertical-align: top;background-color:#222222"><div id="therestart" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table cellspacing=0 cellpadding=0 border=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<script language="Javascript">
var restartconfirmationrequired=0
var adfrequency=1

window.onbeforeunload=checkforunload;

function checkforunload()
{
if (restartconfirmationrequired==1) 
{
return "Confirmation of leaving page"
}

}

function displayrestartconfirmation()
{
document.getElementById('thegame').style.display = 'none'; 
document.getElementById('therestart').style.display = 'inline'; 
handleclickproblem()
}

function cancelrestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
}

function continuerestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
showad2() 
}

</script>

<center><br><br>
<script language="Javascript">documentwrite('<table border=1 width='+Math.floor(scalef*150)+' style="background-color:silver;vertical-align:middle" valign=middle><tr><td align=center><br><br><img width='+Math.floor(scalef*36)+' src="cflogo.png"><br><br>Please confirm that you wish to restart.<br><br><br><table border=0 align=center><tr><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(redgradient.jpg);text-align:center" onClick="cancelrestartconfirmation()">Cancel</td></tr></table></td><td width='+Math.floor(scalef*20)+'></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(greengradient.jpg);text-align:center" onClick="continuerestartconfirmation()">Confirm</td></tr></table></td></tr></table><br><br></td></tr></table></center>')</script>



</div></div></td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="thegame" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=top style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
// All code copyright of TopAccolades Limited
// Original game by Dave Wolstenholme


function runonload()
{
newgame1()
}

var playedone=0

function showad1()
{
if (playedone==0)
{
playedone=1
newgame()

}
else
{
showad()
}
}

function continueafterad()
{

newgame()
}




function addelementatend(someelement, somearray)
{
return somearray.concat([someelement])
}

function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=[]
var packsize=somearray.length
var ran
var i
for (i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}



function tailarray(somearray)
{
return somearray.slice(1, somearray.length)
}

function headarray(somearray)
{
return somearray[0]
}



function empty(array) 
// checks whether an array is empty:  returns true if so, false if not.
{
if (array.length == 0)
     return true  
else
     return false

}

function member(element, array) 
// checks whether element is a member of array:  returns true if so, false if not.
{
var check = false
var i = 0
while (i<array.length && !check){check = array[i]==element; i++};
return check

}


var linkedpieces=[]
var checkedvertically=[]
var checkedhorizontally=[]


var timer


function findconnectedpieces(somepiece, somecolour)
{
linkedpieces=[somepiece]
checkedvertically=[]
checkedhorizontally=[]
findlinkedpieces([somepiece], somecolour)
return linkedpieces
}

function findlinkedpieces(somearray, selectedcolour)
{

for (var i=0; i<somearray.length; i++)
{
somepiece=somearray[i]
if (ismember(somepiece, checkedvertically)==false)
{
collectvertically(somepiece, selectedcolour, 1)
collectvertically(somepiece, selectedcolour, -1)
checkedvertically=checkedvertically.concat([somepiece])

}
if (ismember(somepiece, checkedhorizontally)==false)
{
collecthorizontally(somepiece, selectedcolour, 1)
collecthorizontally(somepiece, selectedcolour, -1)
checkedhorizontally=checkedhorizontally.concat([somepiece])
}
}
if (linkedpieces.length > somearray.length) // i.e. more pieces found
{
findlinkedpieces(linkedpieces, selectedcolour)
}
}

function collectvertically(somepiece, selectedcolour, direction)
{

var coli=somepiece[0]
var rowi=somepiece[1]
rowi=rowi+direction

if (rowi > -1 && rowi < height)
{
if (temppiecearray[coli][rowi]==selectedcolour)
{
if (ismember([coli, rowi], linkedpieces) == false)
	{linkedpieces=linkedpieces.concat([[coli, rowi]])} // add to collection if not already there
collectvertically([coli, rowi], selectedcolour, direction) // carry on looking
}
}
}

function collecthorizontally(somepiece, selectedcolour, direction)
{

var coli=somepiece[0]
var rowi=somepiece[1]
coli=coli+direction

if (coli > -1 && coli < width)
{
if (temppiecearray[coli][rowi]==selectedcolour)
{
if (ismember([coli, rowi], linkedpieces) == false)
	{linkedpieces=linkedpieces.concat([[coli, rowi]])} // add to collection if not already there
collecthorizontally([coli, rowi], selectedcolour, direction) // carry on looking
}
}
}


function ismember(element, somearray) // for lists of pairs
{
var check = false
var i = 0
while (i<somearray.length && !check){check = (somearray[i][0]==element[0] && somearray[i][1]==element[1]); i++};
return check

}


var startarray=[]


function copyvalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=[]
for (var j=0; j<somearray[i].length; j++)
{
temparray[i][j]=somearray[i][j]
}
}
return temparray
}

var secondtimer



var piecearray = []
var temppiecearray=[]
var height=25
var width=15
var blocksize=Math.floor(scalef*7)
var plugwidth=7
var grounddepth=7
var leftgunpositions=[2, 14]
var rightgunpositions=[8]
var score=50
var playstate="wait"
function newgame()
{
if (runcheck()==true)
{
restartconfirmationrequired=1

playstate="play"
newgame1()
}
}

function newgame1()
{
piecearray = []
temppiecearray=[]
crater=shufflearray([2, 4, 3, 1, 3, 2, 1])
plug=[[(width-1)/2, (height-1)/2], [[0, []]]]
piecestoredisplay=[]
setupvolcanoboard()
lastmoverequest=['nothing']
blockarray=[]
noteshoot=false
thismoveactual=['nothing']
vaporizedthistime=[]
vaporizedlasttime=[]
bulletsmoving=[[], [], []]
bulletsgone=[[], [], []]
score=50


piecearray=copyvalues(temppiecearray)


redisplayboard()

if (timer != null) {clearTimeout(timer)}

timer= setTimeout('movecycle(0)', 1000)
}


function setupboard()
{

var piecename
documentwrite('<table border=1 align=center cellspacing=0 cellpadding=0 style="background-color:black"><tr><td><table border=0 cellspacing=0 cellpadding=0 bgcolor="white" align="center">');

for (var i=0; i<height; i++)
{
documentwrite('<tr>')
for (var j=0; j<width; j++)
{
piecename='piece'+j+'_'+i
documentwrite('<td height="'+blocksize+'" width="'+blocksize+'" ><img style="display:block" src="blank.gif" name="'+piecename+'" width='+blocksize+' height='+blocksize+'></td>')
}
documentwrite('</tr>')
}


documentwrite('</table></td></tr></table>')

}

function setupvolcanoboard()
{
// first set up all cells to be blank and edges and top grey
var initcolour

for (var i=0; i<width; i++)
{
temppiecearray[i]=[]
for (var j=0; j<height; j++)
{
if (j==0) {initcolour="grey"} else
{
if (i==0) {initcolour="grey"} else
{
if (i==(width-1)) {initcolour="grey"}
else
{initcolour="blank"}
}
}
temppiecearray[i][j]=initcolour
}
}

var sidewidth=(width-plugwidth-2)/2
for (var i=1; i<1+sidewidth; i++)
{
for (var j=height-grounddepth+sidewidth-i; j<height; j++)
{
temppiecearray[i][j]="green"
}
}

for (var i=width-(1+sidewidth); i<width-1; i++)
{
for (var j=height-grounddepth+i-(width-(1+sidewidth)); j<height; j++)
{
temppiecearray[i][j]="green"
}
}

for (var i=sidewidth+1; i<width-(sidewidth+1); i++)
{
temppiecearray[i][height-1]="red"

}

for (var i=0; i<leftgunpositions.length; i++)
{
temppiecearray[0][leftgunpositions[i]]="magenta"
}

for (var i=0; i<rightgunpositions.length; i++)
{
temppiecearray[width-1][rightgunpositions[i]]="magenta"
}


for (var i=0; i<plugwidth; i++)
{
for (var j=0; j<grounddepth-1-crater[i]; j++)
{
temppiecearray[1+sidewidth+i][height-2-j]="purple"
}
}


enterplugintoarray()

}

var crater=shufflearray([2, 4, 3, 1, 3, 2, 1])

var plug=[[(width-1)/2, (height-1)/2], [[0, []]]]
function enterplugintoarray()
{
var corecol=plug[0][0]
var corerow=plug[0][1]
var agglomarray=plug[1]
var chunkcol
var chunkrow
var blockcol
temppiecearray[corecol][corerow]="white"
for (var i=0; i<agglomarray.length; i++)
{
chunkcol=corecol+agglomarray[i][0]
blockcol=agglomarray[i][1]
for (var j=0; j<blockcol.length; j++)
{
chunkrow=corerow+blockcol[j]
temppiecearray[chunkcol][chunkrow]="brown"

}


}

}


function validtranslate(somehoriz, somevert)
{
var somevalid=true
var corecol=plug[0][0]
var corerow=plug[0][1]
var agglomarray=[[0, [0]]].concat(plug[1])  // all blocks in plug including core
var chunkcol
var chunkrow
var blockcol

for (var i=0; i<agglomarray.length; i++)
{
chunkcol=corecol+agglomarray[i][0]
blockcol=agglomarray[i][1]
for (var j=0; j<blockcol.length; j++)
{
chunkrow=corerow+blockcol[j]
if (member(piecearray[chunkcol+somehoriz][chunkrow+somevert], ["brown", "blank", "white", "yellow", "copper"])==false)
	{somevalid=false; break}

if (piecearray[chunkcol+somehoriz][chunkrow+somevert]== "copper")
	{
	if (atleastonenotsolid(somehoriz, somevert, chunkcol, chunkrow)==false) {somevalid=false; break}
	}

}
}

return somevalid

}


function atleastonenotsolid(somehoriz, somevert, chunkcol, chunkrow)
{

if (somehoriz==1) // movement to right
{
return atleastoneblankorbullethoriz(chunkcol, chunkrow, 1, width-1)
}
if (somehoriz==-1) // movement to left
{
return atleastoneblankorbullethoriz(chunkcol, chunkrow, -1, 0)
}
if (somevert==1) // movement down
{
return atleastoneblankorbulletvert(chunkcol, chunkrow, 1, height-1)
}
if (somevert==-1) // movement up
{
return atleastoneblankorbulletvert(chunkcol, chunkrow, -1, 0)
}
}



function atleastoneblankorbullethoriz(chunkcol, chunkrow, somehoriz, someextreme)
{
var somevalid=false
{
for (var i=chunkcol+somehoriz; i!=someextreme; i=i+somehoriz)
{
if (member(piecearray[i][chunkrow], ["blank", "yellow"])==true)
{
somevalid=true; break
}
}
}
return somevalid
}

function atleastoneblankorbulletvert(chunkcol, chunkrow, somevert, someextreme)
{
var somevalid=false
{
for (var i=chunkrow+somevert; i!=someextreme; i=i+somevert)
{
if (member(piecearray[chunkcol][i], ["blank", "yellow"])==true)
{
somevalid=true; break
}
}
}
return somevalid
}





function validrotate(somedir)
{

var somevalid=true
var minx=0
var maxx=0
var miny=0
var maxy=0
var somearray=plug[1]
var corecol=plug[0][0]
var corerow=plug[0][1]
var chunkcol
var chunkrow

minx=somearray[0][0]
maxx=somearray[somearray.length-1][0]

for (var i=0; i<somearray.length; i++)
{
if (somearray[i].length>0)
{
if (somearray[i][1][0]<miny) {miny=somearray[i][1][0]}
if (somearray[i][1][somearray[i][1].length-1]>maxy) {maxy=somearray[i][1][somearray[i][1].length-1]}
}
}
// make all mins and maxes non-negative
miny=miny*-1
minx=minx*-1

// first check that all cells in rectangle around current position are brown, white or blank
for (var i=minx*-1; i<=maxx; i++)
{
chunkcol=corecol+i
for (var j=miny*-1; j<=maxy; j++)
{
chunkrow=corerow+j
if (member(piecearray[chunkcol][chunkrow], ["blank", "brown", "white"])==false)
	{somevalid=false; break}

}

}



if (somedir==1)
{
// first check full rectangle surrounding new position
if (rotationinframe(1, corecol, corerow, minx, maxx, miny, maxy)==false) {somevalid=false} else {
for (var i=maxy*-1; i<=miny; i++)
{
chunkcol=corecol+i
for (var j=minx*-1; j<=maxx; j++)
{
chunkrow=corerow+j
if (member(piecearray[chunkcol][chunkrow], ["blank", "brown", "white"])==false)
	{somevalid=false; break}

}

}

// then check for pass-through rectangles in corner (in practice max 2 each rotation)

if (minx>miny && minx>maxy) 
{
if (okforrotate(corecol, corerow, minx*-1, minx*-1, minx-maxy, minx-miny)==false)
{somevalid=false}
}
if (maxx>miny && maxx>maxy) 
{
if (okforrotate(corecol, corerow, miny+1, maxy+1, maxx-miny, maxx-maxy)==false)
{somevalid=false}
}
if (miny>minx && miny>maxx) 
{
if (okforrotate(corecol, corerow, maxx+1, miny*-1, miny-maxx, miny-minx)==false)
{somevalid=false}
}
if (maxy>minx && maxy>maxx) 
{
if (okforrotate(corecol, corerow, maxy*-1, maxx+1, maxy-minx, maxy-maxx)==false)
{somevalid=false}
}
}} // end if for somedir==1
else // somedir=-1
{
// first check full rectangle surrounding new position
if (rotationinframe(-1, corecol, corerow, minx, maxx, miny, maxy)==false) {somevalid=false} else {

for (var i=miny*-1; i<=maxy; i++)
{
chunkcol=corecol+i
for (var j=maxx*-1; j<=minx; j++)
{
chunkrow=corerow+j
if (member(piecearray[chunkcol][chunkrow], ["blank", "brown", "white"])==false)
	{somevalid=false; break}

}

}

// then check for pass-through rectangles in corner (in practice max 2 each rotation)


if (minx>miny && minx>maxy) 
{
if (okforrotate(corecol, corerow, minx*-1, maxy+1, minx-miny, minx-maxy)==false)
{somevalid=false}
}
if (maxx>miny && maxx>maxy) 
{
if (okforrotate(corecol, corerow, maxy+1, maxx*-1, maxx-maxy, maxx-miny)==false)
{somevalid=false}
}
if (miny>minx && miny>maxx) 
{
if (okforrotate(corecol, corerow, miny*-1, miny*-1, miny-minx, miny-maxx)==false)
{somevalid=false}
}
if (maxy>minx && maxy>maxx) 
{
if (okforrotate(corecol, corerow, maxx+1, minx+1, maxy-maxx, maxy-minx)==false)
{somevalid=false}
}
}} // end if for somedir==-1
return somevalid
}

function rotationinframe(somedir, corecol, corerow, minx, maxx, miny, maxy)
{
if (somedir==1)
{
if (corecol+miny<width && corecol-maxy>0 && corerow-minx>0 && corerow+maxx<height)
{return true} else {return false}
}

if (somedir==-1)
{
if (corecol+maxy<width && corecol-miny>0 && corerow-maxx>0 && corerow+minx<height)
{return true} else {return false}
}
}

var piecestoredisplay=[]

function okforrotate(corecol, corerow, startx, starty, somewidth, someheight)
{
var chunkcol
var chunkrow
var somevalid=true
for (i=startx; i<startx+somewidth; i++)
{
chunkcol=corecol+i
for (j=starty; j<starty+someheight; j++)
{
chunkrow=corerow+j

if (piecearray[chunkcol][chunkrow]!="blank")
	{somevalid=false; break}



}
}

return somevalid
}



function removeplugfromarray()
{
var corecol=plug[0][0]
var corerow=plug[0][1]
var agglomarray=plug[1]
var chunkcol
var chunkrow
var blockcol
temppiecearray[corecol][corerow]="blank"
for (var i=0; i<agglomarray.length; i++)
{
chunkcol=corecol+agglomarray[i][0]
blockcol=agglomarray[i][1]
for (var j=0; j<blockcol.length; j++)
{
chunkrow=corerow+blockcol[j]
temppiecearray[chunkcol][chunkrow]="blank"

}


}

}



function moveplug(somehoriz, somevert)
{
if (validtranslate(somehoriz, somevert)==true)
{
removeplugfromarray()

plug[0][0]=plug[0][0]+somehoriz
plug[0][1]=plug[0][1]+somevert

enterplugintoarray()
return true
}
else 
{return false}

}


function rotateplug(somedir)
{
if (validrotate(somedir)==true)
{
removeplugfromarray()

plug[1]=rotatecolumns(plug[1], somedir)

enterplugintoarray()

return true
}
else 
{return false}
}



function rotatecolumns(somearray, somedir)
{
var miny=0
var maxy=0
for (var i=0; i<somearray.length; i++)
{
if (somearray[i].length>0)
{
if (somearray[i][1][0]<miny) {miny=somearray[i][1][0]}
if (somearray[i][1][somearray[i][1].length-1]>maxy) {maxy=somearray[i][1][somearray[i][1].length-1]}
}
}
var rotatedarray=[]
if (somedir==1)
{
for (var i=maxy*-1; i<=miny*-1; i++)
{
rotatedarray[i+maxy]=[i, []]
}

for (var i=0; i<somearray.length; i++)
{
for (var j=0; j<somearray[i][1].length; j++)
{

rotatedarray[(somearray[i][1][j]*-1)+maxy][1]=insertvalintoarray(somearray[i][0], rotatedarray[(somearray[i][1][j]*-1)+maxy][1])
}
}
}

else // somedir=-1
{
for (var i=miny; i<=maxy; i++)
{
rotatedarray[i-miny]=[i, []]
}

for (var i=0; i<somearray.length; i++)
{
for (var j=0; j<somearray[i][1].length; j++)
{

rotatedarray[(somearray[i][1][j])-miny][1]=insertvalintoarray(-1*somearray[i][0], rotatedarray[(somearray[i][1][j])-miny][1])
}
}
}

return rotatedarray
}

function pairprintout(somearray)
{
var sometext=""
for (var i=0; i<somearray.length; i++)
{
sometext=sometext+'['+somearray[i][0]+', ['+somearray[i][1]+']],'
}
return sometext
}


function insertvalintoarray(someval, somearray)
{
if (somearray.length>0)
{
if (someval < somearray[0])
	{
	return [someval].concat(somearray)
	}
	else
	{
	return [somearray[0]].concat(insertvalintoarray(someval, tailarray(somearray)))
	}
}
else
{
return [someval]
}

}

function redisplayboard()
{


var piecename
var bordersize
var piececolour

for (var i=0; i<width; i++)
    {
for (var j=0; j<height; j++)
{
piecename='piece'+i+'_'+j
document.images[piecename].src=piecearray[i][j]+'.gif'
// document.all[piecename].bgColor=colourcode(piecearray[i][j])
// piececolour=piecearray[i][j]
// if (member(piececolour, ["blank", "red", "grey"])==true) {bordersize=0} else {bordersize=1}
// document.all[piecename].border=bordersize

}
	
    }

}

function updateboard()
{

var piecename
var bordersize
var piececolour

for (var i=0; i<width; i++)
{
for (var j=0; j<height; j++)
{
if (piecearray[i][j] != temppiecearray[i][j])
{
piecename='piece'+i+'_'+j
document.images[piecename].src=temppiecearray[i][j]+'.gif'
// document.all[piecename].bgColor=colourcode(temppiecearray[i][j])
// piececolour=temppiecearray[i][j]
// if (member(piececolour, ["blank", "red", "grey"])==true) {bordersize=0} else {bordersize=1}
// document.all[piecename].border=bordersize
piecearray[i][j] = temppiecearray[i][j]
}
}

}
var i
var j
// now, restore vaporized images to new state.  Show current colour.
for (var n=0; n<vaporizedlasttime.length; n++)
{
i=vaporizedlasttime[n][0]
j=vaporizedlasttime[n][1]
piecename='piece'+i+'_'+j
document.images[piecename].src=piecearray[i][j]+'.gif'

// document.all[piecename].bgColor=colourcode(piecearray[i][j])
// piececolour=piecearray[i][j]
// if (member(piececolour, ["blank", "red", "grey"])==true) {bordersize=0} else {bordersize=1}
// document.all[piecename].border=bordersize
}

// lastly, temporarily show vaporized blocks

for (var n=0; n<vaporizedthistime.length; n++)
{
i=vaporizedthistime[n][0]
j=vaporizedthistime[n][1]
piecename='piece'+i+'_'+j
document.images[piecename].src='explosion.gif'
// document.all[piecename].bgColor="#871F78"
// document.all[piecename].border=1
}

}

function createnewblock()
{
var rannum=randomnumber(width-4)+1
if (temppiecearray[rannum][1]=="blank" && temppiecearray[rannum][2]=="blank")
{
blockarray=blockarray.concat([[rannum, 0]])
}
}

var lastmoverequest=['nothing']
var blockarray=[]
var cyclespeed=400
var noteshoot=false
var thismoveactual=['nothing']
var newblockindex=0
var newblockfrequency=10
var vaporizedthistime=[]
var vaporizedlasttime=[]

function movecycle(somenum)
{

if (playstate=="play")
{
displaymessage("Game on")
thismoveactual=[]
for (var i=0; i<lastmoverequest.length; i++)
{
thismoveactual[i]=lastmoverequest[i]
}
temppiecearray=copyvalues(piecearray)
if (thismoveactual[0]=='translate')
{
if (moveplug(thismoveactual[1], thismoveactual[2])==false) {thismoveactual=["nothing"]}
}
if (thismoveactual[0]=='rotate')
{
if (rotateplug(thismoveactual[1])==false) {thismoveactual=["nothing"]}
}



if (thismoveactual[0]=='translate')
{dealwithinitialblockcollisions(thismoveactual[1], thismoveactual[2])}

if (somenum==0) 
{
if (newblockindex==0)
{createnewblock()}
newblockindex++
if (newblockindex==newblockfrequency) {newblockindex=0}
}

if (somenum==0) {moveblocksdown()}

if (noteshoot==true) {shoot()}
movebullets()
ensuregunsrightcolour()
showscore()

updateboard()
vaporizedlasttime=copyvalues(vaporizedthistime)
lastmoverequest=['nothing']
thismoveactual=['nothing']
noteshoot=false
if (checkforwin()==true) {playstate="won"}

if (timer != null) {clearTimeout(timer)}

timer= setTimeout('movecycle('+(1-somenum)+')', cyclespeed)
}
else
{if (playstate=="stop") {showvolcano()} else if (playstate=="won") {displaywin()}}
}


function dealwithinitialblockcollisions(somehoriz, somevert)
{
var tempblockarray=copyvalues(blockarray)
for (var i=0; i<tempblockarray.length; i++)
{
dealwithsingleinitialblockcollisions(tempblockarray[i][0], tempblockarray[i][1], somehoriz, somevert)
}

}

function dealwithsingleinitialblockcollisions(blockcol, blockrow, somehoriz, somevert)
{
if (member(temppiecearray[blockcol][blockrow], ["white", "brown"])==true)
{
removefallingblock(blockcol, blockrow)
stickblocktoplug(blockcol, blockrow, somehoriz, somevert)
}
}

function stickblocktoplug(blockcol, blockrow, somehoriz, somevert)
{
var stuckblockcol=blockcol+somehoriz
var stuckblockrow=blockrow+somevert
var newplugposcol=stuckblockcol-plug[0][0]
var newplugposrow=stuckblockrow-plug[0][1]

stickblockinplugarray(newplugposcol, newplugposrow)

temppiecearray[stuckblockcol][stuckblockrow]="brown"
}

function stickblockinplugarray(newplugposcol, newplugposrow)
{
var temparray=plug[1]
for (var i=0; i<temparray.length; i++)
{
if (temparray[i][0]==newplugposcol)
{
plug[1][i][1]=insertvalintoarray(newplugposrow, plug[1][i][1])
}
}
if (newplugposcol<temparray[0][0])
{
plug[1]=[[newplugposcol, [newplugposrow]]].concat(plug[1])
}
if (newplugposcol>temparray[temparray.length-1][0])
{
plug[1]=plug[1].concat([[newplugposcol, [newplugposrow]]])
}
}

function removefallingblock(blockcol, blockrow)
{
blockarray=removepairfromarray([blockcol, blockrow], blockarray)
}

function removepairfromarray(somepair, somearray)
{
if (somearray.length==0)
{
return []
}
else
	{
if (somearray[0][0]==somepair[0] && somearray[0][1]==somepair[1])
{
return tailarray(somearray)
}

else
{
return [somearray[0]].concat(removepairfromarray(somepair, tailarray(somearray)))
}
	}
}



function moveblocksdown()
{
var tempblockarray=copyvalues(blockarray)
// fallenblocks=[]
for (var i=0; i<tempblockarray.length; i++)
{
dealwithsingleblock(tempblockarray[i][0], tempblockarray[i][1])
}
}

function dealwithsingleblock(blockcol, blockrow)
{
// change the current position of the falling block to blank, unless it's already been changed to something
// else (e.g. by plug movement), in which case it will not be copper in temppiecearray
if (temppiecearray[blockcol][blockrow]=="copper") {temppiecearray[blockcol][blockrow]="blank"}
var i=ith([blockcol, blockrow], blockarray)
// next deal with a block colliding with the plug - and stick it on
if (member(temppiecearray[blockcol][blockrow+1], ["white", "brown"])==true)
{
removefallingblock(blockcol, blockrow)
stickblocktoplug(blockcol, blockrow, 0, 0)
}
else
{
if (temppiecearray[blockcol][blockrow+1]=="green")
{
removefallingblock(blockcol, blockrow)
decrementscore(1)
}
else
{
if (temppiecearray[blockcol][blockrow+1]=="purple")
{
removefallingblock(blockcol, blockrow)
temppiecearray[blockcol][blockrow+1]="blank"
decrementscore(1)
if ([blockrow+1]==height-2)
{playstate="stop"}

}
else
// simply move it down
{

temppiecearray[blockcol][blockrow+1]="copper"
blockarray[i][1]=blockarray[i][1]+1
}
}
}
}

function ith(somepair, somearray)
{
var someresult
for (var i=0; i<somearray.length; i++)
{
if (somepair[0]==somearray[i][0] && somepair[1]==somearray[i][1])
{
someresult=i; break
}
}
return someresult
}

function removefallenblocks()
{
var numfallen=fallenblocks.length
for (var i=0; i<numfallen; i++)
{
blockarray=removeElement(fallenblocks[i]-i, blockarray)
}

}

// note: middle array a dummy
var bulletsmoving=[[], [], []]
var bulletsgone=[[], [], []]

function movebullets()
{
var arrayi
vaporizedthistime=[]
// first check for any plug pieces or falling blocks moved into last bullet position
for (var dir=-1; dir<=1; dir++)
{
arrayi=dir+1

bulletsgone[arrayi]=[]
for (var i=0; i<bulletsmoving[arrayi].length; i++)
{
if (member(temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]], ["white", "brown"])==true)
{
bulletsgone[arrayi]=addelementatend(i, bulletsgone[arrayi])
removeblockfromplug(bulletsmoving[arrayi][i][0], bulletsmoving[arrayi][i][1])
}
if (temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]=="copper")
{
bulletsgone[arrayi]=addelementatend(i, bulletsgone[arrayi])
removefallingblock(bulletsmoving[arrayi][i][0], bulletsmoving[arrayi][i][1])
vaporizedthistime=vaporizedthistime.concat([[bulletsmoving[arrayi][i][0], bulletsmoving[arrayi][i][1]]])
temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]="blank"
}
}
removebulletsgone(arrayi)
}

// next check for any plug pieces or falling blocks moved into or already in new bullet position
for (var dir=-1; dir<=1; dir++)
{

arrayi=dir+1

bulletsgone[arrayi]=[]
for (var i=0; i<bulletsmoving[arrayi].length; i++)
{
if (member(temppiecearray[bulletsmoving[arrayi][i][0]+dir][bulletsmoving[arrayi][i][1]], ["white", "brown"])==true)
{
bulletsgone[arrayi]=addelementatend(i, bulletsgone[arrayi])
removeblockfromplug(bulletsmoving[arrayi][i][0]+dir, bulletsmoving[arrayi][i][1])

if (temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]=="yellow")
{
temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]="blank"
}
}
if (temppiecearray[bulletsmoving[arrayi][i][0]+dir][bulletsmoving[arrayi][i][1]]=="copper")
{
bulletsgone[arrayi]=addelementatend(i, bulletsgone[arrayi])
removefallingblock(bulletsmoving[arrayi][i][0]+dir, bulletsmoving[arrayi][i][1])
vaporizedthistime=vaporizedthistime.concat([[bulletsmoving[arrayi][i][0]+dir, bulletsmoving[arrayi][i][1]]])
temppiecearray[bulletsmoving[arrayi][i][0]+dir][bulletsmoving[arrayi][i][1]]="blank"
if (temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]=="yellow")
{
temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]="blank"
}
}
}
removebulletsgone(arrayi)
}

// next remove any bullets reaching extremes
for (var dir=-1; dir<=1; dir++)
{

arrayi=dir+1

bulletsgone[arrayi]=[]
for (var i=0; i<bulletsmoving[arrayi].length; i++)
{

if (temppiecearray[bulletsmoving[arrayi][i][0]+dir][bulletsmoving[arrayi][i][1]]!="blank") // can only be extremes after all other removals
{
bulletsgone[arrayi]=addelementatend(i, bulletsgone[arrayi])
temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]="blank"
}
}
removebulletsgone(arrayi)
}

// last just move any remaining bullets
for (var dir=-1; dir<=1; dir++)
{

arrayi=dir+1

for (var i=0; i<bulletsmoving[arrayi].length; i++)
{
if (temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]=="yellow")
{
temppiecearray[bulletsmoving[arrayi][i][0]][bulletsmoving[arrayi][i][1]]="blank"
}
temppiecearray[bulletsmoving[arrayi][i][0]+dir][bulletsmoving[arrayi][i][1]]="yellow"
bulletsmoving[arrayi][i][0]=bulletsmoving[arrayi][i][0]+dir

}
}
}

function removeblockfromplug(somecol, somerow)
{
var corecol=plug[0][0]
var corerow=plug[0][1]
var diffcol=somecol-corecol
var diffrow=somerow-corerow
if (diffcol==0 && diffrow==0) 
{
playstate="stop"
document.images['piece'+somecol+'_'+somerow].src='explosion.gif'

// document.all['piece'+somecol+'_'+somerow].bgColor="#871F78"
}
else
{
removeoneblockfromplug(diffcol, diffrow)
}
removelooseblocksfromplug()
}

function removelooseblocksfromplug()
{
corepiece=plug[0]
var remainingarray=findconnectedpieces(corepiece, "brown")
var existingplug=plug[1]
var chunkrow
var chunkcol
var disconnections=[]
for (var i=0; i<existingplug.length; i++)
{
chunkcol=corepiece[0]+existingplug[i][0]
for (var j=0; j<existingplug[i][1].length; j++)
{
chunkrow=corepiece[1]+existingplug[i][1][j]
if (ismember([chunkcol, chunkrow], remainingarray)==false)
	{disconnections=disconnections.concat([[chunkcol, chunkrow]])}
}
}
for (var i=0; i<disconnections.length; i++)
{
removeoneblockfromplug(disconnections[i][0]-corepiece[0], disconnections[i][1]-corepiece[1])
}
}

function removeoneblockfromplug(diffcol, diffrow)
{
for (var i=0; i<plug[1].length; i++)
{
if (plug[1][i][0]==diffcol)
{
plug[1][i][1]=removethiselement(diffrow, plug[1][i][1])

break
}
}
temppiecearray[plug[0][0]+diffcol][plug[0][1]+diffrow]="blank"
vaporizedthistime=vaporizedthistime.concat([[[plug[0][0]+diffcol], [plug[0][1]+diffrow]]])
}

function removethiselement(someelement, somearray)
{
if (somearray[0]==someelement)
{
return tailarray(somearray)
}
else
{
return [somearray[0]].concat(removethiselement(someelement, tailarray(somearray)))
}

}


function removebulletsgone(arrayi)
{
var numgone=bulletsgone[arrayi].length
for (var i=0; i<numgone; i++)
{
bulletsmoving[arrayi]=removeElement(bulletsgone[arrayi][i]-i, bulletsmoving[arrayi])
}
}




function notefire()
{
noteshoot=true
}

function shoot()
{
for (var i=0; i<leftgunpositions.length; i++)
{
bulletsmoving[2]=addelementatend([0, leftgunpositions[i]], bulletsmoving[2])
}

for (var i=0; i<rightgunpositions.length; i++)
{
bulletsmoving[0]=addelementatend([width-1, rightgunpositions[i]], bulletsmoving[0])
}
}

function ensuregunsrightcolour()
{
for (var i=0; i<leftgunpositions.length; i++)
{
temppiecearray[0][leftgunpositions[i]]="magenta"
}

for (var i=0; i<rightgunpositions.length; i++)
{
temppiecearray[width-1][rightgunpositions[i]]="magenta"
}
}

function noterotate(somedir)
{
lastmoverequest=['rotate', somedir]

}

function notemoveplug(somex, somey)
{
lastmoverequest=['translate', somex, somey]
}




function colourcode(somecolour)
{
var somecode
if (somecolour=="red") {somecode="#FF0000"}
if (somecolour=="white") {somecode="#FFFFFF"}
if (somecolour=="blank") {somecode="#000000"}
if (somecolour=="grey") {somecode="#C0C0C0"}
if (somecolour=="green") {somecode="#00FF00"}
if (somecolour=="yellow") {somecode="#FFFF00"}
if (somecolour=="brown") {somecode="#A62A2A"}
if (somecolour=="copper") {somecode="#236B8E"}
if (somecolour=="purple") {somecode="#871F78"}
if (somecolour=="cyan") {somecode="#00FFFF"}
if (somecolour=="explosion") {somecode="#4F2F4F"}
if (somecolour=="magenta") {somecode="#FF00FF"}


return somecode
}


function displaymessage(sometext)
{
changetextvalue('messagedisplay', sometext)
}

function showscore()
{
changetextvalue('score', score)
}

function decrementscore(someval)
{
score=score-someval
if (score<=0) {playstate="stop"}
}

var cellstowipeout=[]

function showvolcano()
{
cellstowipeout=[]
playstate="stop"
restartconfirmationrequired=0

displaymessage("Eruption: Lost!")
score=0
showscore()
for (var col=0; col<width; col++)
{
for (var row=0; row<height; row++)
{
if (member(piecearray[col][row], ["blank", "white", "brown", "yellow", "copper"])==true)
{
cellstowipeout=cellstowipeout.concat([[col, row]])
}
}
}
cellstowipeout=shufflearray(cellstowipeout)
clearfunnel()
turnemred()
}

function clearfunnel()
{
var i=(width-1)/2
var piecename
var sidewidth=(width-plugwidth-2)/2

for (var wi=sidewidth+1; wi<width-(sidewidth+1); wi++)
{
if (piecearray[wi][height-2]=="blank")
{
i=wi
}
}
for (var j=height-2; j>height-grounddepth; j--)
{
piecename='piece'+i+'_'+j
document.images[piecename].src="red.gif"
// document.all[piecename].bgColor=colourcode("red")
// document.all[piecename].border=0
}

}

function turnemred()
{
var piecename
if (cellstowipeout.length > 10)
{
for (var i=0; i<10; i++)
{
piecename='piece'+cellstowipeout[i][0]+'_'+cellstowipeout[i][1]
document.images[piecename].src="red.gif"
// document.all[piecename].bgColor=colourcode("red")
// document.all[piecename].border=0
}
cellstowipeout=cellstowipeout.slice(10, cellstowipeout.length)
if (timer != null) {clearTimeout(timer)}

timer= setTimeout('turnemred()', cyclespeed)
}
else
{
for (var i=0; i<cellstowipeout.length; i++)
{
piecename='piece'+cellstowipeout[i][0]+'_'+cellstowipeout[i][1]
document.images[piecename].src="red.gif"

// document.all[piecename].bgColor=colourcode("red")
// document.all[piecename].border=0
}
}
}

function checkforwin()
{
var sidewidth=(width-plugwidth-2)/2
var somevalid=true
for (var j=height-grounddepth; j<height-1; j++)
{
for (var i=sidewidth+1; i<width-(sidewidth+1); i++)
{

if (member(piecearray[i][j], ["brown", "white", "purple"])==false)
{
// if (i==width && j==height-grounddepth) {true} else {alert([i, j])}
somevalid=false; break}

}
if (somevalid==false) {break}
}
return somevalid
}

function displaywin()
{
var piecename
displaymessage('Plugged: Won!')
restartconfirmationrequired=0

for (var i=1; i<width-1; i++)
{
for (var j=1; j<height-1; j++)
{
if (member(piecearray[i][j], ["green", "purple", "red", "brown", "white"])==false)
piecename='piece'+i+'_'+j
document.images[piecename].src="sky.gif"
}
}
var sunx=(width-1)/2
var suny=1
var sunarray=[[sunx, suny], [sunx+1, suny], [sunx-1, suny], [sunx, suny+1]]
for (var i=0; i<sunarray.length; i++)
{
piecename='piece'+sunarray[i][0]+'_'+sunarray[i][1]
document.images[piecename].src="sun.gif"
}

}

function speed(somespeed)
{

for (var i=1; i<=4; i++)
{
if (somespeed==i)
{
cyclespeed=(5-i)*100
document.images['speed'+i].src="selected.gif"
// document.all['speed'+i].bgColor="#000000"
}
else
{
document.images['speed'+i].src="unselected.gif"
// document.all['speed'+i].bgColor="#FFFFFF"

}
}
}


var thedivs=['maingame', 'more']
function displaydiv(somediv)
{
for (var i=0; i<thedivs.length; i++)
{
document.getElementById(thedivs[i]).style.display = 'none'


}
document.getElementById(thedivs[somediv]).style.display = 'inline'
handleclickproblem()

}


</SCRIPT>



<script language="JavaScript">
documentwrite('<form name="main"><div id="maingame" style="position:relative;top:0px;left:0px;display:inline;width:100%">')
documentwrite('<div style="display:block;height:'+Math.floor(scalef*2)+'px"></div><table style="background-color:#222222" height='+Math.floor(scalef*235)+' width=100% border=0 cellspacing=0 cellpadding=0><tr><td width='+Math.floor(scalef*30)+' >')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="notemoveplug(0, -1)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="up.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="noterotate(1)" ><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="clockwise.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="notemoveplug(1, 0)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="right.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="notefire()" bgcolor=red><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="fire.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="notemoveplug(-1, 0)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="left.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="noterotate(-1)" ><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="anticlockwise.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="notemoveplug(0, 1)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="down.gif"></td></tr></table>')
documentwrite('<br></td><td><table border=0 align=center cellspacing=0 cellpadding=0><tr><td>')



setupboard()



documentwrite('</td></tr></table></td><td  width='+Math.floor(scalef*30)+'>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="notemoveplug(0, -1)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="up.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="noterotate(-1)" ><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="anticlockwise.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="notemoveplug(-1, 0)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="left.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="notefire()" bgcolor=red><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="fire.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="notemoveplug(1, 0)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="right.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*15)+'  align=center onMouseDown="noterotate(1)" ><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="clockwise.gif"></td></tr></table>')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*10)+'px;display:block"></div><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td align=center onMouseDown="notemoveplug(0, 1)"><img style="display:block" height='+Math.floor(scalef*15)+'  width='+Math.floor(scalef*15)+'  src="down.gif"></td></tr></table><br></td></tr>')
documentwrite('<tr><td colspan=3 valign=bottom><table valign=bottom width=100% border=0 cellspacing=2 cellpadding=0 align=center>')


documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 align=center><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="showad1()" width='+Math.floor(scalef*35)+'>New</td></tr></table></td>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*80)+'px;background-color:lemonchiffon;text-align:center"><div id="messagedisplay" style="text-align: center; color:black">Press New</div></td></tr></table></td>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 style="align:center" align=center><tr><td style="width:'+Math.floor(scalef*25)+'px;background-color:lemonchiffon;text-align:center"><div id="score" style="text-align: center; color:black">&nbsp;</div></td></tr></table></td>')
documentwrite('<td><table border=1 cellpadding=0 cellspacing=0 align=center><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="displaydiv(1)" width='+Math.floor(scalef*35)+'>More</td></tr></table></td>')
documentwrite('</tr></table></td></tr></table></div>')


documentwrite('<div id="more" style="display:none;width:100%">')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*5)+'px;display:block"></div>')

documentwrite('<table width=100% bgcolor=silver cellpadding=1><tr><td align=left><table border=1 cellpadding=0 cellspacing=0><tr><td width='+Math.floor(scalef*45)+' style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center" onClick="displaydiv(0)">Back</td></tr></table></td></tr>')
documentwrite('<tr><td align=left valign=center ><span style="font-weight:bold">Speed:</span></td></tr>')
documentwrite('<tr><td ><table cellspacing=0 cellpadding=0 border=1 style="align:center" align:center ><tr>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(1)">&nbsp;1&nbsp;</td>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(2)">&nbsp;2&nbsp;</td>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(3)">&nbsp;3&nbsp;</td>')
documentwrite('<td width='+Math.floor(scalef*30)+' style="background-image:url(buttonbg.jpg); text-align:center; " onClick="speed(4)">&nbsp;4&nbsp;</td>')
documentwrite('</tr><tr>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed1" src="unselected.gif" onClick="speed(1)"></td>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed2" src="unselected.gif" onClick="speed(2)"></td>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed3" src="unselected.gif" onClick="speed(3)"></td>')
documentwrite('<td style=" text-align:center; "><img width='+Math.floor(scalef*10)+' name="speed4" src="unselected.gif" onClick="speed(4)"></td>')
documentwrite('</tr></table></td></tr></table>')



speed(2)
documentwrite('</div></form>')

</script>


</div></div>
</td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="addivtotal" style="width:100%; display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">
<script language="Javascript">


var startad=1

function showstartad()
{
if (interruptsrequired==1 && thiscfpage!='ourproducts' && thiscfpage!=cfpackage )
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()
}
}


function showad()
{
if (restartconfirmationrequired==1)
{
displayrestartconfirmation()
}
else
{
showad2()
}
}

function showad2()
{
if (interruptsrequired==1  && thiscfpage!='ourproducts' && thiscfpage!=cfpackage)
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
continueafterad()
}

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='unselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='selected.gif'
}
}

var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
if (startad==1)
{
startad=0
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()

}
else
{
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
continueafterad()
}
}
else
{
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",2000);
}
}


documentwrite('<div style="height:'+Math.floor(scalef*3)+'px"></div><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*160)+' height='+Math.floor(scalef*100)+'><tr><td align=center><b>Trial Version</b><br><br>The Compact Fun games and puzzles are available without these countdown interrupts and ads in the full <br><b>Compact Fun</b> <br>app, as well as other apps.</td></tr></table>')


documentwrite('<br><table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0 width='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' height='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' onClick="changepage(\'ourproducts\')"><tr><td><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"></td></tr><tr><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="cflogo.png" border=0></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif"></td></tr><tr><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif"></td></tr></table>')

documentwrite('<br><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*140)+' height='+Math.floor(scalef*50)+'><tr><td align=center>To see details of these and other apps from TopAccolades press the button above.</td></tr></table>')


</script>











</div></div>
</td></tr></table>

<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>

</div><div id="help" style="width:100%;display:none;background-color:white"><table bgcolor=white width=100% border=0 cellpadding=1><tr><td><script language="Javascript">var helpindexrequired=0;</script><br><script language="Javascript">documentwrite('<table align=left border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center"  onClick="togglehelp()">Back</td></tr></table>')</script>
<br><p><script language="Javascript">
if (helpindexrequired==1)
{
documentwrite('<a href="#intro">Introduction</a><br><a href="#objective">Objective</a><br><a href="#controls">Controls and actions</a><br><a href="#newgame">New game</a><br><a href="#terms">Terms of use</a><br>')}
</script>




<p><a name="intro"></a>Volcano is an exciting, frustrating and addictive game, which requires good spatial awareness and quick reactions.&nbsp; 

      <p>The scenario (bearing little relation to reality) is that there is a volcano known to be close to eruption. The dark, smoke-filled, brooding sky emphasizes the imminence of the danger. The volcano has a crater, and seismologists believe that eruption can be prevented by completely filling the crater, i.e. by plugging the volcano. This is a delicate and dangerous operation. You are in control of a flying craft (the white block) designed to catch blocks (light blue) being dropped from above, so that you gradually build up a plug that will fill the crater, with no gaps, up to the level of rim of the volcano. As the falling blocks are incorporated into the plug, they change colour to become brown, so that you know which blocks form the body of the plug. Once you have formed a plug of the right shape, you must then lower the plug into the crater and prevent the eruption. </p>

<p>If a block is not caught by the craft and, instead, falls into the crater (denoted by purple blocks), the impact destroys part of the natural plug (a purple block is removed) - and, of course, also changes the shape of the plug required to fill the crater. And if the falling blocks break through the plug material to expose the magma (red) an eruption takes place and the game is over. Any blocks that fall onto the rim of the volcano or the mountain side (green blocks) are themselves destroyed, but the mountain itself is not destroyed by the impact. However, each impact, whether onto the mountain or into the crater, increases the chance of eruption. If fifty blocks crash to the ground an eruption takes place - and, again, the game is over.</p>

<p>You are also able to launch missiles (yellow blocks) from the missile launchers at the sides (magenta blocks). These can be used both to destroy falling blocks, and so prevent dangerous impacts on the ground, and to remove blocks that form part of the plug you have created, if the shape is wrong. But make sure you don't accidentally shoot down the craft as the explosion caused by this will trigger an eruption. Note: if you remove a block from the plug and this leaves other blocks in the plug no longer with a means of connection, direct or indirect, to the craft, then these unattached blocks are also removed.</p>


<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a>')}</script>       
<p><a name="objective"></a><b>Objective</b></p>

<p>Your primary objective is to plug the volcano by creating the right-shaped plug and moving it into the crater so that it fits perfectly, with no missing blocks up to the level of the volcano rim. The plug may have additional blocks attached to it above the rim level. This plugging must be carried out before an eruption takes place. When you successfully prevent eruption, the sky turns blue and the sun comes out.</p>
<p>Overall, there are three ways in which an eruption can be triggered, which ends the game and fills the sky with red magma: 
<ul>
<li>falling blocks pierce the natural plug and expose the magma underneath;
<li>the craft is shot down by a missile;
<li>there are 50 impacts from falling blocks on the mountain and crater. 
</ul>
</p> 
<p>A secondary objective is to minimize the number of impacts on the crater and mountain before the volcano is plugged. The score indicates how many impacts remain before an eruption will be triggered from these, so you should try to maximize the score.  The score is shown in the bottom-right field (initially 50).</p>
 
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a>')}</script>
       <p><a name="controls"></a><b>Controls and actions</b></p>
<p>There are seven control buttons.  One set of these is found on each side.</p>
<p>After starting the game (by pressing the <i>New</i> button), you move the plug (initially just the white craft) by pressing the up-, down-, right- or left-arrow buttons to change its position in the direction of the arrow.  You can also rotate the plug by 90 degrees by pressing the clockwise or anticlockwise rotation buttons.  The pivot point for the rotation is the white block representing the craft.
</p>
<p>You can move the plug in a given direction only if there is space to do so (you can move into the path of a missile, but this will damage the plug).  One point to note is that if you try to move the plug onto a falling block, there must be space for the plug including the newly attached block to move in the required direction.
</p>
<p>You can rotate the plug only if there is nothing in the way of the rotation.  This means not only that the final position after rotation should be free of obstructions (including falling blocks and missiles), 
but that the space passed through during the rotation should also be free of obstructions.  
These spaces are simplified by assuming that the plug has a simple rectangular shape (which just covers the plug) and considering the complete rectangle that encompasses the initial and final positions, and making the assumption that the 
corners passed through by the rotation must be free of obstructions.  So, if the initial position is as shown by the blue rectangle (with a white pivot block), and the final position by the red rectangle, with the overlap shown in brown, then, if the rotation is clockwise, the corners passed through by the rotation are shaded grey.  These and the blue and red rectangles must be free of obstructions.</p>

<script language="Javascript">
documentwrite('<table border=0 cellspacing=0 cellpadding=0 align=center><tr><td bgcolor=#FFFFFF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#C0C0C0 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#C0C0C0 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td></tr><tr><td bgcolor=#FFFFFF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#C0C0C0 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#C0C0C0 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td></tr><tr><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td></tr><tr><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FFFFFF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td></tr><tr><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#A62A2A width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FF0000 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td></tr><tr><td bgcolor=#C0C0C0 width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#0000FF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FFFFFF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td><td bgcolor=#FFFFFF width='+Math.floor(scalef*25)+' height='+Math.floor(scalef*25)+' border=0>&nbsp;</td></tr></table>')
</script>
<p>Note: for a block to become part of the plug, or to have an impact on the crater or mountain, it is necessary for relative motion of the block and the other surface to cause overlap, not for the two just to be next to each other.  The same is true for missiles to affect the plug or falling blocks.  This means that, for example, even when a block or missile appears to be adjacent to the plug it may have no effect if the plug is moved away.  It also means that blocks or missiles can slide past other objects.</p>

<p>To fire missiles, press on one of the red buttons.  This fires missiles from all the missile launchers at the same time - so be wary.</p>

<p>You can also change the speed of the game by pressing on one of the numbers representing speed (1 =lowest, 4=highest).  To access these, press on the <i>More</i> button (and press <i>Back</i> to return to the main screen afterwards).  Volcano always starts off with a default speed setting of 2.</p>
      
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a>')}</script>
       <p><a name="newgame"></a><b>New Game</b></p>
             
      <p>A new game, with a new crater shape, may be generated at any time by pressing on the <i>
      New </i>button.  The initial crater varies in shape, but always requires a total plug size of 16 blocks to fill it.</p>
      <p><i>Volcano is an original game devised by Dr. David Wolstenholme</i></p>


<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<a name="terms"></a>
<p style="font-weight: bold;"><a name="terms">Terms of use</a></p>
<p>This software may be used for personal purposes only.&nbsp;  It may not be used for commercial purposes.</p>
<p>The software, code and script of this application may not be copied or be distributed to others.</p>
<p>The software, code and script may not be altered in any way.</p>
<p >Copyright of the software, code and script, and its
help
documentation, is held by TopAccolades Limited.&nbsp; No part of
the software,
code, script or documentation may be copied or used in another application or
document.</p>
<p >Although
every effort has been made to ensure that this software functions
as intended, TopAccolades Limited provides no warranty of
merchantability, or
fitness for a particular purpose, in relation to this application or
its
support.</p>
<p >TopAccolades
Limited shall not be liable for any damages whatsoever arising
out of the use of or inability to use this application or the
provision of
or failure
to provide support.</p>
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>

Version: 3.0 (20160321) <br>Scale: <script language="Javascript">documentwrite(scalef)</script><br><br>&nbsp;</td></tr></table></div>
<script language="Javascript">documentwrite('<div id="theimages" style="width:100%;height:'+Math.floor(scalef*12)+'px;overflow:hidden;background-color:black"  onClick="changepage(\'ourproducts\')"><center>');
var adsrequired=1

var baseonelinermessages=[
'Press ? for Help', '', 
'Use device Back for menu/exit', '', 
'TopAccolades Limited',
'Specializing in Original & Classic...',
'Game & Puzzle Apps',
'']

var admessages=[
'<span style="color:violet">For Birthdays & Anniversaries...</span>',
'<span style="color:violet">For Valentine\'s Day...</span>',
'<span style="color:violet">For Mother\'s & Father\'s Days...</span>',
'<span style="color:violet">Try with-my-love.com</span>',
'<span style="color:violet">Make the day really special!</span>',
'<span style="color:violet">We have web sites such as...</span>',
'<span style="color:violet">best-wife.com, sexiest-lover.com</span>',
'<span style="color:violet">supremely.sexy, just-so.sexy</span>',
'<span style="color:violet">best-husband.com, best-lover.com</span>',
'<span style="color:violet">best-mother.com, best-father.com</span>',
'<span style="color:violet">best-dad.com, best-daughter.com</span>',
'<span style="color:violet">... and many more.</span>',
'<span style="color:violet">Supply a loved one\'s name...</span>',
'<span style="color:violet">...to have a page such as...</span>',
'<span style="color:violet">jane-smith.best-wife.com</span>',
'<span style="color:violet">harry-styles.just-so.sexy</span>',
'<span style="color:violet">laura-brown.best-mother.com</span>',
'<span style="color:violet">Go to with-my-love.com...</span>',
'<span style="color:violet">...and make their day.</span>',
'',
'<span style="color:red">Sherlock is at the Bates Hotel</span>',
'<span style="color:red">Vic has been murdered</span>',
'<span style="color:red">Who killed Vic?</span>',
'<span style="color:red">With what?  And where?</span>',
'<span style="color:red">Ask Sherlock for clues...</span>',
'<span style="color:red">Then try to solve them</span>',
'<span style="color:red">Buy our great logic puzzle...</span>',
'<span style="color:red">CSI Sherlock</span>',
'',
'<span style="color:magenta">Play Rummy aginst the system...</span>',
'<span style="color:magenta">...or against a friend</span>',
'<span style="color:magenta">Full animation of deals and moves</span>',
'<span style="color:magenta">Game state remembered on exit</span>',
'<span style="color:magenta">Try our Rummy 7 app</span>',
'',
'<span style="color:cyan">Try our Kublitz Cube app</span>',
'<span style="color:cyan">Turn the layers to get...</span>',
'<span style="color:cyan">...the same colour on each side</span>',
'<span style="color:cyan">Guidance on solving the Cube</span>',
'<span style="color:cyan">Notation and mnemonics</span>',
'<span style="color:cyan">Kublitz Cube - it\'s free</span>',
'',
'<span style="color:magenta">Try our Peg Solitaire app</span>',
'<span style="color:magenta">Play with the full 32 pegs...</span>',
'<span style="color:magenta">...or start with fewer pegs </span>',
'<span style="color:magenta">Notation and mnemonics...</span>',
'<span style="color:magenta">...to remember the solution</span>',
'<span style="color:magenta">Peg Solitaire - it\'s free</span>',
'',
'<span style="color:lime">Try our Xword4x4 app</span>',
'<span style="color:lime">Crossword game for 2-4 players</span>',
'<span style="color:lime">Pass and Play mode</span>',
'<span style="color:lime">No internet connection required</span>',
'<span style="color:lime">You can even design the layout</span>',
'<span style="color:lime">Or change letter numbers/values</span>',
'<span style="color:lime">Try our <span style="color:white">Xword4x4</span> app</span>',
'',
'<span style="color:lime">If you like games such as...</span>',
'<span style="color:lime">Rummy, 4-in-a-line...</span>',
'<span style="color:lime">Hangman, Mancala...</span>',
'<span style="color:lime">Letters Game, Numbers Game...</span>',
'<span style="color:lime">& more classic & original games</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Games</span> app now</span>',
'',
'<span style="color:cyan">If you like puzzles such as...</span>',
'<span style="color:cyan">Sudoku, Hangman...</span>',
'<span style="color:cyan">Peg Solitaire, Step Challenge...</span>',
'<span style="color:cyan">WordSearch & other word puzzles...</span>',
'<span style="color:cyan">Numberskull & other number puzzles...</span>',
'<span style="color:cyan">Memory Pairs...</span>',
'<span style="color:cyan">& more classic & original puzzles</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Puzzles</span> app now</span>',
'',
'<span style="color:lime">Beat the Letters Game countdown;</span>',
'<span style="color:lime">Avoid the Hangman\'s noose;</span>',
'<span style="color:lime">Look for words in WordSearch+...</span>',
'<span style="color:lime">And other mind-boggling grids;</span>',
'<span style="color:lime">Try our original Pentad game;</span>',
'<span style="color:lime">Find connections in Linkword Snap;</span>',
'<span style="color:lime">Or solve the Word Ladder.</span>',
'<span style="color:lime">For word-based games and puzzles...</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Words</span> app now</span>',
'',
'<span style="color:magenta">Beat the Numbers Game countdown;</span>',
'<span style="color:magenta">Take 30 secs for our Step Challenge;</span>',
'<span style="color:magenta">Or Pyramid Numbers;</span>',
'<span style="color:magenta">Or try our original Numberskull.</span>',
'<span style="color:magenta">For number-based games & puzzles...</span>',
'<span style="color:magenta">Buy our <span style="color:white">Compact Numbers</span> app now</span>',
'',
'<span style="color:cyan">Solve Sudoku puzzles, with help;</span>',
'<span style="color:cyan">Be a mastermind and break the codes,</span>',
'<span style="color:cyan">Solve equations and use logic...</span>',
'<span style="color:cyan">In our original Numberskull puzzle;</span>',
'<span style="color:cyan">Find the killer based on clues...</span>',
'<span style="color:cyan">In Mystery Clues.</span>',
'<span style="color:cyan">For logic-based puzzles...</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Logic</span> app now</span>',
'',
'<span style="color:cyan">Exercise your brain;</span>',
'<span style="color:cyan">10 sets of exercises;</span>',
'<span style="color:cyan">5 exercises in each set...</span>',
'<span style="color:cyan">Word power...</span>',
'<span style="color:cyan">Verbal comprehension...</span>',
'<span style="color:cyan">Mental arithmetic...</span>',
'<span style="color:cyan">Memory...</span>',
'<span style="color:cyan">Pattern-matching...</span>',
'<span style="color:cyan">Great brain-training exercises...</span>',
'<span style="color:cyan">Buy our <span style="color:white">BrainBoxFun</span> app now</span>',
''

]

if (adsrequired==1) {baseonelinermessages=baseonelinermessages.concat(admessages)}

var onelinermessages=baseonelinermessages
documentwrite('<div id="oneliner" style="font-size='+Math.floor(scalef*9)+'px;text-align:center;font-weight:bold;color:white;background-color:black; width:100%">'+onelinermessages[0]+'</div><br><br>&nbsp;')
var clickproblemtimer=null
function handleclickproblem()
{
if (clickproblemtimer != null) {clearTimeout(clickproblemtimer)}
clickproblemtimer=setTimeout("modifyoneliner()",50);

}

function modifyoneliner()
{
changetextvalue('oneliner', document.getElementById('oneliner').innerHTML)
// document.getElementById('oneliner').innerHTML = document.getElementById('oneliner').innerHTML 
}

currentoneliner=0
function changeoneliner()
{
currentoneliner++
if (currentoneliner==onelinermessages.length) {currentoneliner=0}
changetextvalue('oneliner', onelinermessages[currentoneliner])
// document.getElementById('oneliner').innerHTML = onelinermessages[currentoneliner]
if (onelinertimer != null) {clearTimeout(onelinertimer)}
onelinertimer=setTimeout("changeoneliner()",5000);

}
var onelinertimer=null
onelinertimer=setTimeout("changeoneliner()",5000);


</script>

</center></div></td></tr></table></div></body></html>