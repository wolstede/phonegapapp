<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>Tricolor</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">


function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function documentwrite(someitem)
{
document.write(someitem)
}

function changepage(somepage)
{
location.href='../'+somepage+'/default.htm'
}



var combinationattributes=[0,30]

var cfpackage='compactfun'


var thiscfpage='tricolor'

var interruptsrequired=0

var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight

var overallwidthscale=screenwidth/190
var overallheightscale=screenheight/270
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}

var heightspacer=(Math.floor(screenheight-Math.floor(scalef*270))/2)-2
if (heightspacer<0) {heightspacer=0}

documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')



</script>

</head>
<body onLoad="showstartad()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:black; width:100%; height:100%"><script language="Javascript">


function showpicturesfordownloading()
{

if (document.getElementById('theimages').style.display == 'none')
{document.getElementById('theimages').style.display = 'inline'}
else
{document.getElementById('theimages').style.display = 'none'}



}


var runcheckvalue='ok'
function runcheck()
{
return true
}

var helpdisplayed=0
function togglehelp()
{
if (document.getElementById('addivtotal').style.display=='none' && document.getElementById('therestart').style.display=='none')
{
helpdisplayed=1-helpdisplayed
if (helpdisplayed==1) {document.getElementById('help').style.display = 'inline'; document.getElementById('thegame').style.display = 'none'}
if (helpdisplayed==0) {document.getElementById('help').style.display = 'none'; document.getElementById('thegame').style.display = 'inline'}
handleclickproblem()
}
}
</script><div style="width:100%; height:100%">
<script language="Javascript">documentwrite('<table border=0 width=100% cellspacing=0 cellpadding=0 style="text-align: left" align=center><tr><td valign=bottom style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white; vertical-align: bottom; background-image:url(buttonbg.jpg)"><a name="Top"></a><table border=0 cellpadding=2 width=100% height='+Math.floor(scalef*14)+' cellspacing=0 valign=middle ><tr><td style="text-align: left; font-weight: bold; font-size: '+Math.floor(scalef*12)+'px; color: white">Tricolor</td><td valign=middle align=center width='+Math.floor(scalef*20)+'></td><td style="width:'+Math.floor(scalef*30)+'px;font-size:'+Math.floor(scalef*12)+'px;text-align:center;font-weight:bold;color:black"  onClick="togglehelp()">?</td></tr></table>')</script></td></tr><tr><td style="text-align: left; font-weight: normal; color: black; vertical-align: top;background-color:purple"><div id="therestart" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table cellspacing=0 cellpadding=0 border=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<script language="Javascript">
var restartconfirmationrequired=0
var adfrequency=1

window.onbeforeunload=checkforunload;

function checkforunload()
{
if (restartconfirmationrequired==1) 
{
return "Confirmation of leaving page"
}

}

function displayrestartconfirmation()
{
document.getElementById('thegame').style.display = 'none'; 
document.getElementById('therestart').style.display = 'inline'; 
handleclickproblem()
}

function cancelrestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
}

function continuerestartconfirmation()
{
document.getElementById('therestart').style.display = 'none'; 
document.getElementById('thegame').style.display = 'inline';  
handleclickproblem()
showad2() 
}

</script>

<center><br><br>
<script language="Javascript">documentwrite('<table border=1 width='+Math.floor(scalef*150)+' style="background-color:silver;vertical-align:middle" valign=middle><tr><td align=center><br><br><img width='+Math.floor(scalef*36)+' src="cflogo.png"><br><br>Please confirm that you wish to restart.<br><br><br><table border=0 align=center><tr><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(redgradient.jpg);text-align:center" onClick="cancelrestartconfirmation()">Cancel</td></tr></table></td><td width='+Math.floor(scalef*20)+'></td><td><table border=1 cellpadding=0 cellspacing=0 style="align:left" align=left><tr><td style="width:'+Math.floor(scalef*60)+'px;background-image:url(greengradient.jpg);text-align:center" onClick="continuerestartconfirmation()">Confirm</td></tr></table></td></tr></table><br><br></td></tr></table></center>')</script>



</div></div></td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="thegame" style="width:100%;display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=top style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">

<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
// All code copyright of TopAccolades Limited
// Original puzzle by Dave Wolstenholme

function runonload()
{
newgame()
}

function continueafterad()
{
newgame()

}

var piecearray = []
var selectionrecord=[]
var height=11
var width=11


function createshuffledpacks() 
{
createshuffledpack(0)

}




function createshuffledpack(int1) 
{

var makeup = cardset[int1][1]
var n = 0
var i

for (i=0; i<makeup.length; i++)
{
var letter = makeup[i][0]
var quantity=makeup[i][1]


var j
for (j=0; j<quantity; j++)
{
cardset[int1][2][n]=letter
n = n+1
} // end for2

} // end for1

cardset[int1][2] = shufflearray(shufflearray(cardset[int1][2]))

}



function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=[]
packsize=somearray.length
var ran
var i
for (i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}



function tailarray(somearray)
{
return somearray.slice(1, somearray.length)
}

function headarray(somearray)
{
return somearray[0]
}



function empty(array) 
// checks whether an array is empty:  returns true if so, false if not.
{
if (array.length == 0)
     return true  
else
     return false

}

function member(element, array) 
// checks whether element is a member of array:  returns true if so, false if not.
{
var check = false
var i = 0
while (i<array.length && !check){check = array[i]==element; i++};
return check

}

function exists(array, exp, vars)
/* 
Takes an array and checks whether there is an element of the array that satisfies the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars.


Returns an array = [element, true] where element is the first element found satisfying the expression, or [false, false] if no solution found.

Examples: 
exists([2, -6, 5, -9], "X<0", []) returns [-6, true]
exists([2, -6, 5, -9], "X<V1", [-10]) returns [false, false]

*/
{
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var check = false
var i = 0
var X; while (i<array.length && !check){X=array[i]; check=eval(exp); i++};
if (check) 
return [true, array[i-1]]


else
return [false, false]

}

function existsXon(array, exp)
/* 
Takes an array and checks whether there is an element of the array that satisfies the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars.


Returns true if there is, false if not

Examples: 
existsXon([2, -6, 5, -9], "X<0", []) returns true
existsXon([2, -6, 5, -9], "X<V1", [-10]) returns false

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
return exists(array, exp, vars)[0]


}

function findallXon(array, exp)
/* 
Takes array (an array) and finds all elements of the array that satisfy the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns an array comprising all the elements that satisfy the expression ([] if none).

Examples: 
findallXon([2, -6, 5, -9], "X<0", []) returns [-6, -9]
findallXon([2, -6, 5, -9], "X<V1", [-10]) returns []

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var X; var solutions = []; for (var j=0; j<array.length; j++){X=array[j]; if (eval(exp)) solutions = solutions.concat([x])};
return solutions

}

function forallXon(array, exp)
/* 
Takes an array and checks whether all elements of the array satisfy the expression exp
where exp is a string representing an expression in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns true if they do, false if not.

Examples: 
forallXon([2, -6, 5, -9], "X<0", []) returns false
forallXon([2, -6, 5, -9], "X>V1", [-10]) returns true

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var check = true
var i = 0
var X; while (i < array.length && check) {X=array[i]; check=eval(exp);i++};
return check
}





function mapX(array, exp)
/* 
Takes array (an array) and generates a list (itself an array) of all the results of evaluating a function for each element of the array, where the expression exp
where exp is a string representing a function in X and variables V1...Vn, where X represents the corresponding element
of array and V1... Vn take the values in the array vars, the optional 3rd arg (if only 3) or 4th arg (if 4, where 3rd is text)

Returns an array, the same length as the original, comprising all the results.

Examples: 
mapX([2, -6, 5, -9], "X*2*V1", [3]) returns [12, -36, 30, -54]

*/
{
if (arguments.length == 3)
vars = arguments[2]
else
if (arguments.length == 4)
vars = arguments[3]
else
vars = [];
for (var i = 0; i < vars.length; i++) {var j = i+1; eval("var V" + j + "= vars[i]")};
var X; var solutions = []; for (var j = 0; j< array.length; j++) {X = array[j]; solutions = solutions.concat([eval(exp)])}
return solutions

}

var solution=[]

function noteclickingcell(somecol, somerow)
{
solution=[[somecol, somerow]].concat(solution)
}

function setuptricolorboard()
{
// first set up all cells to be blank
solution=['start']
for (var i=0; i<width; i++)
{
piecearray[i]=[]
for (var j=0; j<height; j++)
{
piecearray[i][j]="blank"
}
}
// next place three different colours in middle three bottom cells
var middlecol=(width-1)/2
var initsingles=shufflearray(["red", "white", "blue"])
piecearray[middlecol-1][height-1]=initsingles[0]
piecearray[middlecol][height-1]=initsingles[1]
piecearray[middlecol+1][height-1]=initsingles[2]
// finally go through a process of filling up remainder
// redisplayboard()

if (timer != null) {clearTimeout(timer)}

timer= setTimeout('filluprestofboard()', 1)

}

var fillingover=false

function filluprestofboard()
{
fillingover=false
completetimedfilluprestofboard()
}

function completetimedfilluprestofboard()
{
if (fillingover==false)
{
if (timer != null) {clearTimeout(timer)}

timer= setTimeout('fillupboard()', 1)
}
else
{
if (timer != null) {clearTimeout(timer)}

timer= setTimeout('completetimednewgame()', 1)


}

}

function fillupboard()
{
// determine profile of columns
var colprofile=[]
for (var i=0; i<width; i++)
{
var gaps=0
for (var j=0; j<height; j++)
{
if (piecearray[i][j]=='blank') {gaps=gaps+1}
}
colprofile[i]=gaps
}

// determine which columns are candidates for inserting a piece (part filled or empty and next to non-empty)
var candidatecols=[]
for (var i=0; i<width; i++)
{
var iscandidate=false
if (colprofile[i]<height && colprofile[i]>0)
	{iscandidate=true}
if (colprofile[i]==height)
	{ 
	if (i+1 < width)
		{if (colprofile[i+1]<height) {iscandidate=true}}
	if (i-1 >-1)
		{if (colprofile[i-1]<height) {iscandidate=true}}

 	}
if (iscandidate==true)
	{
	candidatecols=candidatecols.concat([i])
	}
}

// finally do filling, but have random selection of candidate columns

fillupboard2(colprofile, shufflearray(candidatecols))

completetimedfilluprestofboard()
}


function fillupboard2(colprofile, candidatecols)
{
if (candidatecols.length==0)
{
fillingover=true
}
else
{
var potentialcol=candidatecols[0]
var potentialrows=[]
for (var j=0; j<(height-colprofile[potentialcol])+1; j++)
{
potentialrows[j]=(height-1)-j  // these are indices of cells in partfilled column,including extra one at top
}
potentialrows=shufflearray(potentialrows) // shuffle them
var success=startfillingoncol(potentialcol, potentialrows)
if (success==false) // i.e. if we have not succeeded in finding a place to start in this column

{
// try again with a different column
fillupboard2(colprofile, tailarray(candidatecols))
}
}
}



function startfillingoncol(somecol, somerows)
{
if (somerows.length==0)
{return false}
else
{
var randomrows=shufflearray(somerows)
var success=startfillingonrow(somecol, randomrows[0])
if (success == true)
{
return true
}
else
{
return startfillingoncol(somecol, tailarray(randomrows))
}
}
}

// defines distribution of intended block sizes inserted.  Average 8, but only 1/4 probability of others for 1-4 and 12-15
var blocksizearray=[[1, 2, 3, 4], [5], [6], [7], [8], [9], [10], [11], [12, 13, 14, 15]]

function findacceptablecolours(somecol, somerow)
{
var acceptablecolours=[]
var unacceptablecolours=[piecearray[somecol][somerow]]
if (somecol<width-1) {unacceptablecolours=unacceptablecolours.concat([piecearray[somecol+1][somerow]])}
if (somecol>0) {unacceptablecolours=unacceptablecolours.concat([piecearray[somecol-1][somerow]])}
if (somerow<height-1) {unacceptablecolours=unacceptablecolours.concat([piecearray[somecol][somerow+1]])}
var thecolours=['red', 'white', 'blue']
for (var i=0; i<3; i++)
{
if (member(thecolours[i], unacceptablecolours)==false)
{
acceptablecolours=acceptablecolours.concat([thecolours[i]])
}
}
return acceptablecolours
}

function startfillingonrow(somecol, somerow)
{
var intendedsize=shufflearray(shufflearray(blocksizearray)[0])[0]
var coloursacceptable=findacceptablecolours(somecol, somerow)
if (coloursacceptable.length==0)
{
return false
}
else
{
var chosencolour=shufflearray(coloursacceptable)[0]
insertintoarray(0, somecol, somerow, chosencolour)
// redisplayboard()
// alert(['New', chosencolour, 'at', somecol, somerow])
expandarea(somecol, somerow, intendedsize, 1)
noteclickingcell(somecol, somerow)
return true
}
}


function expandarea(somecol, somerow, maxsize, currentsize)
{
// redisplayboard()
// alert([somecol, somerow, piecearray[somecol][somerow], 'current', currentsize, 'max', maxsize])
if (currentsize < maxsize)
{
var selectedcolour=piecearray[somecol][somerow]
var connectedblocks=findconnectedpieces([somecol, somerow], selectedcolour)
connectedblocks=shufflearray(connectedblocks) // forces sequential but random selection of block in connected set to start expansion from
tryexpand(connectedblocks, somecol, somerow, maxsize, currentsize)
}

}



function tryexpand(connectedblocks, somecol, somerow, maxsize, currentsize)
{
var potentialdirections=[[0, -1], [0, 1], [-1, 0], [1, 0]]  // only right, left or up
var potentialdirections=shufflearray(potentialdirections) // forces sequential but random selection of expansion direction
var nextcell=tryexpanddirection(potentialdirections, connectedblocks, currentsize)
if (nextcell!=false)
{
expandarea(nextcell[0], nextcell[1], maxsize, currentsize+1)
}
}

function tryexpanddirection(potentialdirections, connectedblocks, currentsize)
{
if (potentialdirections.length==0)
{
return false
}
else
{
var expanddirection=potentialdirections[0]
var success=tryexpandonepiecedirection(expanddirection, connectedblocks, connectedblocks)

if (success!=false)
{
return success
}
else
{
return tryexpanddirection(tailarray(potentialdirections), connectedblocks, currentsize)
}
}
}


function tryexpandonepiecedirection(expanddirection, remainingblocks, connectedblocks)
{
if (remainingblocks.length==0)
{
return false
}
else
{
var somecol=remainingblocks[0][0]
var somerow=remainingblocks[0][1]
var potcol=somecol+expanddirection[0]
var potrow=somerow+expanddirection[1]
var chosencolour=piecearray[somecol][somerow]

if (suitableexpansioncell(expanddirection[1], potcol, potrow, connectedblocks, chosencolour)==true)
{

insertintoarray(expanddirection[1], potcol, potrow, chosencolour)
// redisplayboard()
// alert(expanddirection)
return [potcol, potrow]
}
else
{
return tryexpandonepiecedirection(expanddirection, tailarray(remainingblocks), connectedblocks)
}

}

}


/*

function tryexpand(connectedblocks, somecol, somerow, maxsize, currentsize)
{
if (connectedblocks.length>0)
{
var candidateblock=connectedblocks[0]
var potentialdirections=[[0, -1], [0, 1], [-1, 0], [1, 0]] 
var potentialdirections=shufflearray(potentialdirections) // forces sequential but random selection of expansion direction
var nextcell=tryexpanddirection(potentialdirections, connectedblocks, candidateblock[0], candidateblock[1], currentsize)
if (nextcell==false)
{
tryexpand(tailarray(connectedblocks), somecol, somerow, maxsize, currentsize)
}
else
{
expandarea(nextcell[0], nextcell[1], maxsize, currentsize+1)
}
}
else
{
// and if connectedblocks empty just stop and record last insertion as clicking tile (to collapse)
noteclickingcell(somecol, somerow)
}
}


function tryexpanddirection(potentialdirections, connectedblocks, somecol, somerow, currentsize)
{
if (potentialdirections.length==0)
{
return false
}
else
{
var expanddirection=potentialdirections[0]
var potcol=somecol+expanddirection[0]
var potrow=somerow+expanddirection[1]
var chosencolour=piecearray[somecol][somerow]
if (suitableexpansioncell(potcol, potrow, connectedblocks, chosencolour)==true)
{

insertintoarray(potcol, potrow, chosencolour)

return [potcol, potrow]
}
else
{
return tryexpanddirection(tailarray(potentialdirections), connectedblocks, somecol, somerow, currentsize)
}
}
}

*/

function suitableexpansioncell(rowdirection, potcol, potrow, connectedblocks, chosencolour)
{
var okcell=true
if (validcell(potcol, potrow, chosencolour) == false)
{okcell=false}
else  
{
insertintoarray(rowdirection, potcol, potrow, chosencolour)
var newconnectedblocks=findconnectedpieces([potcol, potrow], chosencolour)

removefromarray(rowdirection, potcol, potrow)

if (onedifference(connectedblocks, newconnectedblocks)==false) // check to make sure that this only adds 1 cell to area (doesn't merge two areas)
{
okcell=false
// if (rowdirection==1) {alert('Unsuccessful')}
}
}
return okcell
}



function onedifference(oldarray, newarray)
{
var differences=0
for (var i=0; i<newarray.length; i++)
{
if (ismember(newarray[i], oldarray)==false) {differences++}
}
if (newarray.length-oldarray.length==1 && differences==1) 
{return true}
else
{return false}
}

function validcell(potcol, potrow, chosencolour)
{
var okcell=true

// first check for outside frame
if (potcol==-1) {okcell=false}
if (potcol==width) {okcell=false}
if (potrow==-1) {okcell=false}
if (potrow==height) {okcell=false}
// then other checks
if (okcell==true)
{
if (potrow<height-1)
	{if (piecearray[potcol][potrow+1] == 'blank') {okcell=false}} // mustn't have a gap below it
if (piecearray[potcol][0]!='blank') {okcell=false}  // can't insert into a full column
if (piecearray[potcol][potrow]==chosencolour) {okcell=false} // don't expand into a block already this colour - translates into vertical move
}
return okcell

}

function insertintoarray(rowdirection, somecol, somerow, somecolour)
{
if (rowdirection<1) // this deals with inserts above or either side
{
for (var i=0; i<somerow; i++)
{
piecearray[somecol][i]=piecearray[somecol][i+1]
}
piecearray[somecol][somerow]=somecolour
}
else // deals with inserting below
{
var currentcolour=piecearray[somecol][somerow]
var diffcolourrow=firstrowabovediffcolour(somecolour, somecol, somerow-1)
// redisplayboard()
// alert(['down', somecolour, somecol, somerow, '. ', piecearray[somecol][diffcolourrow], 'piece at row', diffcolourrow, 'to be replaced by ',currentcolour])
for (var i=0; i<=diffcolourrow-1; i++)
{
piecearray[somecol][i]=piecearray[somecol][i+1]
}
piecearray[somecol][diffcolourrow]=currentcolour
piecearray[somecol][somerow]=somecolour
}

}

function removefromarray(rowdirection, somecol, somerow)
{
if (rowdirection<1) // this deals with inserts above or either side
{
for (var i=somerow; i>0; i--)
{
piecearray[somecol][i]=piecearray[somecol][i-1]
}
piecearray[somecol][0]='blank'
}
else // deals with inserting below
{
// redisplayboard()
// alert(['removingbelow', somecol, somerow])

var somecolour=piecearray[somecol][somerow]
var diffcolourrow=firstrowabovediffcolour(somecolour, somecol, somerow-1)
var upliftedcolour=piecearray[somecol][diffcolourrow]
piecearray[somecol][somerow]=upliftedcolour
for (var i=diffcolourrow; i>0; i--)
{
piecearray[somecol][i]=piecearray[somecol][i-1]
}
piecearray[somecol][0]='blank'
// redisplayboard()
//alert('removed')


}
}

function firstrowabovediffcolour(somecolour, somecol, somerow)
{
var diffcolourrow
for (var i=somerow; i>-1; i--)
{
if (piecearray[somecol][i]!=somecolour) 
{
diffcolourrow=i
break
}
}
return diffcolourrow
}

function defineinitialcolours()
{

var piececolour
for (var i=0; i<width; i++)
{
piecearray[i]=[]
for (var j=0; j<height; j++)
{
piecearray[i][j]=randomcolour()
}
}
}

function randomcolour()
{
var thisnumber=randomnumber(3)
if (thisnumber==1) {return "red"}
if (thisnumber==2) {return "white"}
if (thisnumber==3) {return "blue"}

}



function setupboard()
{

var piecename
documentwrite('<table border=1 align=center><tr><td><table border=0 cellspacing=0 cellpadding=0 bgcolor="black" align="center">');

for (var i=0; i<height; i++)
{
documentwrite('<tr>')
for (var j=0; j<width; j++)
{
piecename='piece'+j+'_'+i
documentwrite('<td height="'+Math.floor(scalef*15)+'"><img style="display:block" width="'+Math.floor(scalef*15)+'" height="'+Math.floor(scalef*15)+'" src="blank.png" onClick="selectpiece('+j+', '+i+')" name="'+piecename+'"></td>')
}
documentwrite('</tr>')
}


documentwrite('</table></td></tr></table>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 align=center><tr>')
for (var j=0; j<(width-3)/2; j++)
{
documentwrite('<td height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*15)+'"></td>')
}


documentwrite('<td bgcolor="#000000" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*15)+'"></td><td bgcolor="#000000" height="'+Math.floor(scalef*10)+'"  width="'+Math.floor(scalef*15)+'"></td><td bgcolor="#000000" height="'+Math.floor(scalef*10)+'"  width="'+Math.floor(scalef*15)+'"></td>')

for (var j=0; j<(width-3)/2; j++)
{
documentwrite('<td  height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*15)+'"></td>')
}
documentwrite('</tr></table>')
}

var linkedpieces=[]
var checkedvertically=[]
var checkedhorizontally=[]


var timer

function selectpiece(coli, rowj)
{
if (runcheck()==true)
{
var selectedcolour=piecearray[coli][rowj]
if (playstate=='play' && selectedcolour != 'blank')
{
playstate='pause'
selectionrecord=selectionrecord.concat([[coli, rowj]])
linkedpieces=[[coli, rowj]]
checkedvertically=[]
checkedhorizontally=[]
findlinkedpieces([[coli, rowj]], selectedcolour)
// alert(linkedpieces)
displaymissingpieces()
if (timer != null) {clearTimeout(timer)}

timer= setTimeout('timedcollapse()', 1000)

}
}
}

function timedcollapse()
{
for (var i=0; i<linkedpieces.length; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='blank'
}
collapsepieces()
redisplayboard()
playstate='play'
}

function collapsepieces()
{
for (var i=0; i<width; i++)
{
collapsecolumn(i)
}

}

var empties=[]
var nonempties=[]

function collapsecolumn(somecol)
{
empties=[]
nonempties=[]
var colourincell
for (var somerow=0; somerow<height; somerow++)
{
colourincell=piecearray[somecol][somerow]
if (colourincell=='blank')
{
empties=empties.concat([colourincell])
}
else
{
nonempties=nonempties.concat([colourincell])
}

}
var newcol=empties.concat(nonempties)
for (var somerow=0; somerow<height; somerow++)
{
piecearray[somecol][somerow] = newcol[somerow]
}

}

function findconnectedpieces(somepiece, somecolour)
{
linkedpieces=[somepiece]
checkedvertically=[]
checkedhorizontally=[]
findlinkedpieces([somepiece], somecolour)
return linkedpieces
}

function findlinkedpieces(somearray, selectedcolour)
{

for (var i=0; i<somearray.length; i++)
{
somepiece=somearray[i]
if (ismember(somepiece, checkedvertically)==false)
{
collectvertically(somepiece, selectedcolour, 1)
collectvertically(somepiece, selectedcolour, -1)
checkedvertically=checkedvertically.concat([somepiece])

}
if (ismember(somepiece, checkedhorizontally)==false)
{
collecthorizontally(somepiece, selectedcolour, 1)
collecthorizontally(somepiece, selectedcolour, -1)
checkedhorizontally=checkedhorizontally.concat([somepiece])
}
}
if (linkedpieces.length > somearray.length) // i.e. more pieces found
{
findlinkedpieces(linkedpieces, selectedcolour)
}
}

function collectvertically(somepiece, selectedcolour, direction)
{

var coli=somepiece[0]
var rowi=somepiece[1]
rowi=rowi+direction

if (rowi > -1 && rowi < height)
{
if (piecearray[coli][rowi]==selectedcolour)
{
if (ismember([coli, rowi], linkedpieces) == false)
	{linkedpieces=linkedpieces.concat([[coli, rowi]])} // add to collection if not already there
collectvertically([coli, rowi], selectedcolour, direction) // carry on looking
}
}
}

function collecthorizontally(somepiece, selectedcolour, direction)
{

var coli=somepiece[0]
var rowi=somepiece[1]
coli=coli+direction

if (coli > -1 && coli < width)
{
if (piecearray[coli][rowi]==selectedcolour)
{
if (ismember([coli, rowi], linkedpieces) == false)
	{linkedpieces=linkedpieces.concat([[coli, rowi]])} // add to collection if not already there
collecthorizontally([coli, rowi], selectedcolour, direction) // carry on looking
}
}
}

function displaymissingpieces()
{
for (var i=0; i<linkedpieces.length; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='grey'
}
redisplayboard()
}

function ismember(element, somearray) // for lists of pairs
{
var check = false
var i = 0
while (i<somearray.length && !check){check = (somearray[i][0]==element[0] && somearray[i][1]==element[1]); i++};
return check

}


var startarray=[]

function newgame()
{
// alert('Initial')
selectionrecord=[]
setuptricolorboard()
}
// timed
function completetimednewgame()
{
startarray=copyvalues(piecearray)
playstate='play'

redisplayboard()

// nowcollapse()


}

function copyvalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=[]
for (var j=0; j<somearray[i].length; j++)
{
temparray[i][j]=somearray[i][j]
}
}
return temparray
}

var secondtimer

function showsolution()
{
playstate='stop'
selectionrecord=selectionrecord.concat(['solve'])

piecearray=copyvalues(startarray)
redisplayboard()

showsolutionsteps(0)


}

function showsolutionsteps(somei)
{
if (solution[somei]!='start' && playstate=='stop')
{


if (secondtimer != null) {clearTimeout(secondtimer)}

secondtimer= setTimeout('autoselectpiece(solution['+somei+'][0], solution['+somei+'][1], '+somei+')', 1000)
}
else
{
if (solution[somei]=='start') 
{
// playstate='play'
}
}
}

function autoselectpiece(coli, rowj, somei)
{
if (playstate=='stop')
{

var selectedcolour=piecearray[coli][rowj]

linkedpieces=[[coli, rowj]]
checkedvertically=[]
checkedhorizontally=[]
findlinkedpieces([[coli, rowj]], selectedcolour)
displaymissingpieces()
if (secondtimer != null) {clearTimeout(secondtimer)}

secondtimer= setTimeout('autocollapse('+somei+')', 1000)
}
}

function autocollapse(somei)
{
if (playstate=='stop')
{
for (var i=0; i<linkedpieces.length; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='blank'
}
collapsepieces()
redisplayboard()
showsolutionsteps(somei+1)
}
}

function rewind()
{
if (playstate=='play' && selectionrecord.length>0)
{
piecearray=copyvalues(startarray)

redomoves(selectionrecord)
redisplayboard()

}
}

function redomoves(somearray)
{
for (var i=0; i<somearray.length-1; i++)
{
makehiddenmove(somearray[i])
}
selectionrecord=somearray.slice(0, somearray.length-1)
}

function makehiddenmove(somepiece) 
{
var somecolour=piecearray[somepiece[0]][somepiece[1]]
findconnectedpieces(somepiece, somecolour)
for (var i=0; i<linkedpieces.length; i++)
{
piecearray[linkedpieces[i][0]][linkedpieces[i][1]]='blank'
}
collapsepieces()
}

function redisplayboard()
{


var piecename

for (var i=0; i<width; i++)
    {
for (var j=0; j<height; j++)
{
piecename='piece'+i+'_'+j
document.images[piecename].src=piecearray[i][j]+'.png'

}
	
    }

}





</SCRIPT>




<script language="JavaScript">
documentwrite('<form name="main">')
documentwrite('<div style="width:100%;height:'+Math.floor(scalef*5)+'px;display:block"></div>')

documentwrite('<table border=0 align=center><tr><td>')

setupboard()

documentwrite('<center><table border=0 cellspacing='+Math.floor(scalef*5)+'><tr><td><table border=1 cellpadding=0 cellspacing=0><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="rewind()" width='+Math.floor(scalef*60)+'>&lt;</td></tr></table></td><td><table border=1 cellpadding=0 cellspacing=0><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="showad()" width='+Math.floor(scalef*60)+'>New</td></tr></table></td><td><table border=1 cellpadding=0 cellspacing=0><tr><td style="background-image:url(buttonbg.jpg);text-align:center" onClick="showsolution()" width='+Math.floor(scalef*60)+'>Solve</td></tr></table></td></tr></table>')
documentwrite('</center></td></tr></table></form>')

</script>


</div></div>
</td></tr></table>
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>
</div><div id="addivtotal" style="width:100%; display:none">
<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div><table border=0 cellpadding=0 cellspacing=0 style="width:'+Math.floor(scalef*190)+'px;height:'+Math.floor(scalef*240)+'px" align=center>')</script>
<tr><td valign=middle style="vertical-align:top">
<div style="position:relative;left:0px;top:0px;height:100%;width:100%">
<div style="position:absolute;left:0px;top:0px;height:100%;width:100%">
<script language="Javascript">


var startad=1

function showstartad()
{
if (interruptsrequired==1 && thiscfpage!='ourproducts' && thiscfpage!=cfpackage )
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()
}
}


function showad()
{
if (restartconfirmationrequired==1)
{
displayrestartconfirmation()
}
else
{
showad2()
}
}

function showad2()
{
if (interruptsrequired==1  && thiscfpage!='ourproducts' && thiscfpage!=cfpackage)
{
document.getElementById('thegame').style.display = 'none'
document.getElementById('addivtotal').style.display = 'inline'
adcountdown(8)
}
else
{
continueafterad()
}

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='unselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='selected.gif'
}
}

var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
if (startad==1)
{
startad=0
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
runonload()

}
else
{
document.getElementById('addivtotal').style.display = 'none'
document.getElementById('thegame').style.display = 'inline' 
handleclickproblem()
continueafterad()
}
}
else
{
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",2000);
}
}


documentwrite('<div style="height:'+Math.floor(scalef*3)+'px"></div><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*160)+' height='+Math.floor(scalef*100)+'><tr><td align=center><b>Trial Version</b><br><br>The Compact Fun games and puzzles are available without these countdown interrupts and ads in the full <br><b>Compact Fun</b> <br>app, as well as other apps.</td></tr></table>')


documentwrite('<br><table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0 width='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' height='+(Math.floor(scalef*36)+Math.floor(scalef*10)+Math.floor(scalef*10))+' onClick="changepage(\'ourproducts\')"><tr><td><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"></td></tr><tr><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="cflogo.png" border=0></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif"></td></tr><tr><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif"></td><td align=center><img align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif"></td><td><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif"></td></tr></table>')

documentwrite('<br><table style="background-color:beige" valign=middle align=center border=1 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*140)+' height='+Math.floor(scalef*50)+'><tr><td align=center>To see details of these and other apps from TopAccolades press the button above.</td></tr></table>')


</script>











</div></div>
</td></tr></table>

<script language="Javascript">documentwrite('<div style="height:'+heightspacer+'px;width:100%"></div>')</script>

</div><div id="help" style="width:100%;display:none;background-color:white"><table bgcolor=white width=100% border=0 cellpadding=1><tr><td><script language="Javascript">var helpindexrequired=0;</script><br><script language="Javascript">documentwrite('<table align=left border=1 cellpadding=0 cellspacing=0><tr><td style="width:'+Math.floor(scalef*45)+'px;background-image:url(buttonbg.jpg);text-align:center"  onClick="togglehelp()">Back</td></tr></table>')</script>
<br><p><script language="Javascript">
if (helpindexrequired==1)
{
documentwrite('<a href="#intro">Introduction</a><br><a href="#starting">Starting</a><br><a href="#rewind">Rewind</a><br><a href="#solve">Solve</a><br><a href="#newgame">Starting a new game</a><br><a href="#terms">Terms of use</a>')}
</script>


<p><a name="intro"></a>
Tricolor can be treated as a puzzle or as a pastime.<br><br>
The basic idea is very simple, and the mode of play is similar to some other related games.  There are 
tiles of three different colours, red, white and blue, and these are positioned in an initial layout in the frame.  These
will naturally form variably-shaped blocks of tiles of the same colour - tiles connected to each other
horizontally or vertically.  When you press on a tile, this tile, together with all others in its block, are removed from the frame.  Any tiles above the removed tiles fall down vertically onto the remaining tiles 
(or the base of the frame if there are no other tiles).</p>
      <p >Tricolor differs from related games in that it has a clear objective: to remove all the tiles except for three in
the central three columns - one of each colour (no specific order).  These tiles then form a <span style="font-style:italic">tricolor</span> at the bottom of the frame (the three columns above the black bar under the frame).</p>

<script language="Javascript">
documentwrite('<table border=0 align=center>')
documentwrite('<tr><td>')
documentwrite('<table border=1 align=center><tr><td><table border=0 cellspacing=0 cellpadding=0 bgcolor="black" align="center">')
documentwrite('')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('<tr><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="red.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="white.png"></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blue.png"></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td><td><img style="display:block"  width='+Math.floor(scalef*15)+' height='+Math.floor(scalef*15)+' src="blank.png" ></td></tr>')
documentwrite('</table></td></tr></table><table border=0 cellspacing=0 cellpadding=0 align=center><tr><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'">     ')
documentwrite('<td bgcolor="#000000" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"></td><td bgcolor="#000000" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"></td><td bgcolor="#000000" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"></td>')
documentwrite('<td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'"><td bgcolor="#FFFFFF" height="'+Math.floor(scalef*10)+'" width="'+Math.floor(scalef*30)+'">')
documentwrite('</tr></table>')
documentwrite('</td></tr></table>')
</script>
<p >You can, of course, also treat Tricolor as a simple pastime, and just enjoy making the tiles collapse.</p>
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>             
      <p><a name="starting"></a><span style="font-weight:bold">Starting</span></p>
             
      <p>When the page first opens, tiles are put into the frame in an initial layout. Just press on any of the coloured tiles
to select a block of connected tiles to remove (possibly just one tile).  You will see the tiles in the 
selected block greyed out, and then any tiles no longer having any support will be re-displayed in their new positions after they have fallen down.</p>
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
       <p><a name="rewind"></a><span style="font-weight:bold">Rewind</span></p>
             
      <p>If you make some moves, but realize that you've made a mistake, press on the <span style="font-style:italic">&lt;</span> button to go back one move.  You can continue doing this
until you are back to the starting layout.</p>

<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
      <p><a name="solve"></a><span style="font-weight:bold">Solve</span></p>
             
      <p>If you can't solve the puzzle, or wish to see the computer's solution, press on the <span style="font-style:italic">Solve</span> button at any time.  The starting layout will
be displayed and you will then see each move made automatically by the computer until the <span style="font-style:italic">tricolor</span> is reached.</p>

      <p>Note: There is always a solution available, as the initial layout is derived by starting from a central <span style="font-style:italic">tricolor</span> and working backwards.  This solution will generally be one of many, and may not be 
the most efficient.</p>

     <p>Note: Because of the way the tiles are inserted into the frame to create the initial layout, working back from the final <span style="font-style:italic">tricolor</span>, it is possible, but unlikely, that there will be some blanks at the top of some columns in the initial layout.</p>

       <p>Note: Once you have pressed the <span style="font-style:italic">Solve</span> button, the <span style="font-style:italic">&lt;</span> button will not work until you have a new layout. You can press the <span style="font-style:italic">New </span>button to start again with a new layout at any time, even while a solution is being shown.</p>
<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>        
      <p><a name="newgame"></a><span style="font-weight:bold">New Game</span></p>
             
      <p>A new layout, and hence a new puzzle, may be generated at any time by pressing on the <span style="font-style:italic">
      New </span>button.</p>
      <p><span style="font-style:italic">Tricolor is an original puzzle devised by Dr. David Wolstenholme</span>


<script language="Javascript">if (helpindexrequired==1) {documentwrite('<p><a href="#Top"><i>Return to top</i></a></p>')}</script>
<a name="terms"></a>
<p style="font-weight: bold;"><a name="terms">Terms of use</a></p>
<p>This software may be used for personal purposes only.&nbsp;  It may not be used for commercial purposes.</p>
<p>The software, code and script of this application may not be copied or be distributed to others.</p>
<p>The software, code and script may not be altered in any way.</p>
<p >Copyright of the software, code and script, and its
help
documentation, is held by TopAccolades Limited.&nbsp; No part of
the software,
code, script or documentation may be copied or used in another application or
document.</p>
<p >Although
every effort has been made to ensure that this software functions
as intended, TopAccolades Limited provides no warranty of
merchantability, or
fitness for a particular purpose, in relation to this application or
its
support.</p>
<p >TopAccolades
Limited shall not be liable for any damages whatsoever arising
out of the use of or inability to use this application or the
provision of
or failure
to provide support.</p>
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>

Version: 3.0 (20160321) <br>Scale: <script language="Javascript">documentwrite(scalef)</script><br><br>&nbsp;</td></tr></table></div>
<script language="Javascript">documentwrite('<div id="theimages" style="width:100%;height:'+Math.floor(scalef*12)+'px;overflow:hidden;background-color:black"  onClick="changepage(\'ourproducts\')"><center>');
var adsrequired=1

var baseonelinermessages=[
'Press ? for Help', '', 
'Use device Back for menu/exit', '', 
'TopAccolades Limited',
'Specializing in Original & Classic...',
'Game & Puzzle Apps',
'']

var admessages=[
'<span style="color:violet">For Birthdays & Anniversaries...</span>',
'<span style="color:violet">For Valentine\'s Day...</span>',
'<span style="color:violet">For Mother\'s & Father\'s Days...</span>',
'<span style="color:violet">Try with-my-love.com</span>',
'<span style="color:violet">Make the day really special!</span>',
'<span style="color:violet">We have web sites such as...</span>',
'<span style="color:violet">best-wife.com, sexiest-lover.com</span>',
'<span style="color:violet">supremely.sexy, just-so.sexy</span>',
'<span style="color:violet">best-husband.com, best-lover.com</span>',
'<span style="color:violet">best-mother.com, best-father.com</span>',
'<span style="color:violet">best-dad.com, best-daughter.com</span>',
'<span style="color:violet">... and many more.</span>',
'<span style="color:violet">Supply a loved one\'s name...</span>',
'<span style="color:violet">...to have a page such as...</span>',
'<span style="color:violet">jane-smith.best-wife.com</span>',
'<span style="color:violet">harry-styles.just-so.sexy</span>',
'<span style="color:violet">laura-brown.best-mother.com</span>',
'<span style="color:violet">Go to with-my-love.com...</span>',
'<span style="color:violet">...and make their day.</span>',
'',
'<span style="color:red">Sherlock is at the Bates Hotel</span>',
'<span style="color:red">Vic has been murdered</span>',
'<span style="color:red">Who killed Vic?</span>',
'<span style="color:red">With what?  And where?</span>',
'<span style="color:red">Ask Sherlock for clues...</span>',
'<span style="color:red">Then try to solve them</span>',
'<span style="color:red">Buy our great logic puzzle...</span>',
'<span style="color:red">CSI Sherlock</span>',
'',
'<span style="color:magenta">Play Rummy aginst the system...</span>',
'<span style="color:magenta">...or against a friend</span>',
'<span style="color:magenta">Full animation of deals and moves</span>',
'<span style="color:magenta">Game state remembered on exit</span>',
'<span style="color:magenta">Try our Rummy 7 app</span>',
'',
'<span style="color:cyan">Try our Kublitz Cube app</span>',
'<span style="color:cyan">Turn the layers to get...</span>',
'<span style="color:cyan">...the same colour on each side</span>',
'<span style="color:cyan">Guidance on solving the Cube</span>',
'<span style="color:cyan">Notation and mnemonics</span>',
'<span style="color:cyan">Kublitz Cube - it\'s free</span>',
'',
'<span style="color:magenta">Try our Peg Solitaire app</span>',
'<span style="color:magenta">Play with the full 32 pegs...</span>',
'<span style="color:magenta">...or start with fewer pegs </span>',
'<span style="color:magenta">Notation and mnemonics...</span>',
'<span style="color:magenta">...to remember the solution</span>',
'<span style="color:magenta">Peg Solitaire - it\'s free</span>',
'',
'<span style="color:lime">Try our Xword4x4 app</span>',
'<span style="color:lime">Crossword game for 2-4 players</span>',
'<span style="color:lime">Pass and Play mode</span>',
'<span style="color:lime">No internet connection required</span>',
'<span style="color:lime">You can even design the layout</span>',
'<span style="color:lime">Or change letter numbers/values</span>',
'<span style="color:lime">Try our <span style="color:white">Xword4x4</span> app</span>',
'',
'<span style="color:lime">If you like games such as...</span>',
'<span style="color:lime">Rummy, 4-in-a-line...</span>',
'<span style="color:lime">Hangman, Mancala...</span>',
'<span style="color:lime">Letters Game, Numbers Game...</span>',
'<span style="color:lime">& more classic & original games</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Games</span> app now</span>',
'',
'<span style="color:cyan">If you like puzzles such as...</span>',
'<span style="color:cyan">Sudoku, Hangman...</span>',
'<span style="color:cyan">Peg Solitaire, Step Challenge...</span>',
'<span style="color:cyan">WordSearch & other word puzzles...</span>',
'<span style="color:cyan">Numberskull & other number puzzles...</span>',
'<span style="color:cyan">Memory Pairs...</span>',
'<span style="color:cyan">& more classic & original puzzles</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Puzzles</span> app now</span>',
'',
'<span style="color:lime">Beat the Letters Game countdown;</span>',
'<span style="color:lime">Avoid the Hangman\'s noose;</span>',
'<span style="color:lime">Look for words in WordSearch+...</span>',
'<span style="color:lime">And other mind-boggling grids;</span>',
'<span style="color:lime">Try our original Pentad game;</span>',
'<span style="color:lime">Find connections in Linkword Snap;</span>',
'<span style="color:lime">Or solve the Word Ladder.</span>',
'<span style="color:lime">For word-based games and puzzles...</span>',
'<span style="color:lime">Buy our <span style="color:white">Compact Words</span> app now</span>',
'',
'<span style="color:magenta">Beat the Numbers Game countdown;</span>',
'<span style="color:magenta">Take 30 secs for our Step Challenge;</span>',
'<span style="color:magenta">Or Pyramid Numbers;</span>',
'<span style="color:magenta">Or try our original Numberskull.</span>',
'<span style="color:magenta">For number-based games & puzzles...</span>',
'<span style="color:magenta">Buy our <span style="color:white">Compact Numbers</span> app now</span>',
'',
'<span style="color:cyan">Solve Sudoku puzzles, with help;</span>',
'<span style="color:cyan">Be a mastermind and break the codes,</span>',
'<span style="color:cyan">Solve equations and use logic...</span>',
'<span style="color:cyan">In our original Numberskull puzzle;</span>',
'<span style="color:cyan">Find the killer based on clues...</span>',
'<span style="color:cyan">In Mystery Clues.</span>',
'<span style="color:cyan">For logic-based puzzles...</span>',
'<span style="color:cyan">Buy our <span style="color:white">Compact Logic</span> app now</span>',
'',
'<span style="color:cyan">Exercise your brain;</span>',
'<span style="color:cyan">10 sets of exercises;</span>',
'<span style="color:cyan">5 exercises in each set...</span>',
'<span style="color:cyan">Word power...</span>',
'<span style="color:cyan">Verbal comprehension...</span>',
'<span style="color:cyan">Mental arithmetic...</span>',
'<span style="color:cyan">Memory...</span>',
'<span style="color:cyan">Pattern-matching...</span>',
'<span style="color:cyan">Great brain-training exercises...</span>',
'<span style="color:cyan">Buy our <span style="color:white">BrainBoxFun</span> app now</span>',
''

]

if (adsrequired==1) {baseonelinermessages=baseonelinermessages.concat(admessages)}

var onelinermessages=baseonelinermessages
documentwrite('<div id="oneliner" style="font-size='+Math.floor(scalef*9)+'px;text-align:center;font-weight:bold;color:white;background-color:black; width:100%">'+onelinermessages[0]+'</div><br><br>&nbsp;')
var clickproblemtimer=null
function handleclickproblem()
{
if (clickproblemtimer != null) {clearTimeout(clickproblemtimer)}
clickproblemtimer=setTimeout("modifyoneliner()",50);

}

function modifyoneliner()
{
changetextvalue('oneliner', document.getElementById('oneliner').innerHTML)
// document.getElementById('oneliner').innerHTML = document.getElementById('oneliner').innerHTML 
}

currentoneliner=0
function changeoneliner()
{
currentoneliner++
if (currentoneliner==onelinermessages.length) {currentoneliner=0}
changetextvalue('oneliner', onelinermessages[currentoneliner])
// document.getElementById('oneliner').innerHTML = onelinermessages[currentoneliner]
if (onelinertimer != null) {clearTimeout(onelinertimer)}
onelinertimer=setTimeout("changeoneliner()",5000);

}
var onelinertimer=null
onelinertimer=setTimeout("changeoneliner()",5000);


</script>

</center></div></td></tr></table></div></body></html>