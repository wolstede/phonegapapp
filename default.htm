<!DOCTYPE HTML><html><head><title>Rummy 7</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">
var appname='rummy7'
var appversion='2.00 (20141118)'
// localStorage.clear()
var restartconfirmationrequired=1
var adfrequency=1
var adsrequired=1
var numfreeturns=8

function modifypackfortesting()
{
// thepack=thepack.slice(0,18)
}

/*
How program worked in original rummy

// Carryng out computer turn
// drawing card
carryoutcomputerturn
determinecomputerselection  (based on top discard)
bestscoreusingtopdiscard
completetimedbestscoreusingtopdiscard (timed - repeated)
completetimeddeterminecomputerselection (after repeats of above complete - analyses results to give decision of stock or decision (stock default))
completetimedcarryoutcomputerturn(decision)  - gives message 'I take from (stock or discard) pile'
computerselect(decision) - calls selecttopstock or selecttopdiscard (having noted unavailablefordiscard card)
		then calls computerdiscard(unavailablefordiscard)
    	selecttopstock  used for user and computer go
			makes adjustments to hand and packs, displays hands and selections,
			transferdiscardtopack to stockpile if stockpile empty (all but top discard)
			message to user if it's his go
	selecttopdiscard used for user and computer go
			makes adjustments to hand and packs, displays hands and selections,
			message to user if it's his go

// discarding card	
computerdiscard			
determinecomputerdiscard(hands[0], unavailablefordiscard, currentstate)
completetimeddeterminecomputerdiscard (timed - repeated)
completetimedcomputerdiscard (after repeats of above complete) - 
	gives message 'I discard ...'
	calls discardcomputerselection('+cardtodiscard+')' - after time
discardcomputerselection(thisindex)
	makes adjustments to hand and packs, displays hands
	calls checktocontinue
checktocontinue
	used for user and computer go
	used to check for winner - if so gives message and displays all cards
	(if user just gone, calls carryoutcomputerturn)
	



*/

var carddisplays=[['dummy','dummy','dummy','dummy','dummy','dummy','dummy','dummy'], ['dummy','dummy','dummy','dummy','dummy','dummy','dummy','dummy'], ['dummy', 'dummy']]
var cardnames=[['card10', 'card11', 'card12', 'card13', 'card14', 'card15', 'card16', 'card17'], ['card20', 'card21', 'card22', 'card23', 'card24', 'card25', 'card26', 'card27'], ['discard', 'stock']]
var rummystockpile
var rummydiscardpile
var rummyhand1
var rummyhand2
var rummystatus
var rummyunavailablefordiscard
var rummyturnnum
var rummymoverecord
var rummygametype=0
var rummynametype=0
var rummyscores=[0,0]
var rummylastmove=[]



var playernames=[['Blue', '#8888FF', 'System'], ['Red', '#FF8888', 'Player']]

var playsomeone=0

function documentwrite(someitem)
{
document.write(someitem)
}

var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight
var overallwidthscale=screenwidth/240
var overallheightscale=screenheight/360
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}
var pushdown=0
if (scalef*370 < screenheight)
{
pushdown=Math.floor((screenheight-(scalef*370))/2)
}
documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ndt {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ndd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; }  \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')

</script>

</head>
<body onLoad="runonload()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:#88FF88; width:100%; height:100%">
<SCRIPT LANGUAGE="JavaScript">

// Local storage
// SetLocalVal and GetLocalVal - use cookies if available, if not local storage
// Reason: for testing, local storage doesn't seem to work.  On devices, local storage works but not always cookies.  Should cover everything.

var daystoExpire = 2000;
var expirydate = new Date(); 
expirydate.setTime(expirydate.getTime() + (daystoExpire*24*60*60*1000));


function GetCookie(name) 
{  
var thecookie=document.cookie
var namestring = name+'='  
var cookieval = null
var cookievalbeg=-1
var cookievalend=thecookie.length
for (var beg=0; beg<thecookie.length; beg++)
{
var end=beg+namestring.length
if (thecookie.substring(beg, end) == namestring)
{
cookievalbeg=end
}
}
if (cookievalbeg > -1)
{
cookievalend=thecookie.indexOf(';', cookievalbeg) // look for next ; after beginning of value
if (cookievalend == -1) (cookievalend = thecookie.length)
cookieval = unescape(thecookie.substring(cookievalbeg, cookievalend))
} 

return cookieval
}


function SetCookie(name, val) 
{  
var cookiestring = name+'='+escape(val)+'; expires='+ expirydate.toGMTString()
document.cookie=cookiestring
}

var usecookies=1
SetCookie('dummy', 'answer')
if (GetCookie('dummy')==null) {usecookies=0}

// For this app cookies not adequate, so must use local storage, so set usecookies to 0
usecookies=0
</script>
<script language="Javascript">
// checks whether local storage works.  Often doesn't with Internet Explorer
var localstorageworks=0
localStorage.setItem('testcheck', '43')
if (localStorage.getItem('testcheck')=='43') {localstorageworks=1}

</script>
<script language="Javascript">


</script>
<script language="Javascript">
var localstoragesubstitute=[]

function SetLocalStorageSubstitute(someitem, someval)
{
someval=someval+''
var someset=0
for (var i=0; i<localstoragesubstitute.length; i++)
{
if (localstoragesubstitute[i][0]==someitem)
{
localstoragesubstitute[i][1]=someval
someset=1
break
}
}
if (someset==0) {localstoragesubstitute=localstoragesubstitute.concat([[someitem, someval]])}
}

function GetLocalStorageSubstitute(someitem)
{
for (var i=0; i<localstoragesubstitute.length; i++)
{
if (localstoragesubstitute[i][0]==someitem)
{
return localstoragesubstitute[i][1]
}
}
return null
}
</script>
<script language="Javascript">

function SetLocalVal(somename, someval)
{
if (usecookies==1) 
{
SetCookie(somename, someval)
}
else
{
if (localstorageworks==1)
{
localStorage.setItem(somename, someval)
}
else
{
SetLocalStorageSubstitute(somename, someval)
}
}
}

function GetLocalVal(somename)
{
if (usecookies==1) 
{
return GetCookie(somename)
}
else
{
if (localstorageworks==1)
{
return localStorage.getItem(somename)
}
else
{
return GetLocalStorageSubstitute(somename)
}
}
}

// end Local Storage




function continueafterad()
{
showingads=0
continuegame()
}

function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function changebgcolor(someitem, somecolor)
{
document.getElementById(someitem).style.backgroundColor=somecolor
}

function genintegers(somenum)
{
var someresult=[]
for (var i=1; i<=somenum; i++)
{
someresult[i-1]=i
}
return someresult
}

function member(someitem, somelist)
{
for (var i=0; i<somelist.length; i++)
{
if (someitem==somelist[i]) {return true}
}
return false
}

function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=new Array()
var packsize=somearray.length
var ran

for (var i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}

function removeitem(someitem, somearray)
{
var somebeg=[]
var someend=[]
for (var i=0; i<somearray.length; i++)
{
if (somearray[i]==someitem) {return somearray.slice(0, i).concat(somearray.slice(i+1))}
}
return somearray
}

function copylist(somelist)
{
var somereturn=[]
for (var i=0; i<somelist.length; i++)
{
somereturn[i]=somelist[i]
}
return somereturn
}



</script>
<script language="Javascript">




function graphicfor(somename)
{

if (member(somename, ['Deal', 'Help',  'More', 'Back', 'OK', 'Cancel', 'Sort', 'New', 'Play', 'Reload'])==true) {return '<div style="position:relative"><img width='+Math.floor(scalef*50)+' height='+Math.floor(scalef*20)+' src="greybluebutton.png" style="display:block"><div style="position:absolute;top:0px;left:0px;width:100%;height:100%;display:inline"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle ><tr height='+Math.floor(scalef*20)+'><td align=center valign=middle style="text-align:center;font-weight:bold;color:white">'+somename+'</td></tr></table></div></div>'}




if (somename=='blank') {return ''}

return '<b><span style="text-align:center">'+somename+'</span></b>'
}








function donothing(somenum)
{}
function donothing2()
{}










function GetLocalList(somename)
{
var somestore=GetLocalVal(somename)
if (somestore==null) {return []}
return eval('['+somestore+']')
}

function GetLocalString(somename)
{
var somestore=GetLocalVal(somename)
if (somestore==null) {return ''}
return somestore
}


</script>
<script language="Javascript">

// From original


var thepack = new Array()

function createnewpack()
{
var k=0
for (var i=0; i<13; i++)
{
for (var j=0; j<4; j++)
{
thepack[k]=[i, j]
k++

}

}
}


function modulo(somex, somey)
{
return somex % somey
}

function scoreonecard(someval)
{
var returnval=0
if (someval == 1) {returnval=1}
if (someval == 2) {returnval=-10}
if (someval == 3) {returnval=-10}
return returnval
}

function arraytotal(somearray)
{
var sometotal=0
for (var i=0; i<somearray.length; i++)
{
sometotal=sometotal+somearray[i]
}
return sometotal
}

function createmeldpatterns(somearray)
{

var meldpatterns=[[], []]
var meldnum=0
var somescores=[]
var overallscore=0
var i
var j

var cnum1
var cnum2
var cnum3
var cnum4
var cs1
var cs2
var cs3
var cs4
// deal with 3card runs
for (i=0; i<12; i++)
{

for (j=0; j<4; j++)
{
cnum1=i
cnum2=i+1
cnum3=modulo(i+2, 13)

somescores=[scoreonecard(somearray[cnum1][j]), scoreonecard(somearray[cnum2][j]), scoreonecard(somearray[cnum3][j])]
overallscore=arraytotal(somescores)
if (overallscore<0) {overallscore=-1}

meldpatterns[0][meldnum]=[[3, "run"], [[cnum1, j],[cnum2, j], [cnum3, j]], somescores, overallscore]
meldnum++
}
}

// deal with 3card same num
for (i=0; i<13; i++)
{
for (j=0; j<4; j++)
{

cs1=j
cs2=modulo(j+1, 4)
cs3=modulo(j+2, 4)

somescores=[scoreonecard(somearray[i][cs1]), scoreonecard(somearray[i][cs2]), scoreonecard(somearray[i][cs3])]
overallscore=arraytotal(somescores)
if (overallscore<0) {overallscore=-1}

meldpatterns[0][meldnum]=[[3, "same"], [[i, cs1],[i, cs2], [i, cs3]], somescores, overallscore]
meldnum++

}
}


meldnum=0
// deal with 4card runs
for (i=0; i<11; i++)
{

for (j=0; j<4; j++)
{
cnum1=i
cnum2=i+1
cnum3=i+2
cnum4=modulo(i+3, 13)

somescores=[scoreonecard(somearray[cnum1][j]), scoreonecard(somearray[cnum2][j]), scoreonecard(somearray[cnum3][j]), scoreonecard(somearray[cnum4][j])]
overallscore=arraytotal(somescores)
if (overallscore<0) {overallscore=-1}

meldpatterns[1][meldnum]=[[4, "run"], [[cnum1, j],[cnum2, j], [cnum3, j], [cnum4, j]], somescores, overallscore]
meldnum++
}
}


// deal with 4card same num
for ( i=0; i<13; i++)
{


cs1=0
cs2=1
cs3=2
cs4=3

somescores=[scoreonecard(somearray[i][cs1]), scoreonecard(somearray[i][cs2]), scoreonecard(somearray[i][cs3]), scoreonecard(somearray[i][cs4])]
overallscore=arraytotal(somescores)
if (overallscore<0) {overallscore=-1}

meldpatterns[1][meldnum]=[[4, "same"], [[i, cs1],[i, cs2], [i, cs3], [i, cs4]], somescores, overallscore]
meldnum++

}

return meldpatterns
}

var moverecord=[]
var hands=[[], []]
var discardpile=[]
var turnnum=0
var currentplayer=1
var opponentplayer=2
var displayhands=[["blank", "blank", "blank", "blank", "blank", "blank", "blank", "blank"],["blank", "blank", "blank", "blank", "blank", "blank", "blank", "blank"]]
var selections=[-1, -1]  // difference
var computermemory=3

var unavailablefordiscard=[[-1, -1]]

function setmemory(level)
{
computermemory=level
document.images["memory0"].src="unselected.gif"
document.images["memory1"].src="unselected.gif"
document.images["memory2"].src="unselected.gif"
document.images["memory3"].src="unselected.gif"
document.images["memory"+level].src="selected.gif"

}


function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=new Array()
packsize=somearray.length
var ran
var i
for (i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}




function changeplayer()
{
var messagetext
currentplayer=opponentplayer
opponentplayer=3-currentplayer

}


function initialize()
{
thepack=[]
moverecord=[]
hands=[[], []]
discardpile=[]
turnnum=0
displayhands=[["blank", "blank", "blank", "blank", "blank", "blank", "blank", "blank"],["blank", "blank", "blank", "blank", "blank", "blank", "blank", "blank"]]
selections=[-1, -1]  // difference
unavailablefordiscard=[[-1, -1]]
showselections()  // difference


messagedisplay('')




}

function savethestate(somestate)
{
SetLocalVal('rummystockpile', thepack)
SetLocalVal('rummydiscardpile', discardpile)
SetLocalVal('rummyhand1', hands[0])
SetLocalVal('rummyhand2', hands[1])
SetLocalVal('rummyunavailablefordiscard', unavailablefordiscard)
SetLocalVal('rummyturnnum', turnnum)
SetLocalVal('rummymoverecord', moverecord)
SetLocalVal('rummygametype', rummygametype)
SetLocalVal('rummynametype', rummynametype)
SetLocalVal('rummymemory', computermemory)
SetLocalVal('rummystatus', somestate)
SetLocalVal('rummyscores', rummyscores)
SetLocalVal('rummylastmove', rummylastmove)
SetLocalVal('rummyshowtopcards', showcomputercards)



}

function startnewgame(somedealer)
{
initialize()
currentplayer=somedealer
opponentplayer=3-somedealer
SetLocalVal('rummylastdealer', [somedealer, rummynametype])
createnewpack()
thepack=shufflearray(shufflearray(thepack))
modifypackfortesting()
changetextvalue('stocktotal', thepack.length)

dealcards()
initializedisplayhands()
messagedisplay('')
changeplayer()
rummylastmove=[]
savethestate([1, currentplayer, 0])
animatedeal(somedealer-1)
// continuegame()

}


function initializedisplayhands()
{
var thishand
for (var i=0; i<2; i++)
{
thishand=hands[i]
for (var j=0; j<thishand.length; j++)
{

insertdisplayhand(i, thishand[j])
}
}
}

function insertdisplayhand(someindex, somecard)
{

var blankindex=-1
for (var i=0; i<displayhands[someindex].length; i++)
{

if ((blankindex == -1) && (displayhands[someindex][i] == "blank")) {blankindex = i}
}
displayhands[someindex][blankindex]=somecard
}


function showallhands()
{
var thishand
for (var i=0; i<2; i++)
{
thishand=displayhands[i]
for (var j=0; j<thishand.length; j++)
{

displayonecard(i+1, j, displayhands[i][j])
}
}

}

function showselections()
{
document.getElementById('finger').style.display='none'

if (selections[1]<0) {return}
var somepositions=cardpositions[1][selections[1]]
document.getElementById('finger').style.top=(somepositions[0]+Math.floor(scalef*10))+'px'
document.getElementById('finger').style.left=(somepositions[1]+Math.floor(scalef*2))+'px'
document.getElementById('finger').style.display='block'
}


function showstockpile()
{
var somecard
var somecardlist=[]
if (thepack.length>0)
{
var somecard = 'back'
}
else
{
somecard='emptypile'
}
redrawcardifneeded(2, 1, somecard, somecardlist)
}


function showdiscardpile()
{
var somecard
var somecardlist
if (discardpile.length>0)
{
somecard = discardpile[0]
somecardlist=somecard
}
else
{
somecard='emptypile'
somecardlist=[]
}
redrawcardifneeded(2, 0, somecard, somecardlist)
}


var showcomputercards=0
// difference - next function is new
function setcarddisplay(someval)
{
if (someval==0) {showcomputercards=0; document.images['carddisplay0'].src='selected.gif'; document.images['carddisplay1'].src='unselected.gif'} else {showcomputercards=1; document.images['carddisplay0'].src='unselected.gif'; document.images['carddisplay1'].src='selected.gif'}
showallhands()
}

var autoselectpick=0
function setautopick(someval)
{
if (someval==0) {autoselectpick=0; document.images['autoselectpick0'].src='selected.gif'; document.images['autoselectpick1'].src='unselected.gif'} else {autoselectpick=1; document.images['autoselectpick0'].src='unselected.gif'; document.images['autoselectpick1'].src='selected.gif'}
}

function flipcomputercards()
{
if (showcomputercards==1) {showcomputercards=0} else {showcomputercards=1}
showallhands()
}

function displayonecard(someplayer, somepos, somecard)
{
var somepic
if (someplayer==1 && showcomputercards==0 && somecard != "blank")
{
somepic='back'
}
else
{
somepic=somecard
}
var somepiclist=[]
if (somepic.length==2) // a real card
{
somepiclist=somepic  
}
redrawcardifneeded(someplayer-1, somepos, somepic, somepiclist)

}

function redrawcardifneeded(someindex, somepos, somepic, somepiclist)
{
var someitem=cardnames[someindex][somepos]
var somecurrentimage=carddisplays[someindex][somepos]
if (somepiclist.length==0) // not a real card image
{
if (somepic!=somecurrentimage) 
{
carddisplays[someindex][somepos]=somepic
changetextvalue(someitem, imagefor(somepic))
}
}
else // a real card image
{
if (somepiclist[0]==somecurrentimage[0] && somepiclist[1]==somecurrentimage[1]) // card already displayed
{} 
else
{
carddisplays[someindex][somepos]=somepic
changetextvalue(someitem, imagefor(somepic))
}
}

}

function cardtextdesc(somenum, somesuit)
{
var numdesc
somenum=somenum+1
numdesc=somenum
if (somenum == 1) numdesc="Ace"
if (somenum == 11) numdesc="Jack"
if (somenum == 12) numdesc="Queen"
if (somenum == 13) numdesc="King"
var suitdesc
if (somesuit == 0) {suitdesc = "Hearts"}
if (somesuit == 1) {suitdesc = "Clubs"}
if (somesuit == 2) {suitdesc = "Diamonds"}
if (somesuit == 3) {suitdesc = "Spades"}
return numdesc+' '+suitdesc

}

function picturedesc(somepos, somecard)
{
if (somecard=="blank") {return "blank"}
else
{
var numdesc = somecard[0]+1
if (numdesc == 1) numdesc="ace"
if (numdesc == 11) numdesc="jack"
if (numdesc == 12) numdesc="queen"
if (numdesc == 13) numdesc="king"
var suitdesc = somecard[1]
var suitcolour = "black"
if (suitdesc == 0) {suitdesc = "hearts"; suitcolour = "red"}
if (suitdesc == 1) {suitdesc = "clubs"; suitcolour = "black"}
if (suitdesc == 2) {suitdesc = "diamonds"; suitcolour = "red"}
if (suitdesc == 3) {suitdesc = "spades"; suitcolour = "black"}

if (somepos=="top") {return suitcolour+numdesc}
else
{return suitdesc}

}

}


function handindex(someplayer)
{
return someplayer-1

}

function tailarray(somearray)
{
return somearray.slice(1, somearray.length)
}

function headarray(somearray)
{
return somearray[0]
}

function addhead(someitem, somearray)
{
return [someitem].concat(somearray)
}


function dealcards()
{
restartconfirmationrequired=1
var somecard
for (var i=0; i<7; i++)
{
somecard=headarray(thepack)
hands[handindex(opponentplayer)]=addhead(headarray(thepack), hands[handindex(opponentplayer)])
thepack=tailarray(thepack)
notemove(turnnum, currentplayer, 4, opponentplayer, somecard)

somecard=headarray(thepack)
hands[handindex(currentplayer)]=addhead(headarray(thepack), hands[handindex(currentplayer)])
thepack=tailarray(thepack)
notemove(turnnum, currentplayer, 4, currentplayer, somecard)


}
// somecard=headarray(thepack)
// hands[handindex(opponentplayer)]=addhead(headarray(thepack), hands[handindex(opponentplayer)])
// thepack=tailarray(thepack)
// notemove(turnnum, currentplayer, 4, opponentplayer, somecard)

somecard=headarray(thepack)
discardpile=addhead(headarray(thepack), discardpile)
thepack=tailarray(thepack)
notemove(turnnum, currentplayer, 4, 3, somecard)

turnnum++


}


function notemove(someturn, someplayer, somesource, somedestination, somecard)
{

moverecord=moverecord.concat([[someturn, someplayer, somesource, somedestination, somecard]])
}









var premovehand
function presscard(someindex)
{

if (currentplayer==2)
{
var selectedindex=selections[1]
var someplayerhand=displayhands[1]
premovehand=someplayerhand.concat([])
var somestarthand=hands[1].concat([])
if (selectedindex>=0) // have already selected a card, so choosing insert point
{
document.getElementById('selectscreen').style.display='none'
document.getElementById('insertscreen').style.display='none'
document.getElementById('discardscreen').style.display='none'
document.getElementById('stockscreen').style.display='none'

var somenumber=someindex // done to use code from elsewhere
var somerack=displayhands[1]

if (somenumber>somerack.length) {somenumber=somerack.length}
var someselectedrackindex=selectedindex
var somevalueselected=somerack[someselectedrackindex]
var someremoved=somerack.slice(0, someselectedrackindex).concat(somerack.slice(someselectedrackindex+1))
var somenewrackindex=somenumber-1
var somenewrack
if (somenewrackindex>=someselectedrackindex)
{
somenewrackindex=somenewrackindex-1
} 
somenewrack=someremoved.slice(0, somenewrackindex+1).concat([somevalueselected]).concat(someremoved.slice(somenewrackindex+1))
if (somenewrack.length==7) 
{
somenewrack=somenewrack.concat(['blank'])
}
displayhands[1]=somenewrack
// document.getElementById('insertscreen').style.display='none'
// document.getElementById('selectscreen').style.display='block'

squashplayerhand()
somefinalhand=hands[1].concat([])
animatehandmoves(1, somestarthand, somefinalhand, 'allowselection()')
}
else
{
if (someindex==7 && displayhands[1][7]=='blank')
{return}
selectCard(2, someindex)
}
}
}

// code for touch-based card control
var thecardtouchstart
var thecardtouches
function addtouchcardhandlers()
{
if ("ontouchstart" in window)
{
var sometouchzone
thecardtouchstart=[]
thecardtouches=0

for (var i=0; i<8; i++)
{
sometouchzone=document.getElementById("cardselect"+i);
sometouchzone.addEventListener("touchstart", startcardtouch, false);
sometouchzone.addEventListener("touchend", endcardtouch, false);
sometouchzone.addEventListener("touchmove", movecardtouch, false);
}
sometouchzone=document.getElementById("discardscreen");
sometouchzone.addEventListener("touchstart", startdrawtouch, false);
sometouchzone.addEventListener("touchend", enddrawtouch, false);
sometouchzone.addEventListener("touchmove", movedrawtouch, false);
sometouchzone=document.getElementById("stockscreen");
sometouchzone.addEventListener("touchstart", startdrawtouch, false);
sometouchzone.addEventListener("touchend", enddrawtouch, false);
sometouchzone.addEventListener("touchmove", movedrawtouch, false);

}
}

function startdrawtouch(event)
{

event.preventDefault();
var somefingers=event.touches.length

var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
var sometarget=event.currentTarget
var sometargetleft=sometarget.getBoundingClientRect().left;
var sometargettop=sometarget.getBoundingClientRect().top;


thecardtouchstart=[somey, somex, [event.currentTarget.id, sometargettop, sometargetleft]]
thecardtouches=somefingers
}

function movedrawtouch(event)
{
event.preventDefault();
var sometarget=event.currentTarget

if (thecardtouches==1)
{
var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
thecardtouchstart=[thecardtouchstart[0], thecardtouchstart[1], thecardtouchstart[2], somey, somex]
}
}

function enddrawtouch(event)
{
event.preventDefault();
if (event.touches.length==0) // last finger has been removed
{
// we've already selected the start card, so only need to do something if a slide for a single finger
if (thecardtouches==1)
{
// treat a slide or a tap the same!
if (thecardtouchstart[2][0]=="discardscreen")
{
pressdiscard()
}
else
{
selecttopstock()
}
}
thecardtouchstart=[]
thecardtouches=0
}
}


function startcardtouch(event)
{

event.preventDefault();
var somefingers=event.touches.length

var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
var sometarget=event.currentTarget
var sometargetleft=sometarget.getBoundingClientRect().left;
var sometargettop=sometarget.getBoundingClientRect().top;


thecardtouchstart=[somey, somex, [event.currentTarget.id, sometargettop, sometargetleft]]
thecardtouches=somefingers
if (thecardtouches==1) // for first touch, immediately select card and show finger on it
{
var sometargettilenum=event.currentTarget.id.slice(10)*1
// selections[1]=-1 // allows presscard to work!
presscard(sometargettilenum)
}
}

function movecardtouch(event)
{
event.preventDefault();
var sometarget=event.currentTarget
var sometargettilenum=sometarget.id.slice(10)*1

if (thecardtouches==1)
{
var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
thecardtouchstart=[thecardtouchstart[0], thecardtouchstart[1], thecardtouchstart[2], somey, somex]
// selections[1]=sometargettilenum
// showselections()
}
}

function endcardtouch(event)
{
event.preventDefault();
if (event.touches.length==0) // last finger has been removed
{
// we've already selected the start card, so only need to do something if a slide for a single finger
if (thecardtouches==1)
{
if (thecardtouchstart.length==5) // a slide
{
var somediffy=thecardtouchstart[3]-thecardtouchstart[0]
var somediffx=thecardtouchstart[4]-thecardtouchstart[1]
if (Math.abs(somediffy)<3*scalef && Math.abs(somediffx)<3*scalef) // if very small move treat as tap
{}
else
{
handlecardslide(event)
}
}
}
thecardtouchstart=[]
thecardtouches=0
}
}

function handlecardslide(event)
{
var sometargetid=thecardtouchstart[2][0]
var sometargettilenum=sometargetid.slice(10)*1
var sometargetleft=thecardtouchstart[2][2]
var someinsertleft=thecardtouchstart[4]
var someinserttop=thecardtouchstart[3]
var somerack=document.getElementById('insertscreen')
var someracktop=somerack.getBoundingClientRect().top;
var somerackbottom=somerack.getBoundingClientRect().bottom;
if (someinserttop>somerackbottom)
{
return
}
if (someinserttop<someracktop)
{
if (hands[1].length==8) // player can discard
{
var somediscard=document.getElementById('discardscreen')
var somediscardtop=somediscard.getBoundingClientRect().top;
var somediscardbottom=somediscard.getBoundingClientRect().bottom;
var somediscardleft=somediscard.getBoundingClientRect().left;
var somediscardright=somediscard.getBoundingClientRect().right;
// if touch ends on discard
if (someinsertleft>=somediscardleft && someinsertleft<=somediscardright && someinserttop>=somediscardtop && someinserttop<=somediscardbottom) 
{
pressdiscard()
}
}
return
}
var someracktilesleft=sometargetleft-sometargettilenum*Math.floor(scalef*24)
var somehalftileleft=someracktilesleft-Math.floor(scalef*12)
var someinsertindex=8 // default to cover moving too far right

for (var i=0; i<9; i++)
{
if (someinsertleft<=somehalftileleft+(i+1)*Math.floor(scalef*24))
{
someinsertindex=i;
break
}
}

presscard(someinsertindex)



}

// end of code for touch-based card control






function squashplayerhand()
{

var somedisplayhand=displayhands[1]
// next squash hand up (remove blanks)
var somenewplayerhand=[]
for (var i=0; i<somedisplayhand.length; i++)
{
if (somedisplayhand[i]!='blank')
{
somenewplayerhand=somenewplayerhand.concat([somedisplayhand[i]])

}
}
hands[1]=somenewplayerhand.concat([])
// add on a blank in case not 8
if (somenewplayerhand.length==7) {somenewplayerhand=somenewplayerhand.concat(['blank'])}
displayhands[1]=somenewplayerhand
selections[1]=-1
// showallhands()
showselections()
// don't forget to save the changed order in case game interrupted
SetLocalVal('rummyhand2', hands[1])

}

function selectCard(someplayer, someindex)
{

selections[handindex(someplayer)]=someindex

showselections()
if (someplayer==2) 
{
document.getElementById('selectscreen').style.display='none'
document.getElementById('insertscreen').style.display='block'

}
}



function discardselected(someplayer)
{
var thisplayer=handindex(someplayer)
if (currentplayer==someplayer && hands[thisplayer].length==8 && selections[thisplayer]>=0)
{
preventbuttonactions=1  // prevents certain actions during animation

document.getElementById('selectscreen').style.display='none'
document.getElementById('insertscreen').style.display='none'
document.getElementById('discardscreen').style.display='none'
document.getElementById('stockscreen').style.display='none'

premovehand=displayhands[thisplayer].concat([])
var thisindex=selections[thisplayer]
var thiscard=displayhands[thisplayer][thisindex]
if (equalcards(thiscard, unavailablefordiscard[0])==false)
{
discardpile=addhead(thiscard, discardpile)
hands[thisplayer]=removeonecard(thiscard, hands[thisplayer])
displayhands[thisplayer]=discardonecard(thiscard, displayhands[thisplayer])


notemove(turnnum, someplayer, someplayer, 3, thiscard)
unavailablefordiscard=[[-1, -1]]
squashplayerhand()
checktocontinue(thiscard, [1, thisindex], [2,0])
}
else
{
myalert('Card selected from discard pile - discard not allowed')


}
}

}



function discardcomputerselection(thisindex)
{
preventbuttonactions=1  // prevents certain actions during animation

var thisplayer=0
var thiscard=hands[thisplayer][thisindex]
discardpile=addhead(thiscard, discardpile)

hands[thisplayer]=removeonecard(thiscard, hands[thisplayer])
displayhands[thisplayer]=discardonecard(thiscard, displayhands[thisplayer])


notemove(turnnum, 1, 1, 3, thiscard)
var somecard
if (showcomputercards==0) {somecard='back'} else {somecard=thiscard}
checktocontinue(somecard, [0, thisindex], [2, 0])

}

function removeonecard(somecard, somearray)
{
var index=ithitem(somecard, somearray)


return removeElement(index, somearray)

}

function discardonecard(somecard, somearray)
{
var index=ithitem(somecard, somearray)

var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(["blank"].concat(end))

}

function ithitem(someitem, somearray)
{
var someindex=-1
for (var i=0; i<somearray.length; i++)
{
if (somearray[i][0]==someitem[0] && somearray[i][1]==someitem[1])
{
someindex=i
}
}
return someindex
}

function pressdiscard()
{
var thisplayer=handindex(currentplayer)
if (hands[thisplayer].length == 7)
{
selecttopdiscard()
}
else
{
discardselected(2)
}
}


function selecttopdiscard()
{
document.getElementById('selectscreen').style.display='none'
document.getElementById('insertscreen').style.display='none'
document.getElementById('discardscreen').style.display='none'
document.getElementById('stockscreen').style.display='none'

var thisplayer=handindex(currentplayer)
if (hands[thisplayer].length == 7)
{
var topcard=discardpile[0]
rummylastmove=[0].concat(topcard)
hands[thisplayer]=hands[thisplayer].concat([topcard])
insertdisplayhand(thisplayer, topcard)
discardpile=tailarray(discardpile)
notemove(turnnum, currentplayer, 3, currentplayer, topcard)
unavailablefordiscard=[topcard]
if (discardpile.length > 0)
{
// note that this move reveals a new top card in the discard pile - assuming non-empty
notemove(turnnum, currentplayer, 3, 3, discardpile[0])
}

savethestate([1, currentplayer, 1])

if (discardpile.length==0) 
{
redrawcardifneeded(2, 0, 'emptypile', [])
}
else
{
redrawcardifneeded(2, 0, discardpile[0], [])
}
changetextvalue('discardtotal', (document.getElementById('discardtotal').innerHTML*1)-1)
showthecardmove(topcard, [2,0], [currentplayer-1, 7], 'continuegame()')

}
}



var remainingdeals
function animatedeal(someplayer)
{

preventbuttonactions=1  // prevents certain actions during animation
messagedisplay(playernames[someplayer][0]+' dealing')
remainingdeals=[]
for (var i=0; i<7; i++)
{
remainingdeals=remainingdeals.concat([[1-someplayer, i], [someplayer, i]])
}
animatedeal2()
}

function animatedeal2()
{
if (remainingdeals.length>0)
{
var somehead=remainingdeals[0]
remainingdeals=remainingdeals.slice(1)
showonedealcardmove(somehead)
}
else
{
changetextvalue('stocktotal', (document.getElementById('stocktotal').innerHTML*1)-1)

showthecardmove('back', [2,1], [2,0], 'followdeal()')
}
}

function followdeal()
{
changetextvalue('discardtotal', (document.getElementById('discardtotal').innerHTML*1)+1)

redrawcardifneeded(2, 0, discardpile[0], discardpile[0])
if (rummygametype==1 && GetLocalList('rummystatus')[1]==2)
{
if (timer != null) {clearTimeout(timer)}
timer= setTimeout('waitforplayertoconfirm()', 1000)
}
else
{
continuegame()
}
}

function showonedealcardmove(somepos)
{
changetextvalue('stocktotal', (document.getElementById('stocktotal').innerHTML*1)-1)

showthecardmove('back', [2, 1], somepos, 'showbackdeal(['+somepos+'])')
}

function showbackdeal(somepos)
{
redrawcardifneeded(somepos[0], somepos[1], 'back', [])
animatedeal2()
}


var moveintpos
function showthecardmove(somecard, somesourcepos, sometargetpos, somecommand)
{
moveintpos=[]
var somey1=cardpositions[somesourcepos[0]][somesourcepos[1]][0]
var somex1=cardpositions[somesourcepos[0]][somesourcepos[1]][1]

var somey2=cardpositions[sometargetpos[0]][sometargetpos[1]][0]
var somex2=cardpositions[sometargetpos[0]][sometargetpos[1]][1]
var someN=25
for (var i=0; i<someN+1; i++)
{
moveintpos[i]=[Math.floor(somey1+i*(somey2-somey1)/someN), Math.floor(somex1+i*(somex2-somex1)/someN)]
}
changetextvalue('movecardimage', imagefor(somecard))
carryoutthecardmoves(somecommand)

}

var movetimer
function carryoutthecardmoves(somecommand)
{
if (moveintpos.length>0)
{
var somey=moveintpos[0][0]
var somex=moveintpos[0][1]
moveintpos=moveintpos.slice(1)
document.getElementById("movecard").style.display="block"
document.getElementById("movecard").style.top=somey+'px'
document.getElementById("movecard").style.left=somex+'px'
if (movetimer != null) {clearTimeout(movetimer)}
movetimer= setTimeout('carryoutthecardmoves("'+somecommand+'")', 20)
}
else
{
document.getElementById("movecard").style.display="none"
eval(somecommand)
}
}


function selecttopstock()
{
document.getElementById('selectscreen').style.display='none'
document.getElementById('insertscreen').style.display='none'
document.getElementById('discardscreen').style.display='none'
document.getElementById('stockscreen').style.display='none'


var thisplayer=handindex(currentplayer)
rummylastmove=[1]
if (hands[thisplayer].length == 7)
{
var topcard=thepack[0]


hands[thisplayer]=hands[thisplayer].concat([topcard])
insertdisplayhand(thisplayer, topcard)

thepack=tailarray(thepack)
notemove(turnnum, currentplayer, 4, currentplayer, topcard)
unavailablefordiscard=[[-1, -1]]
var somepic='back'
var somecommand='continuegame()'
if (thepack.length == 0)
{
transferdiscardtopack()
somepic='emptypile'
somecommand='showtransferandcontinue()'
}
redrawcardifneeded(2, 1, somepic, [])

savethestate([1, currentplayer, 1])
changetextvalue('stocktotal', (document.getElementById('stocktotal').innerHTML*1)-1)
showthecardmove('back', [2,1], [currentplayer-1, 7], somecommand)


}
}

function showtransferandcontinue()
{
changetextvalue('discardtotal', 1)

showthecardmove('back', [2,0], [2,1], 'informtransfercontinuegame()')

}

function informtransfercontinuegame()
{
changetextvalue('stocktotal', thepack.length)

myalert("The last card in the stock pile was taken, so a new stockpile has been formed by taking and shuffling all the cards in the discard pile, except the top one.")

}


function transferdiscardtopack()
{
var bottomdiscardpack=tailarray(discardpile)
thepack=shufflearray(shufflearray(bottomdiscardpack))
discardpile=[headarray(discardpile)]
for (var i=0; i<thepack.length; i++)
{
notemove(turnnum, currentplayer,3, 4, thepack[i])
}
// 
}



function messagedisplay(messagetext)
{
changetextvalue('statusmessage', messagetext)

}

function checktocontinue(somediscard, somestartpos, somedestpos)
{
var playernowgoing=currentplayer
if (currentplayerwon()==true)
{
rummyscores[currentplayer-1]++
savethestate([2, currentplayer])
}
else
{

turnnum++
changeplayer()
// note - currentplayer now the new player!
savethestate([1, currentplayer, 0])
}
var somecard
var somecardlist
if (playernowgoing==2)
{
for (var i=0; i<8; i++)
{
somecard=premovehand[i]
if (somecard.length==2) {somecardlist=somecard} else {somecardlist=[]}
redrawcardifneeded(playernowgoing-1, i, somecard, somecardlist)
}
}
redrawcardifneeded(playernowgoing-1, somestartpos[1], 'blank', [])
showthecardmove(somediscard, somestartpos, somedestpos, 'animatesquash('+(playernowgoing-1)+', '+somestartpos[1]+')')


}

function animatesquash(someplayer, someindex)
{
redrawcardifneeded(2, 0, discardpile[0], discardpile[0])

changetextvalue('discardtotal', (document.getElementById('discardtotal').innerHTML*1)+1)

var somestarthand=hands[someplayer].slice(0, someindex).concat(['blank']).concat(hands[someplayer].slice(someindex))
var somefinalhand=hands[someplayer].concat(['blank'])
somecommand='continuegame()'
animatehandmoves(someplayer, somestarthand, somefinalhand, 'redrawhandcontinuegame('+someplayer+')')

}

function redrawhandcontinuegame(someplayer)
{

if (someplayer==1) // don't need to do this for system in one player game
{
somehand=hands[someplayer]
for (var i=0; i<somehand.length; i++)
{
redrawcardifneeded(someplayer, i, somehand[i], somehand[i])

}
redrawcardifneeded(someplayer, 7, 'blank', 'blank')
redrawcardifneeded(2,0,discardpile[0], discardpile[0])
}
dealwithadbreak()

}


function currentplayerwon()
{

var currentstate
currentstate=determinecardstatecurrentplayer()

var handscore=findhandscore(currentstate)

if (handscore[0]==7) {return true} else {return false}


}


var timer = null
var unavailablefordiscard
function computerselect(discardorstock)
{
unavailablefordiscard=[]
if (discardorstock=="stock") {selecttopstock()} else {unavailablefordiscard=[discardpile[0]]; selecttopdiscard()}



// computerdiscard(unavailablefordiscard)

}

function computerdiscard()
{

var currentstate=determinecardstate()
if (discardpile.length>0)
{
var topdiscardcard=discardpile[0]
currentstate[topdiscardcard[0]][topdiscardcard[1]] = 3 // inform computer of top discard card (no longer available)
}
for (var i=0; i<7; i++) // confirm computer's current hand in case not aware
{
currentstate[hands[0][i][0]][hands[0][i][1]] = 1
}
// difference - below looks crucial, including time completetimedcomputerdiscard
// var cardtodiscard = determinecomputerdiscard(hands[0], unavailablefordiscard, currentstate)
determinecomputerdiscard(hands[0], unavailablefordiscard, currentstate)
}
// timed
function completetimedcomputerdiscard(cardtodiscard)
{
// messagedisplay('I discard '+cardtextdesc(hands[0][cardtodiscard][0], hands[0][cardtodiscard][1])+'.')
if (timer != null) {clearTimeout(timer)}
var command='discardcomputerselection('+cardtodiscard+')'

timer= setTimeout(command, 2000)

}

function carryoutcomputerturn()
{

var currentstate=determinecardstate()
// alert(currentstate)
var topdiscardcard=discardpile[0]
currentstate[topdiscardcard[0]][topdiscardcard[1]] = 5 // inform computer of top discard card - available

for (var i=0; i<7; i++) // and confirm computer's current hand in case not aware
{
currentstate[hands[0][i][0]][hands[0][i][1]] = 1
}

determinecomputerselection(topdiscardcard, currentstate)
}

// timed
function completetimedcarryoutcomputerturn(discardorstock)
{
// messagedisplay('I take from '+discardorstock+' pile')

if (timer != null) {clearTimeout(timer)}

var command='computerselect("'+discardorstock+'")'

timer= setTimeout(command, 2000)
}


function determinecardstate()
{

var packstate=[]
for (var cardnum=0; cardnum<13; cardnum++)
{
packstate[cardnum]=[]
for (var suit=0; suit<4; suit++)
{

packstate[cardnum][suit]=4
}
}

var turnmemory=0
var turnrecord
var turncard
if (computermemory==0) {turnmemory=turnnum}
if (computermemory==1) {turnmemory=turnnum-5}
if (computermemory==2) {turnmemory=turnnum-20}
if (computermemory==3) {turnmemory=0}
for (var i=0; i<moverecord.length; i++)
{
turnrecord=moverecord[i]
if (turnrecord[0] < turnmemory) {true} else
{
if (turnrecord[3] == 1) {packstate[turnrecord[4][0]][turnrecord[4][1]]=1} 
if (turnrecord[3] == 2 && turnrecord[2] == 3) {packstate[turnrecord[4][0]][turnrecord[4][1]]=2} 
if (turnrecord[3] == 3) {packstate[turnrecord[4][0]][turnrecord[4][1]]=3} 
if (turnrecord[3] == 4) {packstate[turnrecord[4][0]][turnrecord[4][1]]=4} 

}
}
return packstate

}

function determinecardstatecurrentplayer()
{

var packstate=[]
for (var cardnum=0; cardnum<13; cardnum++)
{
packstate[cardnum]=[]
for (var suit=0; suit<4; suit++)
{

packstate[cardnum][suit]=3
}
}

var thishand=hands[currentplayer-1]

for (var i=0; i<7; i++)
{
packstate[thishand[i][0]][thishand[i][1]]=1
}


return packstate
}



function displaycomputermemory(somepack)
{
var alerttext=''
var carddesc=''
var cardloc=0
var cardlocdesc=''
for (var cardnum=0; cardnum<13; cardnum++)
{
for (var suit=0; suit<4; suit++)
{
cardloc=somepack[cardnum][suit]
if (cardloc != 4)
{


carddesc=cardtextdesc(cardnum, suit)
if (cardloc == 1) {cardlocdesc='Computer, '}
if (cardloc == 2) {cardlocdesc='Opponent, '}
if (cardloc == 3) {cardlocdesc='Discard, '}

alerttext=alerttext+' '+carddesc+': '+cardlocdesc

}
}
}
// alert(alerttext)
}

var decision
var handscore
function determinecomputerselection(topdiscardcard, thecurrentstate)
{
var currentstate=copypack(thecurrentstate)
decision='stock'
handscore=findhandscore(currentstate)
var possibles=handscore[2]
currentstate[topdiscardcard[0]][topdiscardcard[1]]=1

bestscoreusingtopdiscard(hands[0], currentstate)
}
// timed
function completetimeddeterminecomputerselection()
{
var handscore2=maxscore
if (handscore2[0]>handscore[0]) {decision='discard'}
if (handscore[0]>=4 && handscore[0]==handscore2[0] && handscore2[2].length > handscore[2].length) {decision='discard'}
// so, if discard gives an increase in total score, select it
// if current score 4 or above, select discard even if no overall increase in total, but it gives an increase in cards that can be selected to complete

completetimedcarryoutcomputerturn(decision)
}

function cardtextdescs(somearray)
{
var sometext=''
for (var i=0; i<somearray.length; i++)
{
sometext=sometext+', '+cardtextdesc(somearray[i][0], somearray[i][1])
}
return sometext
}



var discardable
var newmax
var thescorearray
var maxscore
var maxscorenum
var theglobalcurrentstate
var throwindex

function bestscoreusingtopdiscard(handarray, currentstate)
{
discardable=handarray
newmax=false
thescorearray=[]
maxscore=[0, [], [], 0, [], []]
maxscorenum=0
theglobalcurrentstate=currentstate


if (timer != null) {clearTimeout(timer)}

timer= setTimeout("completetimedbestscoreusingtopdiscard(0)", 1)

}

// timed
function completetimedbestscoreusingtopdiscard(j)
{
var somecard
var somescore
var someoverallscore
var thisscorenum
var currentstate=theglobalcurrentstate
if (j<discardable.length)
{

newmax=false
somecard=discardable[j]

someoverallscore=scorewithcardthrown(somecard, currentstate)

thisscorenum=someoverallscore[0]*100000+1000*someoverallscore[2].length+someoverallscore[3]*100+someoverallscore[5].length
if (thisscorenum>maxscorenum) {newmax=true}
if (newmax==true) {maxscore=someoverallscore; throwindex=j; maxscorenum=thisscorenum}

if (timer != null) {clearTimeout(timer)}

timer= setTimeout("completetimedbestscoreusingtopdiscard("+(j+1)+")", 1)

}
else
{
somecard=discardable[throwindex]
thescorearray=thescorearray.concat(['\n<BR>', cardtextdesc(somecard[0], somecard[1]), 'Score: ', maxscorenum, ' Cards: ', cardtextdescs(maxscore[2]), melddescs(maxscore[1])])


if (timer != null) {clearTimeout(timer)}

timer= setTimeout("completetimeddeterminecomputerselection()", 1)

}
}


function melddescs(somearray)
{
var sometext=[]
for (var i=0; i<somearray.length; i++)
{
sometext=sometext.concat(['<BR>', somearray[i][0][0], cardtextdescs(somearray[i][0][1]), somearray[i][1][0], cardtextdescs(somearray[i][1][1])])
}
return sometext
}


var topcombo
var thehandarray
var thecurrentstateglobal
function determinecomputerdiscard(handarray, unavailablefordiscard, currentstate)
{
discardable=[]
if (unavailablefordiscard.length==0) {discardable=handarray}
else
{
for (var i=0; i<handarray.length; i++)
{
if (equalcards(unavailablefordiscard[0], handarray[i])==false) {discardable=discardable.concat([handarray[i]])}
}
}

thehandarray=handarray
thecurrentstateglobal=currentstate
newmax=false
thescorearray=[]
maxscore=[0, 0, 0, 0]
maxscorenum=0
topcombo=[]

if (timer != null) {clearTimeout(timer)}

timer= setTimeout("completetimeddeterminecomputerdiscard(0)", 1)
}

// timed
function completetimeddeterminecomputerdiscard(j)
{
var handarray=thehandarray
var currentstate=copypack(thecurrentstateglobal)
var somecard
var somescore
var someoverallscore
var thisscorenum

if (j<discardable.length)
{
newmax=false
somecard=discardable[j]

someoverallscore=scorewithcardthrown(somecard, currentstate)

// alert([cardtextdescs([somecard]), someoverallscore[0], someoverallscore[2].length])
thisscorenum=someoverallscore[0]*100000+1000*someoverallscore[2].length+someoverallscore[3]*100+someoverallscore[5].length
if (thisscorenum>maxscorenum) {newmax=true}
if (newmax==true) {topcombo=someoverallscore[1]; maxscore[0]=someoverallscore[0]; maxscore[1]=someoverallscore[2].length; maxscore[2]=someoverallscore[3]; maxscore[3]=someoverallscore[5].length; throwindex=j; maxscorenum=thisscorenum}
// thescorearray=thescorearray.concat(['\n<BR>', cardtextdesc(somecard[0], somecard[1]), 'Score: ', thisscorenum, ' Cards: ', cardtextdescs(someoverallscore[2])])
if (timer != null) {clearTimeout(timer)}

timer= setTimeout("completetimeddeterminecomputerdiscard("+(j+1)+")", 1)
}
else
{
somecard=discardable[throwindex]
var returnindex
for (var k=0; k<handarray.length; k++)
{
if (equalcards(somecard, handarray[k])==true) {returnindex=k}
}

displayonetopcombo(topcombo, somecard)
// alert(['Discard: ', cardtextdescs([somecard])])
if (timer != null) {clearTimeout(timer)}

timer= setTimeout("completetimedcomputerdiscard("+returnindex+")", 1)
}
}



function displayonetopcombo(topcombo, thediscard)
{
var cardsinhand=hands[0]
var begcarddisplay=[]
var endcarddisplay=[]
var incombosanddiscard=[]


if (topcombo.length>0)
{
var allcombos=topcombo[0][0][1].concat(topcombo[0][1][1])


for (var i=0; i<allcombos.length; i++)
{
if (ismember(allcombos[i], cardsinhand)==true)
	{
	begcarddisplay=begcarddisplay.concat([allcombos[i]])
	}
}
// alert(['beg', begcarddisplay])
incombosanddiscard=begcarddisplay.concat([thediscard])
for (var j=0; j<cardsinhand.length; j++)
{
if (ismember(cardsinhand[j], incombosanddiscard)==false)
	{
	endcarddisplay=[cardsinhand[j]].concat(endcarddisplay)
	}

}
// alert(['end', endcarddisplay])
displayhands[0]= begcarddisplay.concat(endcarddisplay.concat([thediscard]))
} // end if

}



function scorewithcardthrown(somecard, currentstate)
{
// alert(somecard)

var somearray=copypack(currentstate)
// alert([currentstate, somearray])
somearray[somecard[0]][somecard[1]]=3
// alert([currentstate, somearray])
return findhandscore(somearray)

}

function copypack(somepack)
{
var someresult=[]
for (var i=0; i<13; i++)
{
someresult[i]=[]
for (var j=0; j<4; j++)
{
someresult[i][j]=somepack[i][j]
}
}
return someresult
}

function findhandscore(somearray)
{

var handscorearray=createmeldpatterns(somearray)

var sortedscoresarray=putscoresinbuckets(handscorearray)

var combosarray=findmaxlegitcombos(sortedscoresarray)
return combosarray
}

function putscoresinbuckets(somearray)
{
// buckets for scores of -1, 0, 1, 2, 3, (4) for 3- and 4-card melds
var buckets=[[[], [], [], [], []], [[], [], [], [], [], []]]
var somescorearray
var sometotalscore
for (var i=0; i<2; i++)
{
for (var j=0; j<somearray[i].length; j++)
{
somescorearray=somearray[i][j]
sometotalscore=somescorearray[3]
buckets[i][sometotalscore+1]=buckets[i][sometotalscore+1].concat([somescorearray])
}

}
return buckets
}

function findmaxlegitcombos(sortedscoresarray)
{

var combopatterns=[[7, [[3, 4]]], [6, [[3, 3], [2, 4]]], [5, [[3, 2], [2, 3], [1, 4]]], [4, [[3, 1], [2, 2], [1, 3], [0, 4]]], [3, [[3, 0], [2, 1], [1, 2], [0, 3]]], [2, [[2, 0], [1, 1], [0, 2]]], [1, [[1, 0], [0, 1]]], [0, [[0, 0]]]]

var totalscore = 0
var scorepattern
var patternarray
var combosandrequired=[[], []]

for (var sp=0; sp<combopatterns.length; sp++)
{

scorepattern=combopatterns[sp]
totalscore=scorepattern[0]
patternarray=scorepattern[1]

combosandrequired=determinevalidscorecombos(totalscore, 1, sortedscoresarray, patternarray)


if (combosandrequired[0].length>0) {break}  // break out of loop once you come across a non-empty set of valid combinations (as we're working down from 7)
}
var secondscore=totalscore-1
var secondresult=[[], []]

if (secondscore>-1) {secondresult=determinevalidscorecombos(secondscore, 2, sortedscoresarray, combopatterns[7-secondscore][1])}
return [totalscore, combosandrequired[0], combosandrequired[1], secondscore, secondresult[0], secondresult[1]]
}

function determinevalidscorecombos(sometotal, someorder, sortedscoresarray, patternarray)
{
var index3
var index4
var array3
var array4
var combos=[]
var required=[]
for (var i=0; i<patternarray.length; i++)
{
index3=patternarray[i][0]+1
index4=patternarray[i][1]+1
array3=sortedscoresarray[0][index3]
array4=sortedscoresarray[1][index4]
combos=combos.concat(setofvalidcombos(sometotal, array3, array4))
if (sometotal<3 && combos.length>0) { break}
}

if (combos.length>0)
{
required=setofuniquecards(combos)
}
return [combos, required]
}



function setofvalidcombos(sometotal, array3, array4)
{
var combos=[]
var foundone=false
for (var i=0; i<array3.length; i++)
{
for (var j=0; j<array4.length; j++)
{
if (havenooverlaps(array3[i][0][1], array3[i][1], array4[j][0][1], array4[j][1]) == true) // checks to see if cards in melds overlap
{

combos=combos.concat([[array3[i], array4[j]]])
foundone=true


}
if (sometotal<3 && foundone==true) { break}


}
if (sometotal<3 && foundone==true) {break}

}
return combos
}

function havenooverlaps(type1, array1, type2, array2)
// type1 and type2 will be either 'same' or 'run'
{
var suit1=array1[0][1]
var suit2=array2[0][1]
var first1=array1[0][0]
var first2=array2[0][0]
nooverlapfound=true
if (type1=='run' && type2=='run' && suit1 == suit2)
{
if (first1+2>=first2 && first1 <= first2+3) {nooverlapfound=false}
if (first1==11 && first2==0) {nooverlapfound=false} // deals with Q-A 3-meld
if (first1==0 && first2==10) {nooverlapfound=false} // deals with J-A 4-meld
}


if (type1=='same' && type2=='same' && first1 == first2)
{nooverlapfound=false}


if (type1=='run' && type2=='same')
{
if (first1 <= first2 && first1+2 >= first2) {nooverlapfound=false}
if (first1==11 && first2==0) {nooverlapfound=false} // deals with Q-A 3-meld and 4 Aces
}


if (type1=='same' && type2=='run')
{
secondsuit=array1[1][1]
thirdsuit=array1[2][1]
if (suit1==suit2 || secondsuit == suit2 || thirdsuit== suit2)
{
if (first2 <= first1 && first2+3 >= first1) {nooverlapfound=false}
if (first2==10 && first1==0) {nooverlapfound=false} // deals with J-A 4-meld and 3 Aces
}
}

return nooverlapfound
} // end function

function copylist(somepairs)
{
var somereturn=[]
for (var i=0; i<somepairs.length; i++)
{
somereturn[i]=[somepairs[i][0], somepairs[i][1]]
}
return somereturn
}



function runsort()
{
if (currentplayer==1 || preventbuttonactions==1 || rummystatus[0]!=1) {return}
sortcards()
}


function sortwin(somecards) // special sort to look for a run and a samerank, one 3 and one 4 card melds
{
var someresult1
var someresult2
// look for 4 same rank and 3 run
someresult1=findsamerank(copylist(somecards), 4)
if (someresult1[0].length>0) 
{
someresult2=findruns(someresult1[1], 3)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}
// look for 4 same rank aces high and 3 run
someresult1=findsamerank(copylist(somecards), 4)
if (someresult1[0].length>0) 
{
someresult2=findrunsaceshigh(someresult1[1], 3)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}


// look for 3 same rank and 4 run
someresult1=findsamerank(copylist(somecards), 3)
if (someresult1[0].length>0) 
{
someresult2=findruns(someresult1[1], 4)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}
// look for 3 same rank  and 4 run aces high
someresult1=findsamerank(copylist(somecards), 3)
if (someresult1[0].length>0) 
{
someresult2=findrunsaceshigh(someresult1[1], 4)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}

// look for 4 run and 3 samerank
someresult1=findruns(copylist(somecards), 4)
if (someresult1[0].length>0) 
{
someresult2=findsamerank(someresult1[1], 3)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}
// look for 4 run aces high and 3 samerank
someresult1=findrunsaceshigh(copylist(somecards), 4)
if (someresult1[0].length>0) 
{
someresult2=findsamerank(someresult1[1], 3)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}

// look for 3 run and 4 samerank
someresult1=findruns(copylist(somecards), 3)
if (someresult1[0].length>0) 
{
someresult2=findsamerank(someresult1[1], 4)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}
// look for 3 run aces high  and 4 samerank
someresult1=findrunsaceshigh(copylist(somecards), 3)
if (someresult1[0].length>0) 
{
someresult2=findsamerank(someresult1[1], 4)
if (someresult2[0].length>0)
return someresult1[0].concat(someresult2[0])
}


return []
}


function sortcards()
{
var someplayer=currentplayer-1
var somehand=copylist(hands[someplayer]).sort(ranksort)
var somestarthand=copylist(hands[someplayer])
var someresult=[]
if (somehand.length==7) // need special sort for possible win to look for a run and a samerank (one 4 one 3)
{

someresult= sortwin(copylist(somehand))
}
if (someresult.length==0) // didn't find a winning hand of run and samerank
{
var somegoods=[]
for (var i=4; i>=2; i--)
{
someresult=findsamerank(somehand, i)
somegoods=somegoods.concat(someresult[0])
somehand=someresult[1]
someresult=findruns(somehand, i)
somegoods=somegoods.concat(someresult[0])
somehand=someresult[1]
someresult=findrunsaceshigh(somehand, i)
somegoods=somegoods.concat(someresult[0])
somehand=someresult[1]

}
hands[someplayer]=somegoods.concat(somehand.sort(ranksort))
}
else
{
hands[someplayer]=someresult
}
displayhands[someplayer]=copylist(hands[someplayer])
if (displayhands[someplayer].length==7) {displayhands[someplayer]=displayhands[someplayer].concat(['blank'])}
var somefinalhand=hands[someplayer].concat([])
selections[someplayer]=-1
showselections()
// SetLocalVal('rummyhand'+currentplayer, hands[someplayer])
savethestate(GetLocalList('rummystatus'))
var somecommand
if (someplayer==0)
{
somecommand='showthencomputerdiscard()'
}
else
{
document.getElementById('selectscreen').style.display='none'
document.getElementById('insertscreen').style.display='none'
document.getElementById('discardscreen').style.display='none'
document.getElementById('stockscreen').style.display='none'
somecommand='allowselection()'
}
if (rummystatus[0]==2) {somecommand='completewin()'} // special case for when game is over

animatehandmoves(someplayer, somestarthand, somefinalhand, somecommand)
}

function showthencomputerdiscard()
{
showallhands()
savethestate([1, 1, 1])
computerdiscard()
}

function allowselection()
{
if (rummystatus[0]==1)
{
document.getElementById('selectscreen').style.display='block'
document.getElementById('discardscreen').style.display='block'
if (rummystatus[2]==0)
{
document.getElementById('stockscreen').style.display='block'
}
}
showallhands()
preventbuttonactions=0  // allows certain actions following animation

}

function animatehandmoves(someplayer, somestarthand, somefinalhand, somecommand)
{
preventbuttonactions=1  // prevents certain actions during animation

var somechanges=[]
var somenewpos
for (var i=0; i<somestarthand.length; i++)
{
somenewpos=newposition(somestarthand[i], somefinalhand)
if (i!=somenewpos && somestarthand[i]!='blank')
{
somechanges=somechanges.concat([[somestarthand[i], i, somenewpos]])
}
}
if (somechanges.length>0)
{
showhandmoves(someplayer, somechanges, somecommand)
}
else
{
eval(somecommand)
}
}

var handmoveintpos
function showhandmoves(someplayer, somechanges, somecommand)
{
handmoveintpos=[]
var someinitialpositions=[]
var somey1
var somex1
var somey2
var somex2
var somecard
for (var i=0; i<somechanges.length; i++)
{
somey1=cardpositions[someplayer][somechanges[i][1]][0]
somex1=cardpositions[someplayer][somechanges[i][1]][1]

somey2=cardpositions[someplayer][somechanges[i][2]][0]
somex2=cardpositions[someplayer][somechanges[i][2]][1]
someinitialpositions[i]=[somey1, somex1, somey2, somex2]
somecard=somechanges[i][0]
if (someplayer==0 && showcomputercards==0) {somecard='back'}
changetextvalue('handmovecardimage'+i, imagefor(somecard))
redrawcardifneeded(someplayer, somechanges[i][1], 'blank', [])

}
var someN=25
for (var i=0; i<someN+1; i++)
{
handmoveintpos[i]=[]
for (var j=0; j<somechanges.length; j++)
{
somey1=someinitialpositions[j][0]
somex1=someinitialpositions[j][1]
somey2=someinitialpositions[j][2]
somex2=someinitialpositions[j][3]
handmoveintpos[i][j]=[Math.floor(somey1+i*(somey2-somey1)/someN), Math.floor(somex1+i*(somex2-somex1)/someN)]
}

}
carryoutthehandcardmoves(somecommand)

}


function carryoutthehandcardmoves(somecommand)
{
if (handmoveintpos.length>0)
{
var somey
var somex
for (var i=0; i<handmoveintpos[0].length; i++)
{
somey=handmoveintpos[0][i][0]
somex=handmoveintpos[0][i][1]
document.getElementById("handmovecard"+i).style.display="block"
document.getElementById("handmovecard"+i).style.top=somey+'px'
document.getElementById("handmovecard"+i).style.left=somex+'px'
}
handmoveintpos=handmoveintpos.slice(1)
if (movetimer != null) {clearTimeout(movetimer)}
movetimer= setTimeout('carryoutthehandcardmoves("'+somecommand+'")', 20)
}
else
{
for (var i=0; i<8; i++)
{
document.getElementById("handmovecard"+i).style.display="none"

}
eval(somecommand)
}
}








function newposition(somecard, somehand)
{
for (var i=0; i<somehand.length; i++)
{
if (equalcards(somecard, somehand[i])==true)
{
return i
}
}
}

function findsamerank(somecards, somenum)
{
var somesort=somecards.sort(ranksort)
var somefound=[]
var someremainder=[]
var somerank=-1
var somegroup=[]
for (var i=0; i<somesort.length; i++)
{
if (somesort[i][0]==somerank)
{
somegroup=somegroup.concat([somesort[i]])
if (somegroup.length==somenum)
{
somefound=somefound.concat(somegroup)
somegroup=[]
somerank=-1
}
}
else
{
somerank=somesort[i][0]
someremainder=someremainder.concat(somegroup)
somegroup=[somesort[i]]
}
}

return [somefound, someremainder.concat(somegroup)]

}



function findrunsaceshigh(somecards, somenum)
{
var someresult=findruns(replaceranks(somecards, 0, 13), somenum)
return [replaceranks(someresult[0], 13, 0), replaceranks(someresult[1], 13, 0)]
}

function replaceranks(somecards, oldnum, newnum)
{
var someresult=[]
for (var i=0; i<somecards.length; i++)
{
if (somecards[i][0]==oldnum) {someresult[i]=[newnum, somecards[i][1]]} else {someresult[i]=somecards[i]}
}
return someresult
}

function findruns(somecards, somenum)
{

var somesort=somecards.sort(suitsort)
var somefound=[]
var someremainder=[]
var somerank=-2
var somesuit=-1
var somegroup=[]
for (var i=0; i<somesort.length; i++)
{
if (somesort[i][1]==somesuit && somesort[i][0]==somerank+1)
{
somegroup=somegroup.concat([somesort[i]])
somerank++
if (somegroup.length==somenum)
{
somefound=somefound.concat(somegroup)
somegroup=[]
somerank=-2
somesuit=-1
}
}
else
{
somerank=somesort[i][0]
somesuit=somesort[i][1]
someremainder=someremainder.concat(somegroup)
somegroup=[somesort[i]]
}
}
return [somefound, someremainder.concat(somegroup)]

}


function ranksort(a, b)
{
return a[0]-b[0]
}

function suitsort(a, b)
{
return (100*a[1]+a[0])-(100*b[1]+b[0])
}

/*
function setofvalidcombos(array3, array4)
{
var combos=[]
for (var i=0; i<array3.length; i++)
{
for (var j=0; j<array4.length; j++)
{
if (havenooverlaps(array3[i][1], array4[j][1]) == true) // checks to see if cards in melds overlap
{

combos=combos.concat([[array3[i], array4[j]]])


}
}

}
return combos
}

function havenooverlaps(array1, array2)
{
nooverlapfound=true
for (var i=0; i<array1.length; i++)
{
for (var j=0; j<array2.length; j++)
{
if (equalcards(array1[i], array2[j])==true) {nooverlapfound=false; break}
}

}
return nooverlapfound
}

*/
function equalcards(pair1, pair2)
{
if (pair1[0]==pair2[0] && pair1[1]==pair2[1]) {return true} else {return false}
}

function setofuniquecards(combos)
{
var allcards=[]
for (var i=0; i<combos.length; i++)
{
allcards=allcards.concat(availablecardsin(combos[i][0]).concat(availablecardsin(combos[i][1])))

}
allcards=removeduplicates(allcards)
return allcards
}
 
function availablecardsin(somescorearray)
{
var cardsinmeld=somescorearray[1]
var scoreforcardsinmeld=somescorearray[2]
var someresult=[]
for (var i=0; i<cardsinmeld.length; i++)
{
if (scoreforcardsinmeld[i]==0) {someresult=someresult.concat([cardsinmeld[i]])}
}
return someresult
}
 
function removeduplicates(somearray)
{
var array2=[]
for (var i=0; i<somearray.length; i++)
{
// alert([somearray[i], array2, ismember(somearray[i], array2)])
if (ismember(somearray[i], array2)==false) {array2=array2.concat([somearray[i]])}
}
return array2

}

function ismember(someitem, somearray)
{
var someresult=false
for (var i=0; i<somearray.length; i++)
{
if (equalcards(somearray[i], someitem)==true) {someresult=true; break}

}
return someresult

}


function imageforselected(somecard)
{

var somebaseshape=baseimagefor(somecard)
return '<div style="border:3px solid purple;position:relative;top:0px;left:0px;width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*40)+'px;">'+somebaseshape+'</div>'


}

function imagefor(somecard)
{
var somebaseshape=baseimagefor(somecard)
var somereturn

somereturn='<div style="position:absolute;top:0px;left:0px;width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*40)+'px;background-color:silver"><div style="position:absolute;top:2px;left:2px;width:'+(Math.floor(scalef*20)-4)+'px;height:'+(Math.floor(scalef*40)-4)+'px;background-color:silver">'+somebaseshape+'</div></div>'


return somereturn
}

function baseimagefor(somecard)
{

var somebaseshape
if (somecard=='back')      {somebaseshape='<table align="center" border="0" cellpadding="0" cellspacing="0" valign=middle><tr><td><img src="backtop.gif" style="display:block" width="'+(Math.floor(scalef*20)-4)+'" height="'+(Math.floor(scalef*20)-2)+'"></td></tr><tr><td><img src="backbottom.gif" style="display:block" width="'+(Math.floor(scalef*20)-4)+'" height="'+(Math.floor(scalef*20)-2)+'"></td></tr></table>'}  

if (somecard=='blank')     {somebaseshape='<table align="center" border="0" cellpadding="0" cellspacing="0" valign=middle><tr><td width="'+(Math.floor(scalef*20)-4)+'" height="'+(Math.floor(scalef*20)-2)+'" style="color:white;background-color:silver;text-align:center" valign=middle>&nbsp;</td></tr><tr><td width="'+(Math.floor(scalef*20)-4)+'" height="'+(Math.floor(scalef*20)-2)+'" style="background-color:silver">&nbsp;</td></tr></table>'}

if (somecard=='emptypile')     {somebaseshape='<table align="center" border="0" cellpadding="0" cellspacing="0" valign=middle><tr><td width="'+(Math.floor(scalef*20)-4)+'" height="'+(Math.floor(scalef*20)-2)+'" style="color:white;background-color:silver;text-align:center" valign=middle>&nbsp;</td></tr><tr><td width="'+(Math.floor(scalef*20)-4)+'" height="'+(Math.floor(scalef*20)-2)+'" style="background-color:silver">&nbsp;</td></tr></table>'}

if (somecard.length==2) // real card
{
var somenum=somecard[0]+1
if (somenum==1) {somenum='A'}
if (somenum==11) {somenum='J'}
if (somenum==12) {somenum='Q'}
if (somenum==13) {somenum='K'}

var somesuit=somecard[1]
var somesuitpic
if (somesuit==0) {somesuitpic="hearts.gif"}
if (somesuit==1) {somesuitpic="clubs.gif"}
if (somesuit==2) {somesuitpic="diamonds.gif"}
if (somesuit==3) {somesuitpic="spades.gif"}

// somebaseshape='<table border="1" cellpadding="0" cellspacing="0" style="border:1px solid gray"><tbody><tr><td><table align="center" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td style="text-align:center;background-color:white;font-weight:bold;font-size:'+Math.floor(scalef*14)+'px" width="'+Math.floor(scalef*20)+'" height="'+Math.floor(scalef*20)+'">'+somenum+'</td></tr><tr><td style="text-align:center;background-color:white;font-weight:bold;font-size:'+Math.floor(scalef*14)+'px" width="'+Math.floor(scalef*20)+'" height="'+Math.floor(scalef*20)+'" width="'+Math.floor(scalef*20)+'" height="'+Math.floor(scalef*20)+'"><table cellspacing="0" border="0" cellpadding="0" align="center" valign="middle" width="'+Math.floor(scalef*16)+'" height="'+Math.floor(scalef*16)+'"><tr><td><img width="'+Math.floor(scalef*16)+'" height="'+Math.floor(scalef*16)+'" style="display:block" src="'+somesuitpic+'"></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>'
var somewidth=Math.floor(scalef*20)-4
var someheight=Math.floor(scalef*20)-2
somebaseshape='<table align="center" valign="middle" border="0" cellpadding="0" cellspacing="0" ><tr><td style="text-align:center;background-color:white;font-weight:bold;font-size:'+Math.floor(scalef*13)+'px" width="'+somewidth+'" height="'+someheight+'">'+somenum+'</td></tr><tr><td style="text-align:center;background-color:white" width="'+somewidth+'" height="'+someheight+'" valign=middle><img width="'+(somewidth)+'" height="'+(someheight)+'" align=center style="display:block" src="'+somesuitpic+'"></td></tr></table>'
}

return somebaseshape
}



// End from original


/*
 Rummy states
0 = not started
1 = game underway: 1,1 0= system to draw; 1,1,1=system to discard; 1,2 0 = user to draw; 1,2,1=user to discard
2 = game over 2,1 = system won, 2,2=user won


*/

function convertlisttopairs(somelist)
{
var somenumpairs=somelist.length/2
var somepairs=[]
for (var i=0; i<somenumpairs; i++)
{
somepairs[i]=[somelist[2*i], somelist[1+2*i]]
}
return somepairs
}

function showemptyboard()
{
for (var i=0; i<8; i++)
{
redrawcardifneeded(0, i, 'blank', [])
redrawcardifneeded(1, i, 'blank', [])
}
redrawcardifneeded(2, 0, 'blank', [])
redrawcardifneeded(2, 1, 'back', [])

}

function definenamescoloursetc()
{
if (rummygametype==0)
{
playernames=[['Blue', '#8888FF', 'System'], ['Red', '#FF8888', 'Player']]
}
else // rummygametype=1
{
if (rummynametype==0) 
{
playernames=[['Blue', '#8888FF', 'Player'], ['Red', '#FF8888', 'Player']]
}
else
{
playernames=[['Red', '#FF8888', 'Player'], ['Blue', '#8888FF', 'Player']]
}
}
}

var resetadbreakcounter=9
var adbreakcounter
function dealwithadbreak()
{
/*
if (adsrequired==1)
{
adbreakcounter=GetLocalVal('adbreakcounter')*1
adbreakcounter--
if (adbreakcounter<=0)
{
showadbreak()
}
else
{
SetLocalVal('adbreakcounter', adbreakcounter)
continuegame()
}
}
else
{
continuegame()
}
*/
continuegame()

}

function continuegame()
{
// reset some variables
document.getElementById('insertscreen').style.display='none'
document.getElementById('selectscreen').style.display='none'
document.getElementById('discardscreen').style.display='none'
document.getElementById('stockscreen').style.display='none'
document.getElementById('movecard').style.display='none'
document.getElementById('finger').style.display='none'
document.getElementById('lastmove').style.display='none'
changetextvalue('output', '<span style="font-size:1px>&nbsp;</span>')
// document.getElementById('output').style.display='none'

if (document.getElementById('theboard').style.display=='none') {document.getElementById('theboard').style.display='inline'}

if (GetLocalVal('rummystatus')==-1) 
{
newseries(); 
return
}

if (GetLocalVal('rummygametype')==null) {SetLocalVal('rummygametype', 0)}
if (GetLocalVal('rummynametype')==null) {SetLocalVal('rummynametype', 0)}
if (GetLocalVal('rummylastdealer')==null) {SetLocalVal('rummylastdealer', [])}
rummygametype=GetLocalVal('rummygametype')*1
rummynametype=GetLocalVal('rummynametype')*1

definenamescoloursetc()

rummyscores=GetLocalList('rummyscores')

changetextvalue('playersetup0', playernames[0][0])
changetextvalue('playersetup1', playernames[1][0])
changetextvalue('playergametype0', playernames[0][2])
changetextvalue('playergametype1', playernames[1][2])
changetextvalue('playerscore0', rummyscores[0])
changetextvalue('playerscore1', rummyscores[1])
changebgcolor('playersetup0', playernames[0][1])
changebgcolor('playersetup1', playernames[1][1])
changebgcolor('playergametype0', playernames[0][1])
changebgcolor('playergametype1', playernames[1][1])
changebgcolor('playerscore0', playernames[0][1])
changebgcolor('playerscore1', playernames[1][1])




rummystatus=GetLocalList('rummystatus')


if (rummystatus[0]==0  && delayeddealtype==-1) 
{
preventbuttonactions=0

showemptyboard()

changetextvalue('statusmessage', 'Tap Deal button to deal from specific side, or central icon for random deal.')
changetextvalue('stocktotal', 52)
changetextvalue('discardtotal', 0)

showcurrentad()
return
}
// alert(rummystatus)




if (rummystatus[0]==0  && delayeddealtype>0) 
{
preventbuttonactions=0
changetextvalue('stocktotal', 52)
changetextvalue('discardtotal', 0)

showemptyboard()
startnewgame(delayeddealtype)
showcurrentad()

return
}



rummystockpile=GetLocalList('rummystockpile')
rummydiscardpile=GetLocalList('rummydiscardpile')
rummyhand1=GetLocalList('rummyhand1')
rummyhand2=GetLocalList('rummyhand2')
rummyunavailablefordiscard=GetLocalList('rummyunavailablefordiscard')
rummyturnnum=GetLocalVal('rummyturnnum')*1
rummymoverecord=GetLocalList('rummymoverecord')
rummyscores=GetLocalList('rummyscores')
rummylastmove=GetLocalList('rummylastmove')
computermemory=GetLocalVal('rummymemory')*1
showcomputercards=GetLocalVal('rummyshowtopcards')*1

var sometext=''
hands[0]=convertlisttopairs(rummyhand1)
hands[1]=convertlisttopairs(rummyhand2)
displayhands=[["blank", "blank", "blank", "blank", "blank", "blank", "blank", "blank"],["blank", "blank", "blank", "blank", "blank", "blank", "blank", "blank"]]
initializedisplayhands()
thepack=convertlisttopairs(rummystockpile)
discardpile=convertlisttopairs(rummydiscardpile)
unavailablefordiscard=convertlisttopairs(rummyunavailablefordiscard)
// alert(unavailablefordiscard)
turnnum=rummyturnnum
moverecord=[]
var moverecordlength=rummymoverecord.length/6
for (var i=0; i<moverecordlength; i++)
{
moverecord[i]=[rummymoverecord[i*6],rummymoverecord[i*6+1], rummymoverecord[i*6+2],rummymoverecord[i*6+3],[rummymoverecord[i*6+4],rummymoverecord[i*6+5]]]
}


changetextvalue('stocktotal', thepack.length)
changetextvalue('discardtotal', discardpile.length)




if (rummystatus[0]==1) 
{

currentplayer=rummystatus[1]
opponentplayer=3-currentplayer
var somemovetype=rummystatus[2]


if (currentplayer==1 && somemovetype==0)
{
preventbuttonactions=1

if (rummygametype==1) // playing someone else, if so just swap hands and scores around and make current player = 2
{


hands=[hands[1], hands[0]]
rummyscores=[rummyscores[1], rummyscores[0]]
rummynametype=1-rummynametype
savethestate([1,2,0])
if (timer != null) {clearTimeout(timer)}

timer= setTimeout("waitforplayerchange()", 2000)


return
}
// else playing system so system's go
preventbuttonactions=1

selections[1]=-1
// showselections()
showallhands()
showdiscardpile()
showstockpile()
showcurrentad()


unavailablefordiscard=[]
changetextvalue('statusmessage', playernames[0][0]+'\'s turn: choosing whether to draw a card from the Discard or Stock pile.')
if (timer != null) {clearTimeout(timer)}

timer= setTimeout("carryoutcomputerturn()", 200)



return
}
selections[1]=-1
// showselections()
showallhands()
showdiscardpile()
showstockpile()
showcurrentad()


if (currentplayer==1 && somemovetype==1) // must be playing against system
{
preventbuttonactions=1

changetextvalue('statusmessage', playernames[0][0]+'\'s turn: choosing a card to discard.')

if (timer != null) {clearTimeout(timer)}

timer= setTimeout("sortcards()", 2000)


return

}

if (currentplayer==2 && somemovetype==0)
{
preventbuttonactions=0


unavailablefordiscard=[]
changetextvalue('statusmessage', playernames[1][0]+'\'s turn to select: tap the Discard pile or the Stock pile to draw a card.')
document.getElementById('selectscreen').style.display='block'
document.getElementById('discardscreen').style.display='block'
document.getElementById('stockscreen').style.display='block'

if (rummygametype==1 && rummylastmove.length>0)
{
var somelastmove='back'
if (rummylastmove[0]==0) {somelastmove=[rummylastmove[1], rummylastmove[2]]}
changetextvalue('lastmoveimage', imagefor(somelastmove))
document.getElementById('lastmove').style.display='block'

}
return

}

if (currentplayer==2 && somemovetype==1)
{
preventbuttonactions=0

changetextvalue('statusmessage', playernames[1][0]+'\'s turn to discard: Arrange cards, then tap one to select it and tap the Discard pile.')
document.getElementById('selectscreen').style.display='block'
document.getElementById('discardscreen').style.display='block'
return

}

} 

if (rummystatus[0]==2)
{
preventbuttonactions=1
currentplayer=rummystatus[1]
opponentplayer=3-currentplayer

var displaymessage=''
if (rummystatus[1]==1) {displaymessage='<table cellpadding=0 valign=middle align=center border=0  width=75%  bgcolor="'+playernames[0][1]+'" ><tr><td align=center>'+playernames[0][0]+' wins.<br>Start a new game or a new series.</td></tr></table>'} else {displaymessage='<table cellpadding=0 valign=middle align=center border=0 width=75% bgcolor="'+playernames[1][1]+'" ><tr><td align=center>'+playernames[1][0]+' wins<br>Start a new game or a new series.</td></tr></table>'}
messagedisplay(displaymessage)
showcurrentad()
selections[1]=-1
showselections()
showallhands()
showdiscardpile()
showstockpile()

// sort the cards to show the winning melds.  Note: this calls completewin() after sort for rummystatus[0]==2
sortcards()




}

}

function completewin()
{
preventbuttonactions=0
var currentshowcomputercards=showcomputercards
showcomputercards=1
showallhands()
showcomputercards=currentshowcomputercards

}


var displayadnum=0

function openwebpage(someurl)
{
document.location.href=someurl
}

var displayadnum=0
var displayhelptexts=
[
'<table width=100% border=0 bgcolor=cyan  onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="rummyicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*9)+'px"><b>Help</b> gives context-sensitive help.<br><b>New</b> starts a new series of games.<br><b>Deal</b> starts a new game.</td></tr></table>',
'<table width=100% border=0 bgcolor=cyan  onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="rummyicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*9)+'px"><span style="font-weight:bold">TopAccolades</span><br>Apps and web services</td></tr></table>',
'<table width=100% border=0 bgcolor="lightblue" onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> i.compactfun.com</b><br>This app and other apps are also accessible online from many devices at i.compactfun.com</td></tr></table>'

]

var displayadtexts=displayhelptexts

var displayupgradetexts=
[
]

var displayapptexts=
[
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="xword4x4icon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Xword<sup>4x4</sup> - Try the app now</b><br>Great Play & Pass crossword puzzle for up to 4 players. Define your own board layouts!</td></tr></table>',
'<table width=100% border=0 bgcolor="#FF8888" onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="csisherlock144.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>CSI Sherlock -  Try the app now!</b><br>Vic has been killed.  Try to solve who killed Vic, with what, and where, in this great interactive logic puzzle.</td></tr></table>',
'<table width=100% border=0 bgcolor=cyan onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="kublitzcubeicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Kublitz Cube -  Download the app now!</b><br>Separated cubelets let you see/know all sides without turning the puzzle cube.  Guide, tools & notation to help you solve it</td></tr></table>',
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="pegsolitaireicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Peg Solitaire -  Download the app now!</b><br>Play the full puzzle or a cut-down version.  Guide and notation to help you solve and remember the full puzzle</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>31 classic/original games and puzzles in one app: words, numbers, logic, blocks, strategy...</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Rummy, 4-in-a-line, Pentad, Letters & Numbers Games, Turncoat and Yak</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Hangman, WordSearch, Pentad, Linkword Snap and Word Ladder</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Step Challenge, Pyramid Numbers, Sudoku and Numberskull </td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Sudoku, Memory Pairs, Master Code, Mystery Clues and Bidinca </td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Peg Solitaire, Towers of Hanoi, Poker Pentad, Mancala and Code 4x6 </td></tr></table>',
'<table width=100% border=0 bgcolor=cyan onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="bbflogo.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>BrainBoxFun -  Try the app now!</b><br>10 brain-training exercises inc.: memory, verbal comprehension, pattern recognition, word power and mental arithmetic</td></tr></table>'


]

var displaywmltexts=
[
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Dedicate one of our many personal home pages to someone you love for a Birthday, Anniversary, Valentine\'s, Mother\'s Day or Father\'s Day.</td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Our personal web site addresses come in two parts:<br><b><span style="color:#FF0000">Defined by you</span>.<span style="color:green">Supplied by us</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>The parts we supply include:<br><b><span style="color:green">in-the.land</span><br><span style="color:green">in-the-whole.world</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>With these ones you supply an OPINION or maybe a NAME plus an OPINION</td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Full examples: <b><span style="color:#FF0000">best-wife</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">sexiest-lover</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-husband</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">greatest</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>More examples: <b><span style="color:#FF0000">best-mom</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-dad</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-daughter</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">sexiest</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>More examples: <b><span style="color:#FF0000">best-lover</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">joe-best-husband</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">raj-best-son</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">top-dad</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Other parts we supply are:<br><b><span style="color:green">best-in-the.world</span>, <span style="color:green">the-world-to.me</span><br><span style="color:green">supremely.sexy</span>, <span style="color:green">just-so.sexy</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Full examples: <b><span style="color:#FF0000">tim-wild</span>.<span style="color:green">best-in-the.world</span><br><span style="color:#FF0000">emma</span>.<span style="color:green">supremely.sexy</span>, <span style="color:#FF0000">george</span>.<span style="color:green">just-so.sexy</span><br><span style="color:#FF0000">lola</span>.<span style="color:green">the-world-to.me</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br><span style="color:purple"><b>Imagine your loved one\'s thrill at seeing such a home page dedicated to them on the special day!</b></span></td></tr></table>'
]

var displayllatexts=
[
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="A_1_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Letter Lookalikes</b><br>Photos resembling letters, numbers and symbols</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="E_1_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Frames for names and wishes for birthdays, anniversaries, Valentine\'s Day, Mother\'s Day, etc.</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="H_5_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Pictures that say 1000s of words<br><b>www.letterlookalikes.com</b></td></tr></table>'
]


if (adsrequired==1)
{
displayadtexts=
displayhelptexts.concat(displayupgradetexts).concat(displaywmltexts).concat(displayllatexts).concat(displayapptexts)
}
else
{
displayadtexts=displayhelptexts
}



function showcountdownad()
{
changetextvalue('countdownadtext', currentadtext())

}

function showcurrentad()
{
if (displayadtexts.length>0)
{
changetextvalue('currentadtext', currentadtext())
}
}

function increaseadnum()
{
displayadnum++
if (displayadnum>=displayadtexts.length) {displayadnum=0}
}

function currentadtext()
{
var sometext='<div style="width:100%;height:'+Math.floor(scalef*3)+'px"></div><table width=100% border=0 align=center bgcolor=silver><tr><td align=center>'+displayadtexts[displayadnum]+'</td></tr></table>'
increaseadnum()
return sometext
}




function mydecision(somemessage, someok, somecancel)
{

document.getElementById('theboard').style.display='none'
changetextvalue('output', '<br><table width=95% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0 align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0 cellspacing=0><tr><td  bgcolor=lemonchiffon height='+Math.floor(scalef*50)+' align=center valign=middle colspan=2><br>'+centralimage()+'</td></tr><tr><td  colspan=2 bgcolor=lemonchiffon align=center height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'><td colspan=2></td></tr><tr bgcolor=white><td  onClick="'+somecancel+'" align=center bgcolor=white>'+graphicfor('Cancel')+'</td><td onClick="'+someok+'" align=center><br>'+graphicfor('OK')+'<br></td></tr></table></td></tr></table>')

}







function ith(someitem, somelist)
{
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]==someitem) {return[i]}
}
return -1
}



function splitliston(someitem, somelist)
{
var someindex
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]==someitem) 
{
someindex=i
break
}
}
var somebeg=somelist.slice(0, someindex)
var someend=somelist.slice(someindex+1)
return([somebeg, someend])
}


var preventbuttonactions=0
function myalert(somemessage)
{
preventbuttonactions=1

document.getElementById('theboard').style.display='none'
changetextvalue('output',  '<br><table width=95% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0><tr><td height='+Math.floor(scalef*50)+' align=center valign=middle><br>'+centralimage()+'</td></tr><td  height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'></td></tr><tr><td bgcolor=white><table border=0 align=center><tr><td onClick="acknowledge()"><br>'+graphicfor('OK')+'<br></td></tr></table></td></tr></table></td></tr></table>')
}

function acknowledge()
{
preventbuttonactions=0
continuegame()

}




function donowt()
{
}
function runonload()
{
// first deal with remoteads

eval(GetLocalVal('remoteads'))
setuprummyboard()

if (GetLocalVal('rummystatus')==null || GetLocalVal('rummystatus')==-2) // first use
{
SetLocalVal('rummystatus', [-2])

document.getElementById('theboard').style.display='none'
var someadvicetext=''
if (localstorageworks==0) {someadvicetext='<span style="color:red">Certain storage functionality is not available. The application will still work, but the state will not be saved when you exit, so next time you\'ll need to start again.<br></span>'}

var somemessage='<b>Welcome to Rummy 7 from TopAccolades</b><ul><li>Rummy 7 is a simplified rummy game, in which 7 cards are dealt to each player.<li>No melds laid until you win.<li>For 1 player against the system or 2 players.<li>Tap or slide to move cards</ul><b>Key buttons</b><table width=95% border=0 align=center bgcolor="#8888FF"><tr><td valign=top style="font-weight:bold;text-align:left">New</td><td valign=top>Start a new series of games against the system or another player</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Help</td><td valign=top>Get context-sensitive and general help during play</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Deal (upper/lower)</td><td valign=top>Deal cards from specific side</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Deal (central)</td><td valign=top>Deal cards alternately (or random for first game of series)</td></tr></table><br>'+someadvicetext+'Tap <b>New</b> button above now to begin.'
changetextvalue('output',  '<br><table width=100% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0 onClick="newseries()"><tr><td height='+Math.floor(scalef*50)+' align=center valign=middle><br>'+centralimage()+'</td></tr><td  height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'></td></tr><tr><td bgcolor=white><table border=0 align=center></table>')
return
}
// above says always give welcome message to start a new series when first loaded
rummystatus=GetLocalList('rummystatus')
if (GetLocalVal('rummygametype')==null) {SetLocalVal('rummygametype', 0)}
if (GetLocalVal('rummynametype')==null) {SetLocalVal('rummynametype', 0)}
if (GetLocalVal('rummylastdealer')==null) {SetLocalVal('rummylastdealer', [])}
if (GetLocalVal('adbreakcounter')==null) {SetLocalVal('adbreakcounter', resetadbreakcounter)}

rummygametype=GetLocalVal('rummygametype')*1
rummynametype=GetLocalVal('rummynametype')*1
definenamescoloursetc()

if (rummygametype==1 && rummystatus[0]==1) // if in a 2-player game and part way through
{
waitforplayertoconfirm() // hide screen and wait for current player to press OK
return
}
// else just continue
continuegame()
}



var showingads=0
var thecdimage='<table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0><tr height='+Math.floor(scalef*10)+' valign=bottom><td valign=bottom><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif" valign=bottom style="display:block"></td><td align=center valign=bottom><img valign=bottom align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif" style="display:block"></td><td valign=bottom><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"  valign=bottom style="display:block"></td></tr><tr height='+Math.floor(scalef*10)+' valign=middle><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif" valign=middle style="display:block"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="rummyicon.png" border=0 style="display:block"></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif" valign=middle style="display:block"></td></tr><tr height='+Math.floor(scalef*10)+' valign=middle><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif" valign=middle style="display:block"></td><td align=center valign=middle><img valign=middle align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif" style="display:block"></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif" valign=middle style="display:block"></td></tr></table>'

function showad2()
{
continuegame()
}

function showadbreak()
{

showingads=1
changetextvalue('output', '<p style="text-align:center">This trial version of Rummy 7 includes these ad breaks.<br><br>You can buy the full version of<p style="color:red;font-weight:bold;text-align:center">Rummy 7<br>'+thecdimage+'<p style="text-align:center">This, of course, has no countdown ad breaks.<br><br>Also try other games, puzzles and services from TopAccolades<br><div style="width:100%" id="countdownadtext">&nbsp;</div>')
document.getElementById('theboard').style.display='none'
// document.getElementById('output').style.display='inline'
adcountdown(8)

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='adunselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='adselected.gif'
}
}



var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
adbreakcounter=resetadbreakcounter
SetLocalVal('adbreakcounter', adbreakcounter)
continueafterad()
}
else
{
showcountdownad()
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",4000);
}
}


var suitimages=['hearts', 'clubs', 'diamonds', 'spades']
function titleimage()
{
var sometext=''
var someindex=0
sometext=sometext+'<div style="position:relative;top:0px;left:0px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle>'
for (var i=0; i<2; i++)
{
someindex=i
sometext=sometext+'<tr>'
for (var j=0; j<10; j++)
{
sometext=sometext+'<td><img src="'+suitimages[someindex]+'.gif" style="display:block" width='+Math.floor(scalef*10)+' height='+Math.floor(scalef*10)+'></td>'
someindex++
if (someindex==4) {someindex=0}
}
sometext=sometext+'</tr>'

}
sometext=sometext+'</table><table border=0 width=100% height=100% style="position:absolute;top:0px;left:0px"><tr><td style="text-align:center;font-size:'+Math.floor(scalef*14)+'px;color:white;font-weight:bold;background-color:rgba(136,255,136,0.35)">Rummy 7</td></tr></table></div>' 
return sometext
}

/*
function centralimage()
{
var sometext=''
var someindex=0
sometext=sometext+'<table border=1 cellpadding=0 cellspacing=0><tr><td><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle bgcolor=white>'
for (var i=0; i<2; i++)
{
someindex=i
sometext=sometext+'<tr>'
for (var j=0; j<2; j++)
{
sometext=sometext+'<td><img src="'+suitimages[someindex]+'.gif" style="display:block" width='+Math.floor(scalef*20)+' height='+Math.floor(scalef*20)+'></td>'
someindex++
if (someindex==4) {someindex=0}
}
sometext=sometext+'</tr>'

}
sometext=sometext+'</table></td></tr></table>' 
return sometext
}

*/




function centralimage()
{
var sometext=''
var someindex=0
sometext=sometext+'<table border=1 cellpadding=0 cellspacing=0><tr><td><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle bgcolor=black>'
sometext=sometext+'<tr><td><img src="rummyicon.png" width='+Math.floor(scalef*30)+'  height='+Math.floor(scalef*30)+' style="display:block"></td></tr>'


sometext=sometext+'</table></td></tr></table>' 
return sometext
}


// static

documentwrite('<div style="width:100%;height:'+Math.floor(scalef*360)+'px;background-color:#88FF88"><table border=0 align=center valign=top cellspacing=0 cellpadding=0 width='+Math.floor(scalef*230)+'>')
documentwrite('<tr height='+Math.floor(scalef*3)+'><td width='+Math.floor(scalef*50)+'><img src="empty.png" width='+Math.floor(scalef*50)+'  height='+Math.floor(scalef*2)+' style="display:block"></td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'  height='+Math.floor(scalef*2)+' style="display:block"></td><td colspan=3></td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'  height='+Math.floor(scalef*2)+' style="display:block"></td><td width='+Math.floor(scalef*50)+'><img src="empty.png" width='+Math.floor(scalef*50)+'  height='+Math.floor(scalef*2)+' style="display:block"></td></tr>')
documentwrite('<tr height='+Math.floor(scalef*20)+'><td width='+Math.floor(scalef*50)+' onClick="newseries()">'+graphicfor('New')+'</td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'></td><td colspan=3 style="text-align:center;font-weight:bold;color:red;font-size:'+Math.floor(scalef*14)+'px">'+titleimage()+'</td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' onClick="showhelp()">'+graphicfor('Help')+'</td></tr>')

documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+(pushdown+Math.floor(scalef*3))+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="display:inline;width:100%" id="theboard">&nbsp;</div></td></tr>')
documentwrite('<tr ><td colspan=7 style="height='+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" ><div style="display:inline;width:100%" id="output">&nbsp;</div></td></td></tr>')
documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" ><div style="display:none;width:100%" id="help">')

var cardpositions
var cardspacing


function setuprummyboard()
{

// work out card positions
var somey
cardspacing=Math.floor(scalef*24)
var somex=Math.floor(scalef*115)-4*cardspacing+Math.floor(scalef*2)
cardpositions=[]
cardpositions[0]=[]
cardpositions[1]=[]
var somelowercardsy
somey=Math.floor(scalef*40)+Math.floor(scalef*2)+Math.floor(scalef*10)+Math.floor(scalef*2)+Math.floor(scalef*20)+Math.floor(scalef*12)+Math.floor(scalef*40)+Math.floor(scalef*12)+Math.floor(scalef*20)+Math.floor(scalef*2)+Math.floor(scalef*10)+Math.floor(scalef*2)
somelowercardsy=somey
// somey=Math.floor(scalef*(40+12+20+12+40+12+20+12))
for (var i=0; i<8; i++)
{
cardpositions[0][i]=[0, somex]
cardpositions[1][i]=[somey, somex]
somex=somex+cardspacing
}
// discard and stock positions
somex=Math.floor(scalef*115)+Math.floor(scalef*40)+Math.floor(scalef*25)-Math.floor(scalef*10)
somey=Math.floor(scalef*40)+Math.floor(scalef*2)+Math.floor(scalef*10)+Math.floor(scalef*2)+Math.floor(scalef*20)+Math.floor(scalef*12)
cardpositions[2]=[]
cardpositions[2][0]=[somey, somex]
somex=Math.floor(scalef*115)-Math.floor(scalef*40)-Math.floor(scalef*25)-Math.floor(scalef*10)
cardpositions[2][1]=[somey, somex]


// now do the text
var sometext=''
sometext=sometext+'<div style="height:'+Math.floor(scalef*2)+'px"></div>'
sometext=sometext+'<div style="position:relative; top:0px; left:0px;">'
sometext=sometext+'<div style="height:'+(Math.floor(scalef*40))+'px"></div>'

sometext=sometext+'<div style="position:absolute; top:'+(Math.floor(scalef*40))+'px;left:0px;width:100%; height:'+Math.floor(scalef*12)+'px;overflow:hidden"><table  border=0 cellpadding=0 cellspacing=0 align=center valign=middle height='+Math.floor(scalef*12)+' style="width:85%"><tr><td style="width:33%; height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*10)+'px;overflow:hidden;background-color:#8888FF;font-weight:bold" valign=middle id="playergametype0">System</td><td style="height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*10)+'px;overflow:hidden;background-color:#8888FF;font-weight:bold" valign=middle id="playersetup0">'+playernames[0][0]+'</td><td style="width:33%; height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*10)+'px;overflow:hidden;background-color:#8888FF; font-weight:bold" valign=middle id="playerscore0">'+0+'</td></tr><tr></table></div>'


sometext=sometext+'<div style="position:absolute; top:'+(Math.floor(scalef*40)+Math.floor(scalef*2)+Math.floor(scalef*10)+Math.floor(scalef*2))+'px; left:0px;width:100%;height:'+(Math.floor(scalef*20)+Math.floor(scalef*12)+Math.floor(scalef*40)+Math.floor(scalef*12)+Math.floor(scalef*20))+'px">'
sometext=sometext+'<table border=0 cellpadding=0 cellspacing=0 align=center><tr><td  width="'+Math.floor(scalef*50)+'" height="'+Math.floor(scalef*20)+'" style="overflow:hidden"><table   align=center width="'+Math.floor(scalef*50)+'"  cellpadding=0 cellspacing=0><tr><td onClick="startdeal(1)" align=center>'+graphicfor('Deal')+'</td></tr></table></td></tr></table>'
sometext=sometext+'<table border=0 cellpadding=0 cellspacing=0 align=center><tr><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px" id="stocktotal">52</td><td></td><td style="height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*8)+'px;overflow:hidden" id="discardtotal">0</td></tr><tr><td align=center style=" text-align:center; "  width="'+Math.floor(scalef*50)+'" ><img src="empty.png" height="'+Math.floor(scalef*40)+'"  style="display:block"></td><td align=center valign=middle  width="'+Math.floor(scalef*80)+'" onClick="randomstart()"><div style="position:relative">'+centralimage()+'<div style="position:absolute;top:0px;left:0px;width:100%;height:100%"><table height=100% width=100% border=0 align=center valign=middle><tr><td valign=middle style="text-align:center;color:white;font-weight:bold">Deal</td></tr></table></div></div></td><td align=center style=" text-align:center; "  width="'+Math.floor(scalef*50)+'"><img src="empty.png" height="'+Math.floor(scalef*40)+'" style="display:block"></td></tr><tr><td style="height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*8)+'px;overflow:hidden">Stock</td><td></td><td style="height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*8)+'px;overflow:hidden">Discard</td></tr></table>'
sometext=sometext+'<table border=0 cellpadding=0 cellspacing=0 align=center><tr><td  width="'+Math.floor(scalef*50)+'"><table   align=center width="'+Math.floor(scalef*50)+'"  cellpadding=0 cellspacing=0><tr><td onClick="startdeal(2)" align=center>'+graphicfor('Deal')+'</td></tr></table></td></tr></table>'
sometext=sometext+'</div>'

sometext=sometext+'<div style="position:absolute; top:'+(somelowercardsy-Math.floor(scalef*12))+'px;left:0px;width:100%; height:'+(Math.floor(scalef*12))+'px;overflow:hidden"><table  border=0 cellpadding=0 cellspacing=0 align=center valign=middle height='+Math.floor(scalef*12)+' style="width:85%"><tr><td style="width:33%; height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*10)+'px;overflow:hidden;background-color:#FF8888;font-weight:bold" valign=middle id="playergametype1">Player</td><td style="height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*10)+'px;overflow:hidden;background-color:#FF8888;font-weight:bold" valign=middle id="playersetup1">'+playernames[1][0]+'</td><td style="width:33%; height:'+Math.floor(scalef*12)+'px;text-align:center;font-size:'+Math.floor(scalef*10)+'px;overflow:hidden;background-color:#FF8888; font-weight:bold" valign=middle id="playerscore1">'+0+'</td></tr><tr></table></div>'

// sometext=sometext+'<div style="position:absolute; top:'+(Math.floor(scalef*40)+Math.floor(scalef*2)+Math.floor(scalef*10)+Math.floor(scalef*2)+Math.floor(scalef*20)+Math.floor(scalef*12)+Math.floor(scalef*40)+Math.floor(scalef*12)+Math.floor(scalef*20)+Math.floor(scalef*2)+Math.floor(scalef*10)+Math.floor(scalef*2))+'px;left:0px;width=100%;height:'+(Math.floor(scalef*40))+'px;background-color:yellow"></div>'

sometext=sometext+'<div style="position:absolute; top:'+(somelowercardsy+Math.floor(scalef*40)+Math.floor(scalef*8))+'px;left:0px;width:100%">'
sometext=sometext+'<table border=0 cellpadding=0 cellspacing=0 align=center><tr><td  width="'+Math.floor(scalef*50)+'"><table   align=center width="'+Math.floor(scalef*50)+'"  cellpadding=0 cellspacing=0><tr><td onClick="runsort()">'+graphicfor('Sort')+'</td></tr></table></td></tr></table>'
sometext=sometext+'<div style="height:'+Math.floor(scalef*4)+'px"></div>'
sometext=sometext+'<div style="height:'+Math.floor(scalef*35)+'px;width:100%"><table width=100% height=100% border=0 bgcolor=lemonchiffon><tr><td style="text-align:center" id="statusmessage">&nbsp;</td></tr></table></div>'

sometext=sometext+'<div style="width:100%" id="currentadtext"></div>'
sometext=sometext+'</div>'

for (var i=0; i<8; i++)
{
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="position:absolute;top:'+cardpositions[0][i][0]+'px;left:'+cardpositions[0][i][1]+'px"><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*20)+' align=center id="card1'+i+'" >'+imagefor('blank')+'</td></tr></table>'
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="position:absolute;top:'+cardpositions[1][i][0]+'px;left:'+cardpositions[1][i][1]+'px"><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*2)+' align=center id="card2'+i+'" >'+imagefor('blank')+'</td></tr></table>'
}
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="position:absolute;top:'+cardpositions[2][0][0]+'px;left:'+cardpositions[2][0][1]+'px"><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*20)+' align=center id="discard" >'+imagefor('blank')+'</td></tr></table>'
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="position:absolute;top:'+cardpositions[2][1][0]+'px;left:'+cardpositions[2][1][1]+'px"><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*20)+' align=center id="stock"  >'+imagefor('blank')+'</td></tr></table>'
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="display:none;position:absolute;top:0px;left:0px" id="finger"><tr><td width='+Math.floor(scalef*15)+' align=center ><img width='+Math.floor(scalef*15)+' src="finger.png"></td></tr></table>'
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="display:none;position:absolute;top:0px;left:0px" id="movecard"><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*20)+' align=center id="movecardimage" >'+imagefor('blank')+'</td></tr></table>'
for (var i=0; i<8; i++)
{
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="display:none;position:absolute;top:0px;left:0px" id="handmovecard'+i+'"><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*20)+' align=center id="handmovecardimage'+i+'" >'+imagefor('blank')+'</td></tr></table>'

}
sometext=sometext+'<div style="display:none;position:absolute;top:'+cardpositions[0][7][0]+'px;left:'+cardpositions[0][7][1]+'px" id="lastmove"><table border=0 cellspacing=0 cellpadding=0 ><tr><td height='+Math.floor(scalef*40)+' width='+Math.floor(scalef*20)+' align=center id="lastmoveimage" >'+imagefor('blank')+'</td></tr></table><div style="position:absolute;top:0px;left:0px; width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*40)+'px;background-color:rgba(0,255,0,0.4);"></div></div>'

var somecardheight=Math.floor(scalef*40)

// transparent background for screens ;background-color:rgba(255,0,0,0.5);  setting below was '', but unreliable with IE - doesn't always react to click on invisible table
var sometransparency='background-color:rgba(255,255,255,0.01);'

sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="display:none;position:absolute;top:'+cardpositions[1][0][0]+'px;left:'+(cardpositions[1][0][1]-Math.floor(scalef*2))+'px;'+sometransparency+'" id="selectscreen" ><tr>'
for (var i=0; i<8; i++)
{
sometext=sometext+'<td width='+cardspacing+' height='+somecardheight+' id="cardselect'+i+'" onClick="presscard('+i+')">&nbsp;</td>'
}
sometext=sometext+'</tr></table>'
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 style="display:none;position:absolute;top:'+cardpositions[1][0][0]+'px;left:'+(cardpositions[1][0][1]-Math.floor(cardspacing/2)-Math.floor(scalef*2))+'px;'+sometransparency+'" id="insertscreen"><tr>'
for (var i=0; i<9; i++)
{
sometext=sometext+'<td width='+cardspacing+' height='+somecardheight+' onClick="presscard('+i+')">&nbsp;</td>'
}
sometext=sometext+'</tr></table>'

sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 id="discardscreen" style="display:block;position:absolute;top:'+cardpositions[2][0][0]+'px;left:'+cardpositions[2][0][1]+'px;'+sometransparency+'"><tr><td height='+somecardheight+' width='+Math.floor(scalef*20)+' align=center id="discardscreen" onClick="pressdiscard()"></td></tr></table>'
sometext=sometext+'<table border=0 cellspacing=0 cellpadding=0 id="stockscreen" style="display:block;position:absolute;top:'+cardpositions[2][1][0]+'px;left:'+cardpositions[2][1][1]+'px;'+sometransparency+'"><tr><td height='+somecardheight+' width='+Math.floor(scalef*20)+' align=center id="stockscreen" onClick="selecttopstock()"></td></tr></table>'




sometext=sometext+'</div>'
changetextvalue('theboard', sometext)

addtouchcardhandlers()
}


function newseries()
{
if (showingads==1 || showinghelp==1 || preventbuttonactions==1) {return}
rummystatus=GetLocalList('rummystatus')
var somestatus=rummystatus[0]*1
if (somestatus==1)
{
mydecision('Please confirm that you wish to begin a new series of games', 'newseries2()', 'continuegame()')

}
else
{
newseries2()
}
}


function newseries2()
{
var sometext='<br><table border=1 cellpadding=0 cellspacing=0 style="width:100%;background-color:lemonchiffon"><tr><td>'
sometext=sometext+'<br><table align=center cellspacing=2 cellpadding=1 border=0>'
sometext=sometext+'<tr><td align=left ><b>Choose the type of game to play</b><br><i>You can choose to play against the system or against another player in Play and Pass mode.<br>&nbsp;</i></td><td align=center valign=top><br>'+centralimage()+'</td></tr>'
sometext=sometext+'<tr><td align=left colspan=2><b>One player (Red) versus system (Blue)</b></td></tr>'
sometext=sometext+'<tr><td align=left>Level 4 (hardest) <span style="color:red">Recommended</span><br><i>Blue has full memory</i></td><td onClick="newgame(4)">'+graphicfor('Play')+'</td></tr>'
sometext=sometext+'<tr><td align=left>Level 3<br><i>Blue remembers 20 moves</i></td><td onClick="newgame(3)">'+graphicfor('Play')+'</td></tr>'
sometext=sometext+'<tr><td align=left>Level 2<br><i>Blue remembers 5 moves</i></td><td onClick="newgame(2)">'+graphicfor('Play')+'</td></tr>'
sometext=sometext+'<tr><td align=left>Level 1 (easiest)<br><i>Blue remembers nothing</i></td><td onClick="newgame(1)">'+graphicfor('Play')+'</td></tr>'
sometext=sometext+'<tr><td align=left colspan=2><br><b>Two players: Play and Pass</b></td></tr>'
sometext=sometext+'<tr><td align=left><i>One player plays Red, the other Blue.<br>Decide now who plays which colour.</i></td><td onClick="newgame(0)">'+graphicfor('Play')+'</td></tr>'
sometext=sometext+'</table><br>&nbsp;</td></tr></table>'
SetLocalVal('rummystatus', [-1])
rummystatus=GetLocalList('rummystatus')
rummyscores=[0,0]
SetLocalVal('rummyscores', rummyscores)
document.getElementById('theboard').style.display='none'
changetextvalue('output', sometext)
}




function newgame(somenum)
{
rummyscores=[0,0]
SetLocalVal('rummylastdealer', [])

if (somenum>0)
{
computermemory=somenum-1
rummygametype=0
rummynametype=0
savethestate([0])
}
else
{
computermemory=3
rummygametype=1
rummynametype=0
savethestate([0])
}
delayeddealtype=-1
continuegame()
}

function waitforplayerchange()
{

myalert('<br><table align=center border=1 width=65% bgcolor="'+playernames[0][1]+'"><tr><td align=center><br>'+playernames[0][0]+'\'s turn.<br>&nbsp;</td></tr></table><br>Press OK when ready to see cards.<br>&nbsp;')
}

function waitforplayertoconfirm()
{

myalert('<br><table align=center border=1 width=65% bgcolor="'+playernames[1][1]+'"><tr><td align=center><br>'+playernames[1][0]+'\'s turn.<br>&nbsp;</td></tr></table><br>Press OK when ready to see cards.&nbsp;')
}


function randomstart()
{
var somelastdealer=GetLocalList('rummylastdealer')
if (somelastdealer.length==0)
{
startdeal(randomnumber(2))
}
else
{
var somelastdeal=somelastdealer[0]
if (rummynametype==somelastdealer[1])
{
startdeal(3-somelastdeal)
}
else
{
startdeal(somelastdeal)
}
}
}

var delayeddealtype=-1
function startdeal(somenum)
{
if (showingads==1 || showinghelp==1 || preventbuttonactions==1) {return}
var somestatus=rummystatus[0]*1
delayeddealtype=somenum
if (somestatus==1)
{
mydecision('Please confirm that you wish to begin a new game', 'startnewgame2()', 'continuegame()')

}
else
{
startnewgame2()
}

}

function startnewgame2()
{
changetextvalue('output', '<span style="font-size:1px>&nbsp;</span>')

savethestate([0])
showad2()
}




// alert(sortwin([[7,2], [8,2], [9,2], [10,2], [7,0], [7,1], [7,3]]))


// alert(100)
</script>
<script language="Javascript">


var showinghelp=0

var helpdivpairs=[['0 1', ['helpdeal', 'helpbuttons']], ['0 0', ['helpdeal', 'helpbuttons']], ['1,2,0 0', ['helpchoose', 'helpsort', 'helpbuttons']], ['1,2,0 1', ['helplast', 'helpchoose', 'helpsort', 'helpbuttons']], ['1,2,1 0', ['helpdiscard', 'helpsort', 'helpbuttons']], ['1,2,1 1', ['helpdiscard', 'helpsort', 'helpbuttons']], ['2,1 0', ['helpwon', 'helpbuttons']], ['2,2 0', ['helpwon', 'helpbuttons']], ['2,1 1', ['helpwon', 'helpbuttons']], ['2,2 1', ['helpwon', 'helpbuttons']]] 

function showhelp()
{
if (showinghelp==1) {hidehelp();return}
if (showingads==1 || preventbuttonactions==1 || rummystatus[0]<0) {return}
showinghelp=1
for (var i=0; i<helpdivpairs.length; i++)
{
for (var j=0; j<helpdivpairs[i][1].length; j++)
{

document.getElementById(helpdivpairs[i][1][j]).style.display='none'
}
}

var somekey=rummystatus+' '+rummygametype
document.getElementById('theboard').style.display='none'
document.getElementById('output').style.display='none'
for (var i=0; i<helpdivpairs.length; i++)
{
if (helpdivpairs[i][0]==somekey)
{
for (var j=0; j<helpdivpairs[i][1].length; j++)
{
document.getElementById(helpdivpairs[i][1][j]).style.display='inline'
}
}
}
document.getElementById('help').style.display='inline'

}

function hidehelp()
{
document.getElementById('theboard').style.display='inline'
document.getElementById('output').style.display='inline'
document.getElementById('help').style.display='none'
showinghelp=0

}


</script>
<div id="helpback" style="display:inline">
<script language="Javascript">documentwrite('<table align=center border=0><tr><td onClick="hidehelp()" width='+Math.floor(scalef*50)+'>'+graphicfor('Back')+'</td></tr></table>')</script>
</div>
<p><span style="font-weight: bold">Contextual Help</span></p>
<div id="helpwon" style="display:none">
<p>The winner's score has been increased to show the new total. You can now choose either to deal to start a new game in the current series, or to start a new series by tapping the New button.
<p>You can choose one of three ways to deal:
<ul>
<li>Tap the large central Deal button.  This carries out a deal by the player who did not deal last time.
<li>Tap the top Deal button.  This carries out a deal by the player at the top of the screen.
<li>Tap the bottom Deal button.  This carries out a deal by the player at the bottom of the screen.
</ul>

</div>
<div id="helpdeal" style="display:none">
<p>You can choose one of three ways to deal:
<ul>
<li>Tap the large central Deal button.  This selects one of the two players at random, and carries out a deal by that player.
<li>Tap the top Deal button.  This carries out a deal by the player at the top of the screen.
<li>Tap the bottom Deal button.  This carries out a deal by the player at the bottom of the screen.
</ul>
The deal is animated, after which it will be the turn of the player who didn't deal.
</div>
<div id="helplast" style="display:none">
<p>As you could not see the draw carried out by your opponent, whose hand is now shown at the top (backs of cards only), 
the card drawn by your opponent is shown at the right end of the card backs at the top, faded into the background.  
If your opponent drew a card from the discard pile, that card is shown, while if your opponent drew a card from the stock pile, the back of a card is shown.
</div>
<div id="helpchoose" style="display:none">
<p>You now have to select either the top card in the discard pile, which you do by tapping the discard pile, or the top card in the stock pile, which you do by tapping the stock pile.
<p>Alternatively, on a touch screen, you may slide your finger from the discard pile or the stock pile. 
<p>Above the discard pile and stock pile is displayed the number of cards in the pile.
<p>The move of the card to your hand (always to the position on the right) is animated.
</div>
<div id="helpdiscard" style="display:none">
<p>You now have to choose one of your 8 cards to discard.  To do this, simply tap one of the cards to select it (a hand will be shown on top of it to show that it is selected), then tap on the discard pile.
<p>Alternatively, on a touch screen, you may slide your finger from one of your cards to the discard pile. Again, a hand will be shown on top of the starting card, so that you know you have selected the correct one.
<p>The move of the card to the discard pile is animated, as is the squashing up of your hand afterwards.
</div>
<div id="helpsort" style="display:none">
<p>To help your decision-making, you will probably want to re-arrange your cards.  
<p>To re-arrange your cards manually, select a card to be moved by tapping on it (a hand will be shown on top of it to show that it is selected), then tap where you want its new location to be.  This will normally be the gap between two cards.  If you want to move the card to one of the ends, where there is no gap, just tap roughly over the edge of the end card.
<p>Alternatively, on a touch screen, you may slide your finger from one of your cards to the insert position. Again, a hand will be shown on top of the starting card, so that you know you have selected the correct one.
<p>Note: if you use sliding to move a card, but your end point is not within the line of cards (or over the discard pile if discarding), no move will be made but the card you started from remains selected (with a hand over it).  You will then need to complete the move using a tap.
<p>You can also request the system to re-arrange your cards.  Just press the Sort button, and the system will look for 4- and 3-card melds, and also for any pairs that make partial melds (for runs it identifies partial run melds only if there is no gap in the run).  The cards are re-aranged to show melds on the left, then partial melds, and then any other cards.
<p>The re-arrangement is animated.
<p>Please note that you can re-arrange your cards only when it is your turn and when no animation is underway.
</div>
<div id="helpbuttons" style="display:none">
<p><b>Buttons</b>
<p>The Help button can be used once the game type has been chosen.  It shows context-sensitive help and more general help and information. It cannot be used during animation or during the system's turn in the one-player game.
<p>The New button is used if you wish to start a new series, either against the system or against another player.
<p>The upper and lower Deal buttons request a new game within a series, and deal cards from the specific side.
<p>The large central Deal button requests a new game within a series.  If it is the first game in the series, the dealer is selected at random, otherwise the dealer is the player who did not deal in the last game.
<p>Note: whenever you request a new game or series, and you are some way through a game, you will be asked to confirm your request.
<p>The Sort button re-arranges your hand into melds and partial melds.
<p>None of these buttons can be used during animation, or during the system's turn in the one-player game, or when the main screen is not shown.
</div>

<div id="helpgeneral" style="display:inline">
<p><span style="font-weight:bold">Rummy 7</span>
<p>
This Rummy 7 game is designed to be played by one person playing against the computer or by two people playing each other.
<p>
For those familiar with Rummy, this is a simplified 7-card version (rather than the usual 10 cards used for 2 players) with the following characteristics:

<ul>
<li>the game is not played for points - just to be the first to achieve a 3-card and a 4-card meld;
<li>no melds are shown until the end of the game;
<li>Ace counts as high or low, but runs cannot include high and low.  i.e. A, 2, 3 or Q, K, A are acceptable melds, but K, A, 2 is not;
<li>a card selected from the top of the discard pile cannot immediately be discarded;
<li>after the last card has been taken from the stockpile, a new stockpile is formed by taking all but the top card from the discard pile and shuffling them.
</ul>

<span style="font-weight:bold">Overview and objectives of the game</span>
<br><br>
In this version of 7-card Rummy, a dealer is selected (or selected randomly).  The pack is shuffled, then 7 cards are dealt to each player.  The next card in the pack is then placed face up to form a discard pack, while the remaining cards 
are laid face down to form the stock pile.
<br><br>
The opponent then selects one card - either the top card of the discard pile or the top card of the stock pile - adds it to their hand, then discards one of these 8 cards (any one except the card just picked up if this came from the discard pile) by placing it face up on the discard pile. 
<br><br>
After this, each player in turn (the dealer's turn is next) does the same, i.e. selects a card from either the discard pile or stock pile and then discards one to the discard pile.
<br><br>
The objective of the game is to be the first player to form two melds - one of 3 cards, one of 4 cards - with the 7 cards remaining after the eighth has been discarded.
<br><br>
Each meld may be either a run of cards of the same suit, e.g. [9 Hearts, 10 Hearts and Jack Hearts], or a set of cards of the same face value (but different suits, obviously), e.g. [7 Hearts, 7 Clubs, 7 Spades].  Note: for runs, Ace counts as either high (the card above King) or low (the card below 2), but it cannot count as both in that run.  So, valid runs would include [Jack, Queen, King, Ace] or [Ace, 2, 3] but not [King, Ace, 2, 3].
<br><br>
When one player achieves the 3-card meld and the 4-card meld, that player wins, the game stops and all cards are revealed.  The winner's score is increased by 1.
<br><br>
Note: when the last card is taken from the stock pile, a new stock pile is formed by taking all but the top card from the discard pile and shuffling these.

<br><br>
<span style="font-weight:bold">Opening the app and resuming</span><br><br>
When the app is first opened, the screen to start a new series is displayed.  When the app is closed, the current state of play (hands, scores, whose turn it is, etc.) are stored.  When opened again, the state is restored so that play can continue.  This means that you can leave the app and resume the game again at some later time.
<br><br>
<span style="font-weight:bold">Playing the game</span><br><br>
One hand is shown at the bottom, the other at the top.  Whether playing the single-player game against the system, or the two-player game, the human user whose turn it is always plays using the hand at the bottom.
<br><br>
<span style="font-weight:bold">Taking your turn</span><br><br>
To complete your turn, you need to draw a card either from the discard pile or from the stock pile, then discard one of the 8 cards onto the discard pile.
<br><br>
To draw a card from the discard or stock pile, simply tap that pile or slide from that pile.  The card will be moved into your hand (always to the right end).
<br><br>
To discard one of your cards, select one (see below) then tap the discard pile or slide the card to the discard pile.  The card will move to the discard pile.  Note: if you try to discard the card you have just drawn from the discard pile, you will receive an error message.
<br><br>
<span style="font-style:italic">Selecting one of your cards</span><br><br>
To select a card - something you need to do when arranging or discarding one of your cards - just tap the card.  The selected card will then be displayed with a hand on top of it.
<br><br>
<span style="font-style:italic">Arranging the cards in your hand</span>
<br><br>
It can be helpful to arrange the cards in your hand to show full or partial melds.  To re-arrange the cards manually, first select a card to be moved.  Then tap the gap between two cards where you wish to insert the card (or the edge of the end card if you wish to insert the card at the left or right end).  Alternatively, on a touch screen, slide your finger from the card to the insert position. If you have only seven cards in your hand, they are then moved so that the gap for the eighth is at the right end. Note: you can only arrange your cards when it is your turn to go - either before you have selected a card or before discarding.
<br><br>
Recognizing patterns and arranging cards is a key Rummy skill, so you should normally do this manually.  However, if you wish for some assistance, press the Sort button and a simple sort into existing melds or partial melds (without gaps in runs) will be carried out for you.  Again, this can only be done when it is your turn. 
<br><br>
<span style="font-style:italic">Finding a winner</span>
<br><br>
A check is made at the end of each turn to see whether the player who has just discarded has won.  If so, this is announced and all cards are revealed.  The winner's score is increased by one.  Scores are shown on the right of the two players' bars.
<br><br>
<span style="font-style:italic">The message display</span>
<br><br>
Just below the playing area is a message board.  This informs you what you need to do or what the system is doing and announces the winner.
<br><br>
<span style="font-weight:bold">Playing against the system</span>
<br><br>
When playing against the system, you always play as Red, at the bottom, while the system plays as Blue, at the top.
<br><br>
<span style="font-style:italic">The computer's turn</span>
<br><br>
When it is the computer's turn to select a card from the discard or stock pile or to discard a card, you can see the moves taking place.  
<br><br><span style="font-style:italic">System memory levels</span>
<br><br>
When you begin a new series of games, you can choose to play against the system with any one of 4 memory levels.
<br><br>
To understand what these levels mean, you need to understand something about the way the system behaves and evaluates its moves.
<br><br>
When the system decides what action to take, it is provided only 
with the current status of each card, according to what it should know given a certain memory level.  So, for every card it might be told:

<ul>
<li>it is in the computer's hand;
<li>it is in the discard pile (when cards are discarded they are, of course, visible to both players)
<li>it is in your hand (it will only know this if you took the card from the discard pile and haven't discarded it later)
<li>its position is unknown (either in the stock pile or in your hand - either originally dealt to you or drawn by you from the stock pile.)
</ul>

The status of each card is determined before each move based on a record of the moves made and on the system memory level setting for what the
system should 'remember':

<ul>
<li>if the level is <span style="font-weight:bold">4</span>, the complete record is used, so the system will have good knowledge of the card locations, and play at its best;
<li>if the level is <span style="font-weight:bold">3</span>, only the moves made in the last 20 turns are remembered (so, at the beginning of the game, levels 4 and 3 are indistinguishable);
<li>if the level is <span style="font-weight:bold">2</span>, only the moves made in the last 5 turns are remembered;
<li>if the level is <span style="font-weight:bold">1</span>, none of the previous turns are remembered. 
</ul>

In addition to what the system should 'remember', it also knows what is visible to it, i.e. its own hand and the top card in the discard pile.
<br><br>
<span style="font-style:italic">About the system's decision-making</span>
<br><br>
The system makes all decisions about selecting or discarding based only on its objective to create its own melds.  It does not try to prevent your melds by holding back cards that
might be beneficial to you.
<br><br>
<span style="font-weight:bold">Playing the two-player Play and Pass game</span>
<br><br>
Before dealing, decide who will play as Red and who as Blue.  The game is designed so that the two players both use the same device but do not see each other's cards.
<br><br>
After dealing, the main screen will disappear and a message will be displayed.  The device should be taken by the player whose turn it is, who should then press OK to reveal the main screen.  The player's hand, colour and score is shown at the bottom. 
<br><br>
After completing a turn, the main screen will disappear and a message will be displayed, indicating that it is the other player's turn.  The device should be taken by that player.  Again, that player's hand, colour and score is shown at the bottom, i.e. the top and bottom hands are swapped around after each turn.
<br><br>
When playing rummy with a real pack of cards, you are able to see the move the other person makes.  With Rummy 7, you cannot see what the other player does as you would see their cards.  Instead, when it is your turn, you can see what the other player did last by looking at the top-right card position at the top.  
Here, either a card front is displayed, which indicates that this card was drawn by your opponent from the discard pile, or the back of a card, which indicates that your opponent drew a card from the stock pile.  In both cases, it is shown faded into the background.
<br><br>
<span style="font-weight:bold">Starting a new series</span><br><br>
Rummy 7 games are played as a series.  To start a new series, press the New button. This displays a screen, from which you can choose to play against the system, with one of the 4 system memory levels, or against another person in Play and Pass mode.  Just press the appropriate Play button.
<br><br>Starting a new series sets user scores to zero.  The main Rummy 7 screen is then displayed, ready for you to request the initial deal.
<br><br>Whether playing against the system or another person, the initial layout has the player playing Red at the bottom of the screen, and the player playing Blue at the top.
<br><br>A series has no predefined end point.  You decide how a series is won, e.g. by beng the first to win three games.
<br><br>
<span style="font-weight:bold">Starting a new game - dealing</span><br><br>
To start a new game within a series at any time, tap the large central Deal button.  If it is the first game in the series, the dealer is selected randomly.  If it is not the first game in the series, the dealer is the player who did not deal in the last game.
Alternatively, you can tap one of the two smaller Deal buttons, which deal 7 cards to each player from the specific side (Blue or Red). Blue deals the first card to Red, while Red deals the first card to Blue.  


<p><b>Exiting</b>
<p>Tap the device back twice to exit the application.  The current state is remembered so that you continue when you open it up again.

<p><span style="font-weight: bold">About Rummy 7</sup></span>

<p>Rummy 7 has been designed by Dr David Wolstenholme.
<p><span style="font-weight: bold">Terms of use</span><p>This software may be used for personal purposes only.  It may not be used for commercial purposes.</p> 
<p>The software, code and script of this application may not be copied or be distributed to others.</p> 
<p>The software, code and script may not be altered in any way.</p> 
<p >Copyright of the software, code and script, and its help documentation, is owned by TopAccolades Limited. No part of the software, code, script or documentation may be copied or used in another application or document.</p> 
<p >Although every effort has been made to ensure that this software functions as intended, TopAccolades Limited provides no warranty of merchantability, or fitness for a particular purpose, in relation to this application or its support.</p> 
<p >TopAccolades Limited shall not be liable for any damages whatsoever arising out of the use of or inability to use this application or the provision of or failure to provide support.</p> 
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>
<p><br>Version <script language="Javascript">documentwrite(appversion)</script><br>
Scale <script language="Javascript">documentwrite(scalef)</script>
</div>

<script language="Javascript">
documentwrite('</div></td></tr></table></div>')

var remoteads=[]

if (GetLocalVal('remoteads')==null)
{
// default remoteads
SetLocalVal('remoteads', 'remoteads=[]')

}
if (GetLocalVal('lastremoteadstime')==null) {SetLocalVal('lastremoteadstime', 0)}
// if (Date.now()-(1*GetLocalVal('lastremoteadstime'))>0)
// If it's more than 5 days since last remote ad update, then we upload it.
// However, if there's no internet access, then this loading can hang the app up.  So, we set the last time of upload to be 4 days ago
// then try to reload.  If it fails and hangs up, we're showing a Reload button, which will reload the page, this time without needing to upload the remote ad (now < 4 days ago)
// However, if we have no local storage, this won't work, as it would just end up at the reload button again.  In this case, we essentially do nothing, inc. no remote ad upload (safer), and go to auto runonload

if (Date.now()-(1*GetLocalVal('lastremoteadstime'))>(5*24*60*60*1000)) // if more than 5 days
{
if (localstorageworks==1)
{
document.getElementById('theboard').style.display='none'
changetextvalue('output',  '<br><br><table width=80% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=white><tr><td><table width=100% border=0><tr><td  bgcolor=lemonchiffon height='+Math.floor(scalef*75)+' align=center valign=middle>Internet access is required for certain updates, which is currently not available.  Please tap the Reload button and a further attempt will be made after 24 hours.</td></tr><tr height='+Math.floor(scalef*3)+'><td></td></tr><tr><td><table border=0 align=center><tr><td onClick="location.reload()">'+graphicfor('Reload')+'</td></tr></table></td></tr></table></td></tr></table>')

SetLocalVal('lastremoteadstime', Date.now()-(4*24*60*60*1000)) // in case of problems loading, ensures that it will work for next day, as lasttime now set to 4 days ago, so can reload and it should work fine
documentwrite('<sc'+'ript src="http://www.compactfun.com/remoteads/largeadsuntimed.js?time='+Date.now()+'"></sc'+'ript>')
// ?time=current time above helps to ensure that the javascript is reloaded and that a cached version is not used
}
}
</script>

</body></html>