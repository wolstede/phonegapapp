<!DOCTYPE HTML><html><head><title>Kublitz Cube</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">
var appname='kublitzcube'
var appversion='1.1 (20160318)'
// localStorage.clear()
var restartconfirmationrequired=1
var adfrequency=1
var adsrequired=1


function documentwrite(someitem)
{
document.write(someitem)
}
var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight
var overallwidthscale=screenwidth/240
var overallheightscale=screenheight/360
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}

if (scalef<1.0) {scalef=1.0}
var pushdown=0

if (scalef*370 < screenheight)
{
pushdown=Math.floor((screenheight-(scalef*370))/2)
}

documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ndt {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ndd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; }  \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')

</script>

</head>
<body onLoad="runonload()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:powderblue; width:100%; height:100%">
<SCRIPT LANGUAGE="JavaScript">


// Local storage
// SetLocalVal and GetLocalVal - use cookies if available, if not local storage
// Reason: for testing, local storage doesn't seem to work.  On devices, local storage works but not always cookies.  Should cover everything.

var daystoExpire = 2000;
var expirydate = new Date(); 
expirydate.setTime(expirydate.getTime() + (daystoExpire*24*60*60*1000));


function GetCookie(name) 
{  
var thecookie=document.cookie
var namestring = name+'='  
var cookieval = null
var cookievalbeg=-1
var cookievalend=thecookie.length
for (var beg=0; beg<thecookie.length; beg++)
{
var end=beg+namestring.length
if (thecookie.substring(beg, end) == namestring)
{
cookievalbeg=end
}
}
if (cookievalbeg > -1)
{
cookievalend=thecookie.indexOf(';', cookievalbeg) // look for next ; after beginning of value
if (cookievalend == -1) (cookievalend = thecookie.length)
cookieval = unescape(thecookie.substring(cookievalbeg, cookievalend))
} 

return cookieval
}


function SetCookie(name, val) 
{  
var cookiestring = name+'='+escape(val)+'; expires='+ expirydate.toGMTString()
document.cookie=cookiestring
}

var usecookies=1
SetCookie('dummy', 'answer')
if (GetCookie('dummy')==null) {usecookies=0}

// For this app cookies not adequate, so must use local storage, so set usecookies to 0
usecookies=0
</script>
<script language="Javascript">
// checks whether local storage works.  Often doesn't with Internet Explorer
var localstorageworks=0
localStorage.setItem('testcheck', '43')
if (localStorage.getItem('testcheck')=='43') {localstorageworks=1}

</script>
<script language="Javascript">


</script>
<script language="Javascript">
var localstoragesubstitute=[]

function SetLocalStorageSubstitute(someitem, someval)
{
someval=someval+''
var someset=0
for (var i=0; i<localstoragesubstitute.length; i++)
{
if (localstoragesubstitute[i][0]==someitem)
{
localstoragesubstitute[i][1]=someval
someset=1
break
}
}
if (someset==0) {localstoragesubstitute=localstoragesubstitute.concat([[someitem, someval]])}
}

function GetLocalStorageSubstitute(someitem)
{
for (var i=0; i<localstoragesubstitute.length; i++)
{
if (localstoragesubstitute[i][0]==someitem)
{
return localstoragesubstitute[i][1]
}
}
return null
}
</script>
<script language="Javascript">

function SetLocalVal(somename, someval)
{
if (usecookies==1) 
{
SetCookie(somename, someval)
}
else
{
if (localstorageworks==1)
{
localStorage.setItem(somename, someval)
}
else
{
SetLocalStorageSubstitute(somename, someval)
}
}
}

function GetLocalVal(somename)
{
if (usecookies==1) 
{
return GetCookie(somename)
}
else
{
if (localstorageworks==1)
{
return localStorage.getItem(somename)
}
else
{
return GetLocalStorageSubstitute(somename)
}
}
}

// end Local Storage




function continueafterad()
{
showingads=0
continuegame()
}

function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function changebgcolor(someitem, somecolor)
{
document.getElementById(someitem).style.backgroundColor=somecolor
}

function genintegers(somenum)
{
var someresult=[]
for (var i=1; i<=somenum; i++)
{
someresult[i-1]=i
}
return someresult
}

function member(someitem, somelist)
{
for (var i=0; i<somelist.length; i++)
{
if (someitem==somelist[i]) {return true}
}
return false
}

function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=new Array()
var packsize=somearray.length
var ran

for (var i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}

function removeitem(someitem, somearray)
{
var somebeg=[]
var someend=[]
for (var i=0; i<somearray.length; i++)
{
if (somearray[i]==someitem) {return somearray.slice(0, i).concat(somearray.slice(i+1))}
}
return somearray
}

function copylist(somelist)
{
var somereturn=[]
for (var i=0; i<somelist.length; i++)
{
somereturn[i]=somelist[i]
}
return somereturn
}



</script>
<script language="Javascript">




function graphicfor(somename)
{

if (member(somename, ['Help',  'Reset', '&lt;', 'Undo', 'Back', 'OK', 'Cancel', 'New', 'Play', 'Reload'])==true) {return '<div style="position:relative"><img width='+Math.floor(scalef*50)+' height='+Math.floor(scalef*20)+' src="greybluebutton.png" style="display:block"><div style="position:absolute;top:0px;left:0px;width:100%;height:100%;display:inline"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle ><tr height='+Math.floor(scalef*20)+'><td align=center valign=middle style="text-align:center;font-weight:bold;color:white">'+somename+'</td></tr></table></div></div>'}




if (somename=='blank') {return ''}

return '<b><span style="text-align:center">'+somename+'</span></b>'
}


function donothing(somenum)
{}
function donothing2()
{}


function GetLocalList(somename)
{
var somestore=GetLocalVal(somename)
if (somestore==null) {return []}
return eval('['+somestore+']')
}

function GetLocalString(somename)
{
var somestore=GetLocalVal(somename)
if (somestore==null) {return ''}
return somestore
}


</script>
<script language="Javascript">

// From original

restartconfirmationrequired=1
/*
function continueafterad()
{
startgame()
}

function setandstart(somenum)
{
peggleselect(somenum)
showad()
}
*/








// End from original

// code for touch-based card control
function addtouchhandlers()
{
if ("ontouchstart" in window)
{
dealwithtouchevents()
}
}


var edgeandcentrecubelets=[[0,1], [1, 0], [1, 2], [2,1], [1,1]]
var visiblelayers=['f',  't']
var layerprefixes=['', 'b']


var thetouchstart
var thetouches
function dealwithtouchevents()
{
var someindex=0
var sometouchzone
thetouchstart=[]
thetouches=0
for (var i=0; i<visiblelayers.length; i++)
{ 
for (var j=0; j<3; j++)
{
for (var m=0; m<3; m++)
{
for (var k=0; k<2; k++)
{
sometouchzone=document.getElementById(layerprefixes[k]+"layer_"+visiblelayers[i]+j+'_'+m);
// alert(sometouchzone)
sometouchzone.addEventListener("touchstart", starttouch, false);
sometouchzone.addEventListener("touchend", endtouch, false);
sometouchzone.addEventListener("touchmove", movetouch, false);
}
}
}
}
}

function starttouch(event)
{

event.preventDefault();
var somefingers=event.touches.length

var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
thetouchstart=[somey, somex, event.currentTarget.id]
thetouches=somefingers
}

function movetouch(event)
{

event.preventDefault();
if (thetouches==1)
{
var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
thetouchstart=[thetouchstart[0], thetouchstart[1], thetouchstart[2], somey, somex]
}
}
/*
var thetesty=-10
var thetestx=10
alert([thetesty,thetestx,Math.atan2(thetesty, thetestx)])
*/
function endtouch(event)
{
event.preventDefault();
if (event.touches.length==0)
{
if (thetouches==1)
{
var someid=thetouchstart[2]
if (thetouchstart.length==3) // a tap not a slide
{
// do nothing
}
else // a slide 
{
var somediffy=thetouchstart[3]-thetouchstart[0]
var somediffx=thetouchstart[4]-thetouchstart[1]
var somecheck=true
if (somediffx<3*scalef && somediffy<3*scalef) // if move very small treat as tap (do nothing) 
{
thetouchstart=[]
thetouches=0
return
}
var somerads=Math.atan2(somediffy, somediffx)
dealwithslide(someid, somerads)

thetouchstart=[]
thetouches=0
} // end slide
} // end touches=1
else // two or more fingers, do nothing
{
thetouchstart=[]
thetouches=0
}
} // end touches length=0
}

var oblique=Math.atan(2/5) // angle in radians of right side slope from vertical
var vertup=-1*(Math.PI/2)
var vertdown=(Math.PI/2)
var horizright=0
var horizleft=Math.PI
var slopeupright=vertup+oblique
var slopedownleft=vertdown+oblique
var slopeupleft=vertup-oblique
var slopedownright=vertdown-oblique
var maxerror=Math.PI/10 // allow 18 degs error in slide angle
// ['f', 'r', 'b', 'l', 't', 'd']

// 'x' below means we don't care about that coordinate
var slideactions=
[
['', 'f', 'x', 0, [[horizright, [4, 1]], [horizleft, [4, 0]]]],
['', 'f', 0, 'x', [[vertup, [3, 1]], [vertdown, [3, 0]]]],
['', 'f', 2, 'x', [[vertup, [1, 0]], [vertdown, [1, 1]]]],
['', 'f', 'x', 2, [[horizright, [5, 0]], [horizleft, [5, 1]]]],
['', 'f', 'x', 1, [[horizright, [10, 1]], [horizleft, [10, 0]]]], // middle top
['', 'f', 1, 'x', [[vertup, [7, 0]], [vertdown, [7, 1]]]], // middle right

['', 't', 'x', 0, [[horizright, [2, 1]], [horizleft, [2, 0]]]],
['', 't', 0, 'x', [[slopeupright, [3, 1]], [slopedownleft, [3, 0]]]],
['', 't', 2, 'x', [[slopeupright, [1, 0]], [slopedownleft, [1, 1]]]],
['', 't', 'x', 2, [[horizright, [0, 0]], [horizleft, [0, 1]]]],
['', 't', 'x', 1, [[horizright, [6, 0]], [horizleft, [6, 1]]]], // middle front
['', 't', 1, 'x', [[slopeupright, [7, 0]], [slopedownleft, [7, 1]]]], // middle right
/*
['', 'r', 'x', 0, [[slopeupright, [4, 1]], [slopedownleft, [4, 0]]]],
['', 'r', 0, 'x', [[vertup, [0, 1]], [vertdown, [0, 0]]]],
['', 'r', 2, 'x', [[vertup, [2, 0]], [vertdown, [2, 1]]]],
['', 'r', 'x', 2, [[slopeupright, [5, 0]], [slopedownleft, [5, 1]]]],
['', 'r', 'x', 1, [[slopeupright, [10, 1]], [slopedownleft, [10, 0]]]], // middle top
['', 'r', 1, 'x', [[vertup, [6, 1]], [vertdown, [6, 0]]]], // middle right
*/
['b', 'f', 'x', 0, [[horizright, [4, 1]], [horizleft, [4, 0]]]],
['b', 'f', 0, 'x', [[slopeupleft, [3, 1]], [slopedownright, [3, 0]]]],
['b', 'f', 2, 'x', [[slopeupleft, [1, 0]], [slopedownright, [1, 1]]]],
['b', 'f', 'x', 2, [[horizright, [5, 0]], [horizleft, [5, 1]]]],
['b', 'f', 'x', 1, [[horizright, [10, 1]], [horizleft, [10, 0]]]], // middle top
['b', 'f', 1, 'x', [[slopeupleft, [7, 0]], [slopedownright, [7, 1]]]], // middle right

['b', 't', 'x', 0, [[horizright, [2, 1]], [horizleft, [2, 0]]]],
['b', 't', 0, 'x', [[vertup, [3, 1]], [vertdown, [3, 0]]]],
['b', 't', 2, 'x', [[vertup, [1, 0]], [vertdown, [1, 1]]]],
['b', 't', 'x', 2, [[horizright, [0, 0]], [horizleft, [0, 1]]]],
['b', 't', 'x', 1, [[horizright, [6, 0]], [horizleft, [6, 1]]]], // middle front
['b', 't', 1, 'x', [[vertup, [7, 0]], [vertdown, [7, 1]]]] // middle right
/*
,
['b', 'r', 'x', 0, [[slopeupright, [4, 1]], [slopedownleft, [4, 0]]]],
['b', 'r', 0, 'x', [[vertup, [0, 1]], [vertdown, [0, 0]]]],
['b', 'r', 2, 'x', [[vertup, [2, 0]], [vertdown, [2, 1]]]],
['b', 'r', 'x', 2, [[slopeupright, [5, 0]], [slopedownleft, [5, 1]]]],
['b', 'r', 'x', 1, [[slopeupright, [10, 1]], [slopedownleft, [10, 0]]]], // middle top
['b', 'r', 1, 'x', [[vertup, [6, 1]], [vertdown, [6, 0]]]] // middle right
*/
]
function dealwithslide(someid, somerads)
{
var someprefix=''
if (someid.slice(0,1)=='b')
{
someprefix='b'
someid=someid.slice(1)
}
var somelayer=someid.slice(6, 7)
var somei=someid.slice(7, 8)*1
var somej=someid.slice(9,10)*1
if (somerads < -0.9*(Math.PI)) {somerads=somerads*-1} // deals with case that at 9 o'clock, angle jumps from pos to neg
var someturn=[]
// alert([someprefix, somelayer, somei, somej, somerads])
for (var i=0; i<slideactions.length; i++)
{
if (someprefix==slideactions[i][0] && somelayer==slideactions[i][1] && (slideactions[i][2]=='x' || somei==slideactions[i][2]) && (slideactions[i][3]=='x' || somej==slideactions[i][3]))
{
if (somerads>=slideactions[i][4][0][0]-maxerror && somerads<=slideactions[i][4][0][0]+maxerror)
{
someturn=slideactions[i][4][0][1]
break
}
if (somerads>=slideactions[i][4][1][0]-maxerror && somerads<=slideactions[i][4][1][0]+maxerror)
{
someturn=slideactions[i][4][1][1]
break
}
}

}
// alert([someprefix, somelayer, somei, somej, somerads])
if (someturn.length>0)
{
if (someturn[0]>=6) 
{
turnmiddle(someturn[0]-6, someturn[1])
}
else
{
turnasideorcube(someturn[0], someturn[1])
}
}
}

// end of code for touch-based card control


/*
var resetadbreakcounter=7
var adbreakcounter
function dealwithadbreak()
{

if (adsrequired==1)
{
adbreakcounter=GetLocalVal('adbreakcounter')*1
adbreakcounter--
if (adbreakcounter<=0)
{
showadbreak()
}
else
{
SetLocalVal('adbreakcounter', adbreakcounter)
continuegame()
}
}
else
{
continuegame()
}
}
*/

function savethestate(somestate)
{
kublitzcubestatus=somestate
SetLocalVal('recordedgapfactor', recordedgapfactor)
SetLocalVal('cubestate', cubestate)
SetLocalVal('sidesdisplayed', sidesdisplayed)
SetLocalVal('siderotationdetails', siderotationdetails)
SetLocalVal('tobeturned', tobeturned)
SetLocalVal('tobeshown', tobeshown)
if (moverecord.length>200)
{
moverecord=moverecord.slice(moverecord.length-200)
ensurecompletemoves()
}
// above limits
SetLocalVal('moverecord', moverecord)
SetLocalVal('layersettings', layersettings)

SetLocalVal('kublitzcubestatus', kublitzcubestatus)

}

function ensurecompletemoves()
{
// this ensures that when we remove old moves from the moverecord, we don't
// break up sequences/doubles.  15 is more than any sequence in our Cube
for (var i=0; i<15; i++)
{
if (moverecord[i][0]==103)
{
moverecord=moverecord.slice(i)
break
}
}

}

function loadsavedstate()
{
// following for first use
// if (GetLocalVal('adbreakcounter')==null) {SetLocalVal('adbreakcounter', resetadbreakcounter)}
if (GetLocalVal('cubestate')==null) {SetLocalVal('cubestate', cubestate)}
if (GetLocalVal('recordedgapfactor')==null) {SetLocalVal('recordedgapfactor', recordedgapfactor)}
if (GetLocalVal('sidesdisplayed')==null) {SetLocalVal('sidesdisplayed', sidesdisplayed)}
if (GetLocalVal('siderotationdetails')==null) {SetLocalVal('siderotationdetails', siderotationdetails)}
if (GetLocalVal('tobeturned')==null) {SetLocalVal('tobeturned', tobeturned)}
if (GetLocalVal('tobeshown')==null) {SetLocalVal('tobeshown', tobeshown)}
if (GetLocalVal('moverecord')==null) {SetLocalVal('moverecord', moverecord)}
if (GetLocalVal('layersettings')==null) {SetLocalVal('layersettings', layersettings)}
kublitzcubestatus=GetLocalList('kublitzcubestatus')
cubestate=convertlisttocubestate(GetLocalList('cubestate'))
recordedgapfactor=GetLocalVal('recordedgapfactor')*1
gapfactor=recordedgapfactor
setgap(gapfactor)
// changetextvalue('gapfactordisplay', gapfactor)
sidesdisplayed=GetLocalList('sidesdisplayed')
siderotationdetails=GetLocalList('siderotationdetails')
tobeturned=GetLocalVal('tobeturned')*1
turnfacecube(tobeturned)
tobeshown=GetLocalVal('tobeshown')*1
showview(tobeshown)
moverecord=convertlisttomoverecord(GetLocalList('moverecord'))
layersettings=GetLocalList('layersettings')
showthelayers()
}


function convertlisttomoverecord(somearray)
{
var somereturn=[]
var somesub=-1
for (var i=0; i<somearray.length; i++)
{
if (somearray[i]>100)
{
somesub++
somereturn[somesub]=[somearray[i]]
}
else
{
somereturn[somesub]=somereturn[somesub].concat([somearray[i]])
}
}
return somereturn
}



function continuegame()
{
// reset some variables
// kublitzcubestatus first element: -2=never been used, -1=new puzzle request, 1=game underway
changetextvalue('output', '<span style="font-size:1px>&nbsp;</span>')
displaycube()
document.getElementById('theboard').style.display='block'
document.getElementById('output').style.display='none'
document.getElementById('help').style.display='none'
}




function openwebpage(someurl)
{
document.location.href=someurl
}

var displayadnum=0
var displayhelptexts=
[
'<table width=100% border=0 bgcolor=cyan  onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="kublitzcubeicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*9)+'px"><b>Help</b> provides guidance on controls, an explanation of notation, details of Top Tools and advice on solving the cube.</td></tr></table>',
'<table width=100% border=0 bgcolor=cyan  onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="kublitzcubeicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*9)+'px"><b>New</b> starts a new puzzle.<br><b>Undo</b> undoes move.<br><b>Reset</b> shows the goal state.</td></tr></table>',
'<table width=100% border=0 bgcolor=cyan  onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="kublitzcubeicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*9)+'px"><span style="font-weight:bold">TopAccolades</span><br>Apps and web services</td></tr></table>',
'<table width=100% border=0 bgcolor="lightblue" onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> i.compactfun.com</b><br>This app and other apps are also accessible online from many devices at i.compactfun.com</td></tr></table>'

]

var displayadtexts=displayhelptexts

var displayupgradetexts=
[
]

var displayapptexts=
[
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="rummyicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Rummy 7 -  Try the app now!</b><br>Play 7-card Rummy against the system or another player.  Full animation.</td></tr></table>',
'<table width=100% border=0 bgcolor="#FF8888" onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="csisherlock144.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>CSI Sherlock -  Try the app now!</b><br>Vic has been killed.  Try to solve who killed Vic, with what, and where, in this great interactive logic puzzle.</td></tr></table>',
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="xword4x4icon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Xword<sup>4x4</sup> - Try the app now</b><br>Great Play & Pass crossword puzzle for up to 4 players. Define your own board layouts!</td></tr></table>',
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="pegsolitaireicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Peg Solitaire -  Download the app now!</b><br>Play the full puzzle or a cut-down version.  Guide and notation to help you solve and remember the full puzzle</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>31 classic/original games and puzzles in one app: words, numbers, logic, blocks, strategy...</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Rummy, 4-in-a-line, Pentad, Letters & Numbers Games, Turncoat and Yak</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Hangman, WordSearch, Pentad, Linkword Snap and Word Ladder</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Step Challenge, Pyramid Numbers, Sudoku and Numberskull </td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Sudoku, Memory Pairs, Master Code, Mystery Clues and Bidinca </td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Peg Solitaire, Towers of Hanoi, Poker Pentad, Mancala and Code 4x6 </td></tr></table>',
'<table width=100% border=0 bgcolor=cyan onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="bbflogo.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>BrainBoxFun -  Try the app now!</b><br>10 brain-training exercises inc.: memory, verbal comprehension, pattern recognition, word power and mental arithmetic</td></tr></table>'


]

var displaywmltexts=
[
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Dedicate one of our many personal home pages to someone you love for a Birthday, Anniversary, Valentine\'s, Mother\'s Day or Father\'s Day.</td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Our personal web site addresses come in two parts:<br><b><span style="color:#FF0000">Defined by you</span>.<span style="color:green">Supplied by us</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>The parts we supply include:<br><b><span style="color:green">in-the.land</span><br><span style="color:green">in-the-whole.world</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>With these ones you supply an OPINION or maybe a NAME plus an OPINION</td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Full examples: <b><span style="color:#FF0000">best-wife</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">sexiest-lover</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-husband</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">greatest</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>More examples: <b><span style="color:#FF0000">best-mom</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-dad</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-daughter</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">sexiest</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>More examples: <b><span style="color:#FF0000">best-lover</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">joe-best-husband</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">raj-best-son</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">top-dad</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Other parts we supply are:<br><b><span style="color:green">best-in-the.world</span>, <span style="color:green">the-world-to.me</span><br><span style="color:green">supremely.sexy</span>, <span style="color:green">just-so.sexy</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Full examples: <b><span style="color:#FF0000">tim-wild</span>.<span style="color:green">best-in-the.world</span><br><span style="color:#FF0000">emma</span>.<span style="color:green">supremely.sexy</span>, <span style="color:#FF0000">george</span>.<span style="color:green">just-so.sexy</span><br><span style="color:#FF0000">lola</span>.<span style="color:green">the-world-to.me</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br><span style="color:purple"><b>Imagine your loved one\'s thrill at seeing such a home page dedicated to them on the special day!</b></span></td></tr></table>'
]

var displayllatexts=
[
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="A_1_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Letter Lookalikes</b><br>Photos resembling letters, numbers and symbols</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="E_1_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Frames for names and wishes for birthdays, anniversaries, Valentine\'s Day, Mother\'s Day, etc.</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="H_5_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Pictures that say 1000s of words<br><b>www.letterlookalikes.com</b></td></tr></table>'
]


if (adsrequired==1)
{
displayadtexts=
displayhelptexts.concat(displayupgradetexts).concat(displaywmltexts).concat(displayllatexts).concat(displayapptexts)
}
else
{
displayadtexts=displayhelptexts
}



function showcountdownad()
{
changetextvalue('countdownadtext', currentadtext())

}

function showcurrentad()
{
if (displayadtexts.length>0)
{
changetextvalue('currentadtext', currentadtext())
}
}

function increaseadnum()
{
displayadnum++
if (displayadnum>=displayadtexts.length) {displayadnum=0}
}

function currentadtext()
{
var sometext='<div style="width:100%;height:'+Math.floor(scalef*3)+'px"></div><table width=100% border=0 align=center bgcolor=silver><tr><td align=center>'+displayadtexts[displayadnum]+'</td></tr></table>'
increaseadnum()
return sometext
}




function mydecision(somemessage, someok, somecancel)
{

document.getElementById('theboard').style.display='none'
changetextvalue('output', '<br><table width=95% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0 align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0 cellspacing=0><tr><td  bgcolor=lemonchiffon height='+Math.floor(scalef*50)+' align=center valign=middle colspan=2><br>'+centralimage()+'</td></tr><tr><td  colspan=2 bgcolor=lemonchiffon align=center height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'><td colspan=2></td></tr><tr bgcolor=white><td  onClick="'+somecancel+'" align=center bgcolor=white>'+graphicfor('Cancel')+'</td><td onClick="'+someok+'" align=center><br>'+graphicfor('OK')+'<br></td></tr></table></td></tr></table>')
document.getElementById('output').style.display='block'

}







function ith(someitem, somelist)
{
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]==someitem) {return[i]}
}
return -1
}



function splitliston(someitem, somelist)
{
var someindex
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]==someitem) 
{
someindex=i
break
}
}
var somebeg=somelist.slice(0, someindex)
var someend=somelist.slice(someindex+1)
return([somebeg, someend])
}


var preventbuttonactions=0
function myalert(somemessage)
{
preventbuttonactions=1

document.getElementById('theboard').style.display='none'
changetextvalue('output',  '<br><table width=95% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0><tr><td height='+Math.floor(scalef*50)+' align=center valign=middle><br>'+centralimage()+'</td></tr><td  height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'></td></tr><tr><td bgcolor=white><table border=0 align=center><tr><td onClick="acknowledge()"><br>'+graphicfor('OK')+'<br></td></tr></table></td></tr></table></td></tr></table>')
document.getElementById('output').style.display='block'

}

function acknowledge()
{
preventbuttonactions=0
continuegame()

}




function donowt()
{
}

function runonload()
{
// add touch-sensitive slide controls
addtouchhandlers()

// deal with remoteads
eval(GetLocalVal('remoteads'))
showcurrentad()
if (GetLocalVal('kublitzcubestatus')==null || GetLocalVal('kublitzcubestatus')==-2) // first use
{
SetLocalVal('kublitzcubestatus', [-2])

document.getElementById('theboard').style.display='none'
var someadvicetext=''
if (localstorageworks==0) {someadvicetext='<span style="color:red">Certain storage functionality is not available. The application will still work, but the state will not be saved when you exit, so next time you\'ll need to start again.<br></span>'}

var somemessage='<b>Welcome to Kublitz Cube from TopAccolades</b><ul><li>Rotate layers by sliding or by tapping buttons</ul><b>Key buttons</b><table width=95% border=0 align=center bgcolor="#8888FF"><tr><td valign=top style="font-weight:bold;text-align:left">New</td><td valign=top>Start a new puzzle</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Help</td><td valign=top>Get help on controls, notation and tools and advice on solving the cube</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Reset</td><td valign=top>Show the puzzle in its goal state, with the 9 cube faces in any layer all being the same colour</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Undo</td><td valign=top>Go back one move</td></tr></table><br>'+someadvicetext+'Tap <b>New</b> button above now to begin.'
changetextvalue('output',  '<br><table width=100% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0 onClick="newpuzzle()"><tr><td height='+Math.floor(scalef*50)+' align=center valign=middle><br><img src="kublitzcubeicon.png"  width='+Math.floor(scalef*36)+'></td></tr><td  height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'></td></tr><tr><td bgcolor=white><table border=0 align=center></table>')
return
}
// above says always give welcome message to start a new puzzle when first loaded
// kublitzcubestatus=GetLocalList('kublitzcubestatus')
// else just continue after setting saved state etc.
loadsavedstate()

continuegame()
}

function convertlisttocubestate(somearray)
{
var somereturn=[]
for (var i=0; i<6; i++)
{
somereturn[i]=[]
for (var j=0; j<9; j++)
{
somereturn[i][j]=somearray[i*9+j]
}
}
return somereturn
}



var showingads=0
var thecdimage='<table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0><tr height='+Math.floor(scalef*10)+' valign=bottom><td valign=bottom><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif" valign=bottom style="display:block"></td><td align=center valign=bottom><img valign=bottom align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif" style="display:block"></td><td valign=bottom><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"  valign=bottom style="display:block"></td></tr><tr height='+Math.floor(scalef*10)+' valign=middle><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif" valign=middle style="display:block"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="solitaireicon.png" border=0 style="display:block"></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif" valign=middle style="display:block"></td></tr><tr height='+Math.floor(scalef*10)+' valign=middle><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif" valign=middle style="display:block"></td><td align=center valign=middle><img valign=middle align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif" style="display:block"></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif" valign=middle style="display:block"></td></tr></table>'

function showad2()
{
continuegame()
}

function showadbreak()
{

showingads=1
changetextvalue('output', '<p style="text-align:center">This trial version of Kublitz Cube includes these ad breaks.<br><br>You can buy the full version of<p style="color:red;font-weight:bold;text-align:center">Rummy 7<br>'+thecdimage+'<p style="text-align:center">This, of course, has no countdown ad breaks.<br><br>Also try other games, puzzles and services from TopAccolades<br><div style="width:100%" id="countdownadtext">&nbsp;</div>')
document.getElementById('theboard').style.display='none'
// document.getElementById('output').style.display='inline'
adcountdown(8)

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='adunselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='adselected.gif'
}
}



var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
adbreakcounter=resetadbreakcounter
SetLocalVal('adbreakcounter', adbreakcounter)
continueafterad()
}
else
{
showcountdownad()
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",4000);
}
}


var suitimages=['red_front', 'blue_front', 'green_front', 'pink_front']
function titleimage(somename)
{
var sometext=''
var someindex=0
sometext=sometext+'<div style="position:relative;top:0px;left:0px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle bgcolor=black>'
for (var i=0; i<2; i++)
{
someindex=i
sometext=sometext+'<tr>'
for (var j=0; j<10; j++)
{
sometext=sometext+'<td><img src="'+suitimages[someindex]+'.png" style="display:block" width='+Math.floor(scalef*10)+' height='+Math.floor(scalef*10)+'></td>'
someindex++
if (someindex==4) {someindex=0}
}
sometext=sometext+'</tr>'

}
sometext=sometext+'</table><table border=0 width=100% height='+Math.floor(scalef*20)+' style="position:absolute;top:0px;left:0px"><tr><td style="text-align:center;font-size:'+Math.floor(scalef*12)+'px;color:white;font-weight:bold;" valign=middle>'+somename+'</td></tr></table></div>' 
return sometext
}



function centralimage()
{
var sometext=''
var someindex=0
sometext=sometext+'<table border=1 cellpadding=0 cellspacing=0><tr><td><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle bgcolor=black>'
sometext=sometext+'<tr><td><img src="kublitzcubeicon.png" width='+Math.floor(scalef*30)+'  height='+Math.floor(scalef*30)+' style="display:block"></td></tr>'


sometext=sometext+'</table></td></tr></table>' 
return sometext
}




// static

documentwrite('<div style="width:100%;height:'+Math.floor(scalef*360)+'px;background-color:powderblue"><table border=0 align=center valign=top cellspacing=0 cellpadding=0 width='+Math.floor(scalef*230)+'>')
documentwrite('<tr height='+Math.floor(scalef*3)+'><td width='+Math.floor(scalef*50)+'><img src="emptyfiller.png" width='+Math.floor(scalef*50)+'  height='+Math.floor(scalef*2)+' style="display:block"></td><td width='+Math.floor(scalef*10)+'><img src="emptyfiller.png" width='+Math.floor(scalef*10)+'  height='+Math.floor(scalef*2)+' style="display:block"></td><td colspan=3></td><td width='+Math.floor(scalef*10)+'><img src="emptyfiller.png" width='+Math.floor(scalef*10)+'  height='+Math.floor(scalef*2)+' style="display:block"></td><td width='+Math.floor(scalef*50)+'><img src="emptyfiller.png" width='+Math.floor(scalef*50)+'  height='+Math.floor(scalef*2)+' style="display:block"></td></tr>')
documentwrite('<tr height='+Math.floor(scalef*20)+'><td width='+Math.floor(scalef*50)+' onClick="newpuzzle()">'+graphicfor('New')+'</td><td width='+Math.floor(scalef*10)+'><img src="emptyfiller.png" width='+Math.floor(scalef*10)+'></td><td colspan=3 style="text-align:center;font-weight:bold;color:red;font-size:'+Math.floor(scalef*14)+'px">'+titleimage('Kublitz Cube')+'</td><td width='+Math.floor(scalef*10)+'><img src="emptyfiller.png" width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' onClick="showhelp()">'+graphicfor('Help')+'</td></tr>')

documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+(Math.floor(scalef*3))+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="display:none;width:100%" id="theboard">')
// start from other default

var revisedscalef=scalef

var thecubesize=Math.floor(revisedscalef*20)
var thecubetopheight=Math.floor(revisedscalef*10)
var thecubetopwidth=Math.floor(revisedscalef*24)
var thecubesidewidth=Math.floor(revisedscalef*4)
var thecubesideheight=Math.floor(revisedscalef*30)

var recordedgapfactor=4
var gapfactor=recordedgapfactor


function writeoutcubestyles(somefactor)
{
documentwrite('<STYLE>')
var somegap=thecubesize*somefactor
var sometopgap=thecubetopheight*somefactor
var somesidegap=thecubesidewidth*somefactor

var someoverallwidth=3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
var someoverallheight=3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap

var someoriginleft=Math.floor(revisedscalef*85)-Math.floor(someoverallwidth/2)
var someorigintop=Math.floor(revisedscalef*92)-Math.floor(someoverallheight/2)
var sometop=0
var someleft=0
var sometext
// i = across, j=down
// top etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometext='#layer_t'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#layer_td'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#layer_d'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)

}
}

//front etc
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometext='#layer_f'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#layer_fb'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#layer_b'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)

}
}
// right etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometext='#layer_r'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#layer_rl'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#layer_l'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)

}
}



var somepicwidth=Math.floor(revisedscalef*14)

documentwrite('#layer_FA {POSITION:absolute; VISIBILITY:visible;TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')


documentwrite('#layer_FO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_BO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_BA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_RA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_RO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_DO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_DA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_TA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_TO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_LO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_LA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#layer_F {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#layer_B {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#layer_R {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#layer_D {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#layer_T {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#layer_L {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')


// now do top square view

// i = across, j=down
// top etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometext='#blayer_t'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#blayer_td'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#blayer_d'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)

}
}

//front etc
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometext='#blayer_f'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#blayer_fb'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#blayer_b'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)

}
}
// right etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometext='#blayer_r'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#blayer_rl'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)
sometext='#blayer_l'+i+'_'+j+' {POSITION:absolute; VISIBILITY:visible; display:block; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:2}'+'\r\n'
documentwrite(sometext)

}
}



var somepicwidth=Math.floor(revisedscalef*14)

documentwrite('#blayer_FA {POSITION:absolute; VISIBILITY:visible;TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')


documentwrite('#blayer_FO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_BO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_BA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_RA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_RO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_DO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_DA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_TA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_TO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_LO {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_LA {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:4}'+'\r\n')

documentwrite('#blayer_F {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#blayer_B {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#blayer_R {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#blayer_D {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#blayer_T {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('#blayer_L {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

// end top square view






sometop=Math.floor(scalef*10)
someleft=Math.floor(scalef*165)
documentwrite('#layer_SEQUENCES {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')
sometop=Math.floor(scalef*150)

documentwrite('#layer_GAPS {POSITION:absolute; VISIBILITY:visible; TOP:'+sometop+'px; LEFT:'+someleft+'px; Z-INDEX:3}'+'\r\n')

documentwrite('</STYLE>')
}

writeoutcubestyles(gapfactor*0.25)


function setgap(somenew)
{
recordedgapfactor=somenew
gapfactor=recordedgapfactor
for (var i=1; i<=5; i++)
{
document.getElementById('gap'+i).style.color = 'silver'
// changetextvalue('gap'+i, i)
// document.getElementById('gap'+i).style.backgroundColor = 'transparent'

}
document.getElementById('gap'+gapfactor).style.color = 'white'
// changetextvalue('gap'+gapfactor, '<span style="background-color:white">'+gapfactor+'</span>')
// document.getElementById('gap'+gapfactor).style.backgroundColor = 'white'

displaycube()
}



var timer=null
function expand()
{
if (preventbuttonactions==1) {return}
preventbuttonactions=1
gapfactor=1
timedexpand()
}

function timedexpand()
{
displaycube()

if (gapfactor==5)
{
gapfactor=recordedgapfactor
var command='finaldisplaycube()'
}
else
{
gapfactor++
var command='timedexpand()'

}
if (timer != null) {clearTimeout(timer)}
timer= setTimeout(command, 750)
}

function finaldisplaycube()
{
preventbuttonactions=0
displaycube()
}

function showcubeat(someid, sometop, someleft)
{
document.getElementById(someid).style.top = sometop+'px'
document.getElementById(someid).style.left = someleft+'px'

}

function showcubepositions(somefactor)
{
var somegap=thecubesize*somefactor
var sometopgap=thecubetopheight*somefactor
var somesidegap=thecubesidewidth*somefactor


var someoverallwidth=3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
var someoverallheight=3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap

var someoriginleft=Math.floor(revisedscalef*83)-Math.floor(someoverallwidth/2)
var someorigintop=Math.floor(revisedscalef*100)-Math.floor(someoverallheight/2)
var sometop
var someleft
var sometext



// i = across, j=down
// top etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometop=someorigintop+j*(thecubetopheight+sometopgap)
someleft=someoriginleft+(2-j)*(thecubesidewidth+somesidegap)+i*(thecubesize+somegap)
showcubeat('layer_t'+i+'_'+j, sometop, someleft)
sometop=sometop+thecubesize+somegap
showcubeat('layer_td'+i+'_'+j, sometop, someleft)
sometop=sometop+thecubesize+somegap
showcubeat('layer_d'+i+'_'+j, sometop, someleft)

}
}

//front etc
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometop=someorigintop+3*thecubetopheight+2*sometopgap+j*(thecubesize+somegap)
someleft=someoriginleft+i*(thecubesize+somegap)
showcubeat('layer_f'+i+'_'+j, sometop, someleft)
sometop=sometop-(thecubetopheight+sometopgap)
someleft=someleft+thecubesidewidth+somesidegap
showcubeat('layer_fb'+i+'_'+j, sometop, someleft)
sometop=sometop-(thecubetopheight+sometopgap)
someleft=someleft+thecubesidewidth+somesidegap
showcubeat('layer_b'+i+'_'+j, sometop, someleft)

}
}
// right etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometop=someorigintop+2*(thecubetopheight+sometopgap)-i*(thecubetopheight+sometopgap)+j*(thecubesize+somegap)
someleft=someoriginleft+3*thecubesize+2*somegap+i*(thecubesidewidth+somesidegap)
showcubeat('layer_r'+i+'_'+j, sometop, someleft)
someleft=someleft-(thecubesize+somegap)
showcubeat('layer_rl'+i+'_'+j, sometop, someleft)
someleft=someleft-(thecubesize+somegap)
showcubeat('layer_l'+i+'_'+j, sometop, someleft)

}
}
// now the rotation buttons etc.
var somepicwidth=Math.floor(revisedscalef*14)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft
showcubeat('layer_FA', sometop, someleft)


sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap-somepicwidth
someleft=someoriginleft-somepicwidth
showcubeat('layer_FO', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap-somepicwidth
showcubeat('layer_BO', sometop, someleft)

sometop=someorigintop
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('layer_BA', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('layer_RA', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+0.4*somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap-0.2*somepicwidth
showcubeat('layer_RO', sometop, someleft)


sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap
showcubeat('layer_DO', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesize+2*somegap-somepicwidth
showcubeat('layer_DA', sometop, someleft)

sometop=someorigintop
someleft=someoriginleft+3*thecubesidewidth+2*somesidegap-somepicwidth
showcubeat('layer_TA', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft+3*thecubesidewidth+2*somesidegap
showcubeat('layer_TO', sometop, someleft)

sometop=someorigintop+3*thecubetopheight+2*sometopgap
someleft=someoriginleft-somepicwidth
showcubeat('layer_LO', sometop, someleft)

sometop=someorigintop+3*thecubetopheight+2*sometopgap-2.0*somepicwidth
someleft=someoriginleft-0.8*somepicwidth
showcubeat('layer_LA', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft-somepicwidth
showcubeat('layer_F', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('layer_B', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('layer_R', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesize+2*somegap
showcubeat('layer_D', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft+3*thecubesidewidth+2*somesidegap-somepicwidth
showcubeat('layer_T', sometop, someleft)

sometop=someorigintop+3*thecubetopheight+2*sometopgap-somepicwidth
someleft=someoriginleft-somepicwidth
showcubeat('layer_L', sometop, someleft)

// now deal with top square layers
// i = across, j=down
// top etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{

sometop=someorigintop+j*(thecubesize+somegap)
someleft=someoriginleft+i*(thecubesize+somegap)
showcubeat('blayer_t'+i+'_'+j, sometop, someleft)
sometop=sometop+(thecubetopheight+sometopgap)
someleft=someleft+(thecubesidewidth+somesidegap)
showcubeat('blayer_td'+i+'_'+j, sometop, someleft)
sometop=sometop+(thecubetopheight+sometopgap)
someleft=someleft+(thecubesidewidth+somesidegap)
showcubeat('blayer_d'+i+'_'+j, sometop, someleft)

}
}

//front etc
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
sometop=someorigintop+3*thecubesize+2*somegap+j*(thecubetopheight+sometopgap)
someleft=someoriginleft+j*(thecubesidewidth+somesidegap)+i*(thecubesize+somegap)
showcubeat('blayer_f'+i+'_'+j, sometop, someleft)
sometop=sometop-(thecubesize+somegap)
someleft=someleft
showcubeat('blayer_fb'+i+'_'+j, sometop, someleft)
sometop=sometop-(thecubesize+somegap)
someleft=someleft
showcubeat('blayer_b'+i+'_'+j, sometop, someleft)

}
}
// right etc.
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{

sometop=someorigintop+2*thecubesize+2*somegap-i*(thecubesize+somegap)+j*(thecubetopheight+sometopgap)
someleft=someoriginleft+3*thecubesize+2*somegap+j*(thecubesidewidth+somesidegap)
showcubeat('blayer_r'+i+'_'+j, sometop, someleft)
someleft=someleft-(thecubesize+somegap)
showcubeat('blayer_rl'+i+'_'+j, sometop, someleft)
someleft=someleft-(thecubesize+somegap)
showcubeat('blayer_l'+i+'_'+j, sometop, someleft)

}
}
// now the rotation buttons etc.
var somepicwidth=Math.floor(revisedscalef*14)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesidewidth+2*somesidegap
showcubeat('blayer_FA', sometop, someleft)


sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap-somepicwidth
someleft=someoriginleft+3*thecubesidewidth+2*somesidegap-somepicwidth
showcubeat('blayer_FO', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap-somepicwidth
showcubeat('blayer_BO', sometop, someleft)

sometop=someorigintop
someleft=someoriginleft+3*thecubesize+2*somegap
showcubeat('blayer_BA', sometop, someleft)

sometop=someorigintop+3*thecubetopheight+2*sometopgap-2.0*somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap-0.1*somepicwidth
showcubeat('blayer_RA', sometop, someleft)

sometop=someorigintop+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('blayer_RO', sometop, someleft)


sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('blayer_DO', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap-somepicwidth
showcubeat('blayer_DA', sometop, someleft)

sometop=someorigintop
someleft=someoriginleft-somepicwidth
showcubeat('blayer_TA', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft
showcubeat('blayer_TO', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+somepicwidth
someleft=someoriginleft-somepicwidth
showcubeat('blayer_LO', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap-somepicwidth
someleft=someoriginleft-somepicwidth
showcubeat('blayer_LA', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesidewidth+2*somesidegap-somepicwidth
showcubeat('blayer_F', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap
showcubeat('blayer_B', sometop, someleft)

sometop=someorigintop+3*thecubetopheight+2*sometopgap-somepicwidth
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('blayer_R', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap+3*thecubetopheight+2*sometopgap
someleft=someoriginleft+3*thecubesize+2*somegap+3*thecubesidewidth+2*somesidegap
showcubeat('blayer_D', sometop, someleft)

sometop=someorigintop-somepicwidth
someleft=someoriginleft-somepicwidth
showcubeat('blayer_T', sometop, someleft)

sometop=someorigintop+3*thecubesize+2*somegap
someleft=someoriginleft-somepicwidth
showcubeat('blayer_L', sometop, someleft)

}

documentwrite('<DIV style="position:relative;top:0px;left:0px;height:'+pushdown+'px; width:100%"></DIV>')

documentwrite('<DIV style="position:relative;top:0px;left:0px;height:'+Math.floor(scalef*260)+'px">')
var sometext
sometext='<DIV ID="layer_ROTATIONS"><table border=1 cellspacing=0 cellpadding=0 align=center bgcolor="#FFDEAD"><tr><td style="width:'+Math.floor(revisedscalef*45)+'px;font-weight:bold;text-align:center" >Turn</td><td style="width:'+Math.floor(revisedscalef*14)+'px;font-weight:bold;text-align:center;background-color:limegreen"  id="toggle1" onClick="togglelayer(1)"><span style="text-weight:bold;text-align:center">F</td><td style="width:'+Math.floor(revisedscalef*14)+'px;font-weight:bold;text-align:center;background-color:limegreen"   id="toggle2"  onClick="togglelayer(2)"><span style="text-weight:bold;text-align:center">R</td><td style="width:'+Math.floor(revisedscalef*14)+'px;font-weight:bold;text-align:center;background-color:limegreen"   id="toggle3"  onClick="togglelayer(3)"><span style="text-weight:bold;text-align:center">T</td><td style="width:'+Math.floor(revisedscalef*14)+'px;font-weight:bold;text-align:center;background-color:limegreen"   id="toggle4"  onClick="togglelayer(4)"><span style="text-weight:bold;text-align:center">B</td><td style="width:'+Math.floor(revisedscalef*14)+'px;font-weight:bold;text-align:center;background-color:limegreen"   id="toggle5" onClick="togglelayer(5)"><span style="text-weight:bold;text-align:center">L</td><td style="width:'+Math.floor(revisedscalef*14)+'px;font-weight:bold;text-align:center;background-color:limegreen"   id="toggle6" onClick="togglelayer(6)"><span style="text-weight:bold;text-align:center">D</td><td style="width:'+Math.floor(revisedscalef*45)+'px;font-weight:bold;text-align:center;background-color:limegreen"   id="toggle0"   onClick="togglelayer(0)">All</td></tr><tr><td ID="turnaface" style="text-align:center;background-color:limegreen" onClick="turnfacecube(0)">Layer</td><td onClick="turnasideorcube(0,0)" style="text-align:center;background-color:#8888FF">O</td><td onClick="turnasideorcube(1,0)"  style="text-align:center;background-color:#8888FF">O</td><td onClick="turnasideorcube(4,0)"  style="text-align:center;background-color:#8888FF">O</td><td onClick="turnasideorcube(2,0)"  style="text-align:center;background-color:#8888FF">O</td><td onClick="turnasideorcube(3,0)"  style="text-align:center;background-color:#8888FF">O</td><td onClick="turnasideorcube(5,0)"  style="text-align:center;background-color:#8888FF">O</td><td id="showviewfront" style="text-align:center;background-color:limegreen" onClick="showview(0)">Front</td></tr><tr><td id="turnacube" style="text-align:center;background-color:white" onClick="turnfacecube(1)">Cube</td><td onClick="turnasideorcube(0,1)"  style="text-align:center;background-color:#FF8888">A</td><td onClick="turnasideorcube(1,1)" style="text-align:center;background-color:#FF8888">A</td><td onClick="turnasideorcube(4,1)" style="text-align:center;background-color:#FF8888">A</td><td onClick="turnasideorcube(2,1)" style="text-align:center;background-color:#FF8888">A</td><td onClick="turnasideorcube(3,1)" style="text-align:center;background-color:#FF8888">A</td><td onClick="turnasideorcube(5,1)" style="text-align:center;background-color:#FF8888">A</td><td id="showviewtop" style="text-align:center;background-color:white" onClick="showview(1)">Top</td></tr><tr><td style="text-align:center;background-color:gold" onClick="settempcube()">Temp</td><td onClick="turnasideorcube(0,1);turnasideorcube(0,1);recorddouble()" style="text-align:center;background-color:#FFFFAA">I</td><td onClick="turnasideorcube(1,1);turnasideorcube(1,1);recorddouble()" style="text-align:center;background-color:#FFFFAA">I</td><td onClick="turnasideorcube(4,1);turnasideorcube(4,1);recorddouble()" style="text-align:center;background-color:#FFFFAA">I</td><td onClick="turnasideorcube(2,1);turnasideorcube(2,1);recorddouble()" style="text-align:center;background-color:#FFFFAA">I</td><td onClick="turnasideorcube(3,1);turnasideorcube(3,1);recorddouble()" style="text-align:center;background-color:#FFFFAA">I</td><td onClick="turnasideorcube(5,1);turnasideorcube(5,1);recorddouble()" style="text-align:center;background-color:#FFFFAA">I</td><td style="text-align:center;color:black;background-color:gold" valign=middle onClick="expand()">Expand</td></tr></table></DIV>'+'\r\n'
documentwrite(sometext)


var sideletters=['F', 'R', 'B', 'L', 'T', 'D']
var directionletters=['O', 'A']
var sideletterslc=['f', 'r', 'b', 'l', 't', 'd']
var directionletterslc=['o', 'a']

documentwrite('<DIV style="display:block;position:relative;background-color:white">')
// i = across, j=down
var thecubedivlist=[]

documentwrite('<DIV style="display:block;position:relative;background-color:powderblue" id="frontsquare">')

var someimagelist=[]

// before writing out images, we use an index (from 0 - 6) to indicate distance from the back, down, left corner (x + y + z).  This ensures that the images will be correctly layered.



// down
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+j+0, '<DIV ID="layer_d'+i+'_'+j+'"><IMG name=img_down'+i+'_'+(2-j)+' SRC="yellow_top.png" style="display:block;width:'+thecubetopwidth+'px;height:'+thecubetopheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_d'+i+'_'+j
}
}

//back
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+2-j+0, '<DIV ID="layer_b'+i+'_'+j+'"><IMG name=img_back'+(2-i)+'_'+j+' SRC="pink_front.png"  style="display:block;width:'+thecubesize+'px;height:'+thecubesize+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_b'+i+'_'+j

}
}



// left
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[2-i+2-j+0, '<DIV ID="layer_l'+i+'_'+j+'"><IMG name=img_left'+(2-i)+'_'+j+' SRC="green_right.png"  style="display:block;width:'+thecubesidewidth+'px;height:'+thecubesideheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_l'+i+'_'+j

}
}






// top-down middle
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+j+1, '<DIV ID="layer_td'+i+'_'+j+'"><IMG name=img_topdown'+i+'_'+(2-j)+' SRC="gray_top.png" style="display:block;width:'+thecubetopwidth+'px;height:'+thecubetopheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_td'+i+'_'+j

}
}

//front-back middle
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+2-j+1, '<DIV ID="layer_fb'+i+'_'+j+'"><IMG name=img_frontback'+(2-i)+'_'+j+' SRC="gray_front.png"  style="display:block;width:'+thecubesize+'px;height:'+thecubesize+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_fb'+i+'_'+j

}
}

// right-left middle
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[2-i+2-j+1, '<DIV ID="layer_rl'+i+'_'+j+'"><IMG name=img_rightleft'+i+'_'+j+' SRC="gray_right.png"  style="display:block;width:'+thecubesidewidth+'px;height:'+thecubesideheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_rl'+i+'_'+j
}
}


// top
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+j+2, '<DIV ID="layer_t'+i+'_'+j+'"><IMG name=img_top'+i+'_'+j+' SRC="white_top.png"  style="display:block;width:'+thecubetopwidth+'px;height:'+thecubetopheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_t'+i+'_'+j

}
}



//front
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+2-j+2, '<DIV ID="layer_f'+i+'_'+j+'"><IMG name=img_front'+i+'_'+j+' SRC="red_front.png"  style="display:block;width:'+thecubesize+'px;height:'+thecubesize+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_f'+i+'_'+j

}
}


// right
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[2-i+2-j+2, '<DIV ID="layer_r'+i+'_'+j+'"><IMG name=img_right'+i+'_'+j+' SRC="blue_right.png"  style="display:block;width:'+thecubesidewidth+'px;height:'+thecubesideheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='layer_r'+i+'_'+j

}
}

someimagelist.sort(function(a, b){return a[0]-b[0]});

for (var i=0; i<someimagelist.length; i++)
{
documentwrite(someimagelist[i][1])
}






for (var i=0; i<6; i++)
{
for (var j=0; j<2; j++)
{
documentwrite('<div id="layer_'+sideletters[i]+directionletters[j]+'"><img  onClick="turnasideorcube('+i+', '+j+')" src="'+sideletterslc[i]+directionletterslc[j]+'.png"   style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"></div>'+'\r\n')

}
}





sometext='<DIV ID="layer_F"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>F</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="layer_B"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>B</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="layer_R"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>R</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="layer_D"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>D</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="layer_T"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>T</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="layer_L"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>L</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

documentwrite('</DIV>')

// now write out top square details
documentwrite('<DIV style="display:none;position:relative;background-color:powderblue" id="topsquare">')

// i = across, j=down

var someimagelist=[]

// before writing out images, we use an index (from 0 - 6) to indicate distance from the back, down, left corner (x + y + z).  This ensures that the images will be correctly blayered.


// down
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+j+0, '<DIV ID="blayer_d'+i+'_'+j+'"><IMG name=bimg_down'+i+'_'+(2-j)+' SRC="byellow_top.png" style="display:block;width:'+thecubesize+'px;height:'+thecubesize+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_d'+i+'_'+j
}
}

//back
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+2-j+0, '<DIV ID="blayer_b'+i+'_'+j+'"><IMG name=bimg_back'+(2-i)+'_'+j+' SRC="bpink_front.png"  style="display:block;width:'+thecubetopwidth+'px;height:'+thecubetopheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_b'+i+'_'+j

}
}



// left
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[2-i+2-j+0, '<DIV ID="blayer_l'+i+'_'+j+'"><IMG name=bimg_left'+(2-i)+'_'+j+' SRC="bgreen_right.png"  style="display:block;width:'+thecubesidewidth+'px;height:'+thecubesideheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_l'+i+'_'+j

}
}






// top-down middle
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+j+1, '<DIV ID="blayer_td'+i+'_'+j+'"><IMG name=bimg_topdown'+i+'_'+(2-j)+' SRC="bgray_top.png" style="display:block;width:'+thecubesize+'px;height:'+thecubesize+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_td'+i+'_'+j

}
}

//front-back middle
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+2-j+1, '<DIV ID="blayer_fb'+i+'_'+j+'"><IMG name=bimg_frontback'+(2-i)+'_'+j+' SRC="bgray_front.png"  style="display:block;width:'+thecubetopwidth+'px;height:'+thecubetopheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_fb'+i+'_'+j

}
}

// right-left middle
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[2-i+2-j+1, '<DIV ID="blayer_rl'+i+'_'+j+'"><IMG name=bimg_rightleft'+i+'_'+j+' SRC="bgray_right.png"  style="display:block;width:'+thecubesidewidth+'px;height:'+thecubesideheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_rl'+i+'_'+j
}
}


// top
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+j+2, '<DIV ID="blayer_t'+i+'_'+j+'"><IMG name=bimg_top'+i+'_'+j+' SRC="bwhite_top.png"  style="display:block;width:'+thecubesize+'px;height:'+thecubesize+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_t'+i+'_'+j

}
}



//front
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[i+2-j+2, '<DIV ID="blayer_f'+i+'_'+j+'"><IMG name=bimg_front'+i+'_'+j+' SRC="bred_front.png"  style="display:block;width:'+thecubetopwidth+'px;height:'+thecubetopheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_f'+i+'_'+j

}
}


// right
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
someimagelist[someimagelist.length]=[2-i+2-j+2, '<DIV ID="blayer_r'+i+'_'+j+'"><IMG name=bimg_right'+i+'_'+j+' SRC="bblue_right.png"  style="display:block;width:'+thecubesidewidth+'px;height:'+thecubesideheight+'px"></DIV>'+'\r\n']
thecubedivlist[thecubedivlist.length]='blayer_r'+i+'_'+j

}
}


someimagelist.sort(function(a, b){return a[0]-b[0]});

for (var i=0; i<someimagelist.length; i++)
{
documentwrite(someimagelist[i][1])
}






for (var i=0; i<6; i++)
{
for (var j=0; j<2; j++)
{
documentwrite('<div id="blayer_'+sideletters[i]+directionletters[j]+'"><img  onClick="turnasideorcube('+i+', '+j+')" SRC="b'+sideletterslc[i]+directionletterslc[j]+'.png"   style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"></div>'+'\r\n')

}
}





sometext='<DIV ID="blayer_F"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>F</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="blayer_B"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>B</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="blayer_R"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>R</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="blayer_D"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>D</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="blayer_T"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>T</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

sometext='<DIV ID="blayer_L"><DIV  style="display:block;width:'+Math.floor(revisedscalef*14)+'px;height:'+Math.floor(revisedscalef*14)+'px"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle><tr><td><b>L</b></td></tr></table></DIV></DIV>'+'\r\n'
documentwrite(sometext)

documentwrite('</DIV>')








sometext='<DIV ID="layer_SEQUENCES"><table border=1 cellpadding=0 cellspacing=0 style="background-color:#FFDEAD" ><tr><td style="width:'+Math.floor(revisedscalef*50)+'px;background-color:gray;color:white;text-align:center" colspan=2>Top&nbsp;Tools</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">&gt;&gt;</td></tr><tr><td colspan=2 style="text-align:center">Flipper</td></tr><tr><td width='+Math.floor(revisedscalef*25)+' onClick="rundirectedtoptool(0, 0)"><img width='+Math.floor(revisedscalef*25)+' src="revfotorotarafaicon.gif" style="display:block"></td><td width='+Math.floor(revisedscalef*25)+'  onClick="rundirectedtoptool(0, 1)"><img width='+Math.floor(revisedscalef*25)+' src="fotorotarafaicon.gif" style="display:block"></td></tr><tr><td colspan=2 style="text-align:center">Swapper</td></tr><tr><td width='+Math.floor(revisedscalef*25)+' onClick="rundirectedtoptool(1, 0)"><img width='+Math.floor(revisedscalef*25)+' src="revlotaratolatarotiicon.gif" style="display:block"></td><td width='+Math.floor(revisedscalef*25)+'  onClick="rundirectedtoptool(1, 1)"><img width='+Math.floor(revisedscalef*25)+' src="lotaratolatarotiicon.gif" style="display:block"></td></tr><tr><td colspan=2 style="text-align:center">Twister</td></tr><tr><td width='+Math.floor(revisedscalef*25)+' onClick="rundirectedtoptool(2, 0)"><img width='+Math.floor(revisedscalef*25)+' src="revratarotaratirotiicon.gif" style="display:block"></td><td width='+Math.floor(revisedscalef*25)+'  onClick="rundirectedtoptool(2, 1)"><img width='+Math.floor(revisedscalef*25)+' src="ratarotaratirotiicon.gif" style="display:block"></td></tr><tr><td colspan=2 style="text-align:center">Looper</td></tr><tr><td width='+Math.floor(revisedscalef*25)+' onClick="rundirectedtoptool(3, 0)"><img width='+Math.floor(revisedscalef*25)+' src="revritafobarifabotariicon.gif" style="display:block"></td><td width='+Math.floor(revisedscalef*25)+'  onClick="rundirectedtoptool(3, 1)"><img width='+Math.floor(revisedscalef*25)+' src="ritafobarifabotariicon.gif" style="display:block"></td></tr></table></DIV>'+'\r\n'
documentwrite(sometext)

documentwrite('</DIV>')

var layerimages=
[
['F', ['layer_t0_2', 'layer_t1_2', 'layer_t2_2', 'layer_td0_2', 'layer_td1_2', 'layer_td2_2','layer_d0_2', 'layer_d1_2', 'layer_d2_2',
      'layer_f0_0', 'layer_f0_1','layer_f0_2','layer_f1_0', 'layer_f1_1','layer_f1_2','layer_f2_0', 'layer_f2_1','layer_f2_2',
       'layer_l0_0','layer_l0_1', 'layer_l0_2', 'layer_rl0_0','layer_rl0_1', 'layer_rl0_2', 'layer_r0_0','layer_r0_1', 'layer_r0_2']],
       
['B', ['layer_t0_0', 'layer_t1_0', 'layer_t2_0', 'layer_td0_0', 'layer_td1_0', 'layer_td2_0','layer_d0_0', 'layer_d1_0', 'layer_d2_0',
      'layer_b0_0', 'layer_b0_1','layer_b0_2','layer_b1_0', 'layer_b1_1','layer_b1_2','layer_b2_0', 'layer_b2_1','layer_b2_2',
       'layer_l2_0','layer_l2_1', 'layer_l2_2', 'layer_rl2_0','layer_rl2_1', 'layer_rl2_2', 'layer_r2_0','layer_r2_1', 'layer_r2_2']],

['T', ['layer_b0_0', 'layer_b1_0', 'layer_b2_0', 'layer_fb0_0', 'layer_fb1_0', 'layer_fb2_0','layer_f0_0', 'layer_f1_0', 'layer_f2_0',
      'layer_t0_0', 'layer_t0_1','layer_t0_2','layer_t1_0', 'layer_t1_1','layer_t1_2','layer_t2_0', 'layer_t2_1','layer_t2_2',
       'layer_l0_0','layer_l1_0', 'layer_l2_0', 'layer_rl0_0','layer_rl1_0', 'layer_rl2_0', 'layer_r0_0','layer_r1_0', 'layer_r2_0']],

['D', ['layer_b0_2', 'layer_b1_2', 'layer_b2_2', 'layer_fb0_2', 'layer_fb1_2', 'layer_fb2_2','layer_f0_2', 'layer_f1_2', 'layer_f2_2',
      'layer_d0_0', 'layer_d0_1','layer_d0_2','layer_d1_0', 'layer_d1_1','layer_d1_2','layer_d2_0', 'layer_d2_1','layer_d2_2',
       'layer_l0_2','layer_l1_2', 'layer_l2_2', 'layer_rl0_2','layer_rl1_2', 'layer_rl2_2', 'layer_r0_2','layer_r1_2', 'layer_r2_2']],

['R', ['layer_t2_2', 'layer_t2_1', 'layer_t2_0', 'layer_td2_2', 'layer_td2_1', 'layer_td2_0','layer_d2_2', 'layer_d2_1', 'layer_d2_0',
      'layer_r0_0', 'layer_r0_1','layer_r0_2','layer_r1_0', 'layer_r1_1','layer_r1_2','layer_r2_0', 'layer_r2_1','layer_r2_2',
       'layer_f2_0','layer_f2_1', 'layer_f2_2', 'layer_fb2_0','layer_fb2_1', 'layer_fb2_2', 'layer_b2_0','layer_b2_1', 'layer_b2_2']],

['L', ['layer_t0_2', 'layer_t0_1', 'layer_t0_0', 'layer_td0_2', 'layer_td0_1', 'layer_td0_0','layer_d0_2', 'layer_d0_1', 'layer_d0_0',
      'layer_l0_0', 'layer_l0_1','layer_l0_2','layer_l1_0', 'layer_l1_1','layer_l1_2','layer_l2_0', 'layer_l2_1','layer_l2_2',
       'layer_f0_0','layer_f0_1', 'layer_f0_2', 'layer_fb0_0','layer_fb0_1', 'layer_fb0_2', 'layer_b0_0','layer_b0_1', 'layer_b0_2']],

]

var tobeshown=0
function showview(someview)
{
if (preventbuttonactions==1) {return}
tobeshown=someview
SetLocalVal('tobeshown', someview)
if (someview==0)
{
document.getElementById('frontsquare').style.display = 'block'
document.getElementById('topsquare').style.display = 'none'
document.getElementById('showviewfront').style.backgroundColor = 'limegreen'
document.getElementById('showviewtop').style.backgroundColor = 'white'

}
else
{
document.getElementById('frontsquare').style.display = 'none'
document.getElementById('topsquare').style.display = 'block'
document.getElementById('showviewfront').style.backgroundColor = 'white'
document.getElementById('showviewtop').style.backgroundColor = 'limegreen'
}

}



var layersettings=[1,1,1,1,1,1,1]
var layersettingnames=['All', 'F', 'R', 'T', 'B', 'L', 'D']

function togglelayer(somenum)
{
layersettings[somenum]=1-layersettings[somenum]
if (somenum==0) // if toggling all, turn them all on or off
{
if (layersettings[0]==1)
{

layersettings=[1,1,1,1,1,1,1]
}
else
{
layersettings=[0,0,0,0,0,0,0]
}
}
SetLocalVal('layersettings', layersettings)
showthelayers()
}

function showthelayers()
{
for (var i=0; i<7; i++)
{
if (layersettings[i]==1)
{
document.getElementById('toggle'+i).style.backgroundColor = 'limegreen'
}
else
{
document.getElementById('toggle'+i).style.backgroundColor = 'white'
}
}


if (layersettings[0]==1) // All on
{
for (var i=0; i<thecubedivlist.length; i++)
{
document.getElementById(thecubedivlist[i]).style.display = 'block'
}
for (var i=1; i<7; i++)
{
if (layersettings[i]==0) // if layer=0 turn off layer
{

for (var k=0; k<layerimages.length; k++)
{
if (layerimages[k][0]==layersettingnames[i])
{
for (var j=0; j<layerimages[k][1].length; j++)
{
document.getElementById(layerimages[k][1][j]).style.display = 'none'
document.getElementById('b'+layerimages[k][1][j]).style.display = 'none'
}
}
}

}
}
}
else // All = off
{
for (var i=0; i<thecubedivlist.length; i++)
{
document.getElementById(thecubedivlist[i]).style.display = 'none'
}
for (var i=1; i<7; i++)
{
if (layersettings[i]==1) // if layer=1 turn on layer
{

for (var k=0; k<layerimages.length; k++)
{
if (layerimages[k][0]==layersettingnames[i])
{
for (var j=0; j<layerimages[k][1].length; j++)
{
document.getElementById(layerimages[k][1][j]).style.display = 'block'
document.getElementById('b'+layerimages[k][1][j]).style.display = 'block'
}
}
}

}
}
}
}



/*
0=Red
1=Blue
2=pink
3=Green
4=White
5=Yellow

0=Front - F
1=Right - R
2=Back - B
3=Left - L
4=Top - T
5=Down - D (Bottom)

*/


var toptooldirection=1
function changetooldirection(somenum)
{
toptooldirection=somenum
if (somenum==1)
{
document.getElementById('toolforward').style.backgroundColor = 'limegreen'
document.getElementById('toolback').style.backgroundColor = 'white'
}
else
{
document.getElementById('toolback').style.backgroundColor = 'limegreen'
document.getElementById('toolforward').style.backgroundColor = 'white'
}
}

var thetoolalgorithms=[
[
[[0,0],[1,0],[4,0],[1,1],[4,1],[0,1]],
[[4,1],[4,1],[1,1],[4,0],[3,0],[4,1],[1,0],[4,0],[3,1]],
[[4,1],[4,1],[1,1],[4,0],[4,0],[1,0],[4,0],[1,1],[4,0],[1,0]],
[[1,1],[1,1],[4,0],[2,1],[0,0],[1,1],[1,1],[2,0],[0,1],[4,0],[1,1],[1,1]]
],
[
[[0,0],[4,0],[1,0],[4,1],[1,1],[0,1]],
[[3,0],[4,1],[1,1],[4,0],[3,1],[4,1],[1,0],[4,0],[4,0]],
[[1,1],[4,1],[1,0],[4,1],[1,1],[4,1],[4,1],[1,0],[4,0],[4,0]],
[[1,0],[1,0],[4,1],[0,0],[2,1],[1,0],[1,0],[0,1],[2,0],[4,1],[1,0],[1,0]]

]
]

var thetoolnotations=[
[
'FORO TORA TAFA',
'TIRA TOLO TARO TOLA',
'TIRA TIRO TORA TORO',
'RITO BAFO RIBO FATO RI'
],
[
'FOTO ROTA RAFA',
'LOTA RATO LATA ROTI',
'RATA ROTA RATI ROTI',
'RITA FOBA RIFA BOTA RI'
]

]

var thetoolnames=['Flipper', 'Swapper', 'Twister', 'Looper']
var thetooldirections=['Reverse ', '']

function rundirectedtoptool(sometool, somedirection)
{
runalgorithm(thetoolalgorithms[somedirection][sometool])
displaysequence(thetooldirections[somedirection]+thetoolnames[sometool]+'<br>'+thetoolnotations[somedirection][sometool])
}
function runtoptool(sometool)
{
runalgorithm(thetoolalgorithms[toptooldirection][sometool])
}


var resetcubestate=
[[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1], [2,2,2,2,2,2,2,2,2], [3,3,3,3,3,3,3,3,3], [4,4,4,4,4,4,4,4,4], [5,5,5,5,5,5,5,5,5]]

var cubestate=copyvalues(resetcubestate)
 
var faceedgepieces=[0,1,2,5,8,7,6,3]


var sideedgepieces=
[
[[4,6], [4,7], [4,8], [1,0], [1,3], [1,6], [5,2], [5,1], [5,0], [3,8], [3,5], [3,2]],
[[4,8], [4,5], [4,2], [2,0], [2,3], [2,6], [5,8], [5,5], [5,2], [0,8], [0,5], [0,2]],
[[4,2], [4,1], [4,0], [3,0], [3,3], [3,6], [5,6], [5,7], [5,8], [1,8], [1,5], [1,2]],
[[4,0], [4,3], [4,6], [0,0], [0,3], [0,6], [5,0], [5,3], [5,6], [2,8], [2,5], [2,2]],
[[2,2], [2,1], [2,0], [1,2], [1,1], [1,0], [0,2], [0,1], [0,0], [3,2], [3,1], [3,0]],
[[0,6], [0,7], [0,8], [1,6], [1,7], [1,8], [2,6], [2,7], [2,8], [3,6], [3,7], [3,8]]
]

function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}


function copyvalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=[]
for (var j=0; j<somearray[i].length; j++)
{
temparray[i][j]=somearray[i][j]
}
}
return temparray
}

function copysimplevalues(somearray)
{
var temparray=[]
for (var i=0; i<somearray.length; i++)
{
temparray[i]=somearray[i]
}
return temparray
}

function calcMOD(somea, someb)
{

return somea-(someb*Math.floor(somea/someb))

}


function twistside(someside, somedir)
{
var oldcubestate=copyvalues(cubestate)
var somepos
var somediff
somediff=2
if (somedir==0) {somediff=6}
for (var i=0; i<8; i++)
{

somepos=calcMOD(i+somediff, 8)

cubestate[someside][faceedgepieces[i]]=oldcubestate[someside][faceedgepieces[somepos]]

}

somediff=3
if (somedir==0) {somediff=9}
for (var i=0; i<12; i++)
{
somepos=calcMOD(i+somediff, 12)

cubestate[sideedgepieces[someside][i][0]][sideedgepieces[someside][i][1]]=oldcubestate[sideedgepieces[someside][somepos][0]][sideedgepieces[someside][somepos][1]]
}
}

var thecolours=['red', 'blue', 'pink', 'green', 'white', 'yellow']
function displaycube()
{
if (tempcube==1) {turnfacecube(0)}
savethestate([1])
var somepos
var somelist=[0,1,2,3,4,5]

var somename
var somecolour
var sometypes=['front', 'right', 'back', 'left', 'top', 'down']
var somepictypes=['front', 'right', 'front', 'right', 'top', 'top']
for (var k=0; k<6; k++)
{
for (var i=0; i<3; i++)
{
for (var j=0; j<3; j++)
{
somename='img_'+sometypes[k]+i+'_'+j
somegif=thecolours[cubestate[sidesdisplayed[k]][maprotation(3*j+i, siderotationdetails[k])]]+'_'+somepictypes[k]+'.png'
document.images[somename].src=somegif
document.images['b'+somename].src='b'+somegif

// alert([somename, somegif])
}
}
}
showcubepositions(0.25*gapfactor)
}

function maprotation(somenum, somerotation)
{
var somemappings=[
[0,1,2,3,4,5,6,7,8],
[6,3,0,7,4,1,8,5,2],
[8,7,6,5,4,3,2,1,0],
[2,5,8,1,4,7,0,3,6]
]
return somemappings[somerotation][somenum]
}

function runalgorithm(somelist)
{
if (preventbuttonactions==1) {return}
showcurrentad()
if (runcheck()==true)
{
for (var i=0; i<somelist.length; i++)
{
turnsidehidden(somelist[i][0], somelist[i][1])
}
moverecord=moverecord.concat([[103, somelist.length]])

displaycube()
}
}

function turnasideorcube(someside, somedir)
{
if (preventbuttonactions==1) {return}
showcurrentad()
if (tobeturned==0)
{
turnside(someside, somedir)
}
else
{
var somenewdir=somedir
var somecubedir
if (someside==0) {somecubedir=0} // F -> F
if (someside==1) {somecubedir=1} // R -> R
if (someside==2) {somecubedir=0; somenewdir=1-somedir} // B -> reversed F
if (someside==3) {somecubedir=1; somenewdir=1-somedir} // L -> reversed R
if (someside==4) {somecubedir=2} // T -> T
if (someside==5) {somecubedir=2; somenewdir=1-somedir} // D -> reversed T
var somerotation=2*somecubedir+somenewdir
turncube(somerotation)
}

}

function turnmiddle(someside, somedir)
{
if (preventbuttonactions==1) {return}
showcurrentad()
var somenewdir=somedir
var somecubedir
if (someside==0) {somecubedir=0} // F -> F
if (someside==1) {somecubedir=1} // R -> R
if (someside==2) {somecubedir=0; somenewdir=1-somedir} // B -> reversed F
if (someside==3) {somecubedir=1; somenewdir=1-somedir} // L -> reversed R
if (someside==4) {somecubedir=2} // T -> T
if (someside==5) {somecubedir=2; somenewdir=1-somedir} // D -> reversed T
var somerotation=2*somecubedir+somenewdir
turncubehidden(somerotation) // turn the cube whether it's a side or cube turn
if (tobeturned==0) // if it's a middle layer turn, turn the layers either side back again
{
turnsidehidden(someside, 1-somedir)
turnsidehidden(oppositecubeside(someside), somedir)
moverecord=moverecord.concat([[103, 3]]) // and record three moves making up this one move
}
displaycube()
}

function oppositecubeside(someside)
{
if (someside==0) {return 2}
if (someside==1) {return 3}
if (someside==2) {return 0}
if (someside==3) {return 1}
if (someside==4) {return 5}
if (someside==5) {return 4}
}

function runcheck()
{
return true
}
function turnside(someside, somedir)
{
if (runcheck()==true)
{
turnsidehidden(someside, somedir)
displaycube()
}
}

function turnsidehidden(someside, somedir)
{
if (runcheck()==true)
{
var somedisplayedside=sidesdisplayed[someside]
twistside(somedisplayedside, somedir)
moverecord=moverecord.concat([[101, somedisplayedside, somedir]])

}
}

function recorddouble()
{
moverecord=moverecord.concat([[103, 2]])

}

var sidesdisplayed=[0,1,2,3,4,5]

var rotationdetails=
[
// 0=front-back axis clockwise
[0,4,2,5,3,1],
// 1=front-back axis anti-clockwise
[0,5,2,4,1,3],
// 2=right-left axis clockwise
[5,1,4,3,0,2],
// 3=right-left axis anticlockwise
[4,1,5,3,2,0],
// 4=top-down axis clockwise
[1,2,3,0,4,5],
// 5=top-down axis anticlockwise
[3,0,1,2,4,5]


]

var siderotationdetails=
[0,0,0,0,0,0]

var siderotationchanges=
[
[1,1,3,1,1,1],
[3,3,1,3,3,3],
[0,1,2,3,0,2],
[0,3,2,1,2,0],
[0,0,0,0,1,3],
[0,0,0,0,3,1]
]

function rotatecube(somerotation)
{
var someoldsidesdisplayed=copysimplevalues(sidesdisplayed)
for (var i=0; i<6; i++)
{
sidesdisplayed[i]=someoldsidesdisplayed[rotationdetails[somerotation][i]]
}

var someoldsiderotationdetails=copysimplevalues(siderotationdetails)
for (var i=0; i<6; i++)
{
siderotationdetails[i]=calcMOD(someoldsiderotationdetails[rotationdetails[somerotation][i]]+siderotationchanges[somerotation][i],4)
}
}

function turncube(somerotation)
{
turncubehidden(somerotation)
displaycube()
}

function turncubehidden(somerotation)
{
rotatecube(somerotation)
moverecord=moverecord.concat([[102, somerotation]])

}

// var cubestate=copyvalues(resetcubestate)

var moverecord=[]

function continueafterad()
{
startcube()
}

function reset()
{
if (showingads==1 || showinghelp==1 || preventbuttonactions==1 ) {return}

kublitzcubestatus=GetLocalList('kublitzcubestatus')

var somestatus=kublitzcubestatus[0]*1
mydecision('Please confirm that you wish to end the current puzzle', 'reset2()', 'continuegame()')
}

function reset2()
{
cubestate=copyvalues(resetcubestate)
sidesdisplayed=[0,1,2,3,4,5]
siderotationdetails=[0,0,0,0,0,0]
moverecord=[]
// displaycube()
continuegame()

}

function startcube()
{
reset2()
var someside
var somedir
var somecuberotation
for (var i=0; i<50; i++)
{
someside=randomnumber(6)-1
somedir=randomnumber(2)-1
somecuberotation=randomnumber(6)-1
twistside(someside, somedir)
rotatecube(somecuberotation)
}
expand()
document.getElementById('theboard').style.display = 'block'
}

var oppositerotation=[1,0,3,2,5,4]

function goback()
{
gobackhidden()
displaycube()
}

function gobackhidden()
{
// alert(moverecord)
if (moverecord.length>0)
{
var somelastmove=moverecord[moverecord.length-1]
if (somelastmove[0]==103) // sequence/algorithm
{
moverecord=moverecord.slice(0, moverecord.length-1)
for (var i=0; i<somelastmove[1]; i++)
{
gobackhidden()
}
}
else
{
if (somelastmove[0]==102)
{
rotatecube(oppositerotation[somelastmove[1]])

}
else
{
twistside(somelastmove[1], 1-somelastmove[2])
}

moverecord=moverecord.slice(0, moverecord.length-1)
}
}
}
var hideorshow=0
function hideshow(somenum)
{
hideorshow=somenum
if (hideorshow==1)
{
document.getElementById('backcube').style.display = 'inline'
document.getElementById('frontcube').style.display = 'none'
document.getElementById('showrear').style.backgroundColor = 'limegreen'
document.getElementById('showmain').style.backgroundColor = 'white'

}
else
{
document.getElementById('backcube').style.display = 'none'
document.getElementById('frontcube').style.display = 'inline'
document.getElementById('showrear').style.backgroundColor = 'white'
document.getElementById('showmain').style.backgroundColor = 'limegreen'

}

handleclickproblem()
}

var tempcube=0
function settempcube()
{
if (preventbuttonactions==1 || tobeturned==1) {return}

tempcube=1
tobeturned=1
document.getElementById('turnacube').style.backgroundColor = 'limegreen'
document.getElementById('turnaface').style.backgroundColor = 'white'

}

var tobeturned=0
function turnfacecube(somenum)
{
if (preventbuttonactions==1) {return}
tempcube=0
tobeturned=somenum
SetLocalVal('tobeturned', somenum)

if (tobeturned==1)
{
document.getElementById('turnacube').style.backgroundColor = 'limegreen'
document.getElementById('turnaface').style.backgroundColor = 'white'

}
else
{
document.getElementById('turnacube').style.backgroundColor = 'white'
document.getElementById('turnaface').style.backgroundColor = 'limegreen'

}

}

documentwrite('</DIV>')

// end from other default
documentwrite('<div style="display:block;width:100%;height:'+(pushdown+Math.floor(scalef*3))+'px;"></div>')
documentwrite('<table border=0 cellspacing=0 cellpadding=0 width=100%><tr height='+Math.floor(scalef*20)+'><td width='+Math.floor(scalef*50)+' onClick="goback()">'+graphicfor('Undo')+'</td><td width='+Math.floor(scalef*10)+'><img src="emptyfiller.png" width='+Math.floor(scalef*10)+'></td><td colspan=3 style="position:relative;text-align:center;font-weight:bold;color:red;font-size:'+Math.floor(scalef*14)+'px">'+titleimage('<table border=0 width='+Math.floor(scalef*100)+' cellpadding=0 cellspacing=0 align=center valign=middle><tr><td id="gap1" onClick="setgap(1)" width=* style="text-align:center;font-weight:bold;color:silver;font-size:'+Math.floor(scalef*14)+'px">1</td><td id="gap2" onClick="setgap(2)" width=* style="text-align:center;font-weight:bold;color:silver;font-size:'+Math.floor(scalef*14)+'px">2</td><td id="gap3" onClick="setgap(3)" width=* style="text-align:center;font-weight:bold;color:silver;font-size:'+Math.floor(scalef*14)+'px">3</td><td id="gap4" onClick="setgap(4)" width=* style="text-align:center;font-weight:bold;color:white;font-size:'+Math.floor(scalef*14)+'px">4</td><td id="gap5" onClick="setgap(5)" width=* style="text-align:center;font-weight:bold;color:silver;font-size:'+Math.floor(scalef*14)+'px">5</td></tr></table>')+'<div id="sequencedisplay" style="position:absolute;top:0px; left:0px;width:100%;height:'+Math.floor(scalef*20)+'px;display:none;font-weight:bold;font-size:'+Math.floor(scalef*8)+'px"><table border=0 height='+Math.floor(scalef*20)+' width=100% cellspacing=0 cellpadding=0 valign=middle align=center style="height:'+Math.floor(scalef*20)+'px"><tr><td align=center id="sequencedisplaytext"  valign=middle style="color:red;width:100%;display:block;font-weight:bold;font-size:'+Math.floor(scalef*8)+'px;background-color:purple;height:'+Math.floor(scalef*20)+'px;color:white">&nbsp;</td></tr></table></div></td><td width='+Math.floor(scalef*10)+'><img src="emptyfiller.png" width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' onClick="reset()">'+graphicfor('Reset')+'</td></tr></table>')

documentwrite('<div style="width:100%" id="currentadtext"> </div>')


documentwrite('</div></td></tr>')

documentwrite('<tr ><td colspan=7 style="height='+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" ><div style="display:inline;width:100%" id="output">&nbsp;</div></td></td></tr>')
documentwrite('<tr ><td colspan=7 style="width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" ><div style="display:none;width:100%" id="help">')

var sequencetimer=null
function displaysequence(somesequence)
{
changetextvalue('sequencedisplaytext', somesequence)
document.getElementById('sequencedisplay').style.display='block'
if (sequencetimer != null) {clearTimeout(sequencetimer)}
sequencetimer= setTimeout('hidesequencedisplay()', 3000)
}

function hidesequencedisplay()
{
document.getElementById('sequencedisplay').style.display='none'

}

function newpuzzle()
{
if (showingads==1 || showinghelp==1 || preventbuttonactions==1 ) {return}

kublitzcubestatus=GetLocalList('kublitzcubestatus')

var somestatus=kublitzcubestatus[0]*1

if (somestatus==1)  // ask for confirmation unless no puzzle underway (first use)
{
mydecision('Please confirm that you wish to end the current puzzle', 'newpuzzle2()', 'continuegame()')

}
else
{

newpuzzle2()
}
}


function newpuzzle2()
{
SetLocalVal('kublitzcubestatus', [1])
kublitzcubestatus=GetLocalList('kublitzcubestatus')
document.getElementById('theboard').style.display='block'
document.getElementById('output').style.display='none'
document.getElementById('help').style.display='none'
startcube()
}


</script>
<script language="Javascript">


var showinghelp=0


function showhelp()
{
if (showinghelp==1) {hidehelp();return}
if (showingads==1 || preventbuttonactions==1 || kublitzcubestatus[0]==-2) {return}
showinghelp=1
document.getElementById('theboard').style.display='none'
document.getElementById('output').style.display='none'
document.getElementById('help').style.display='block'
}

function hidehelp()
{
document.getElementById('theboard').style.display='block'
document.getElementById('output').style.display='none'
document.getElementById('help').style.display='none'
showinghelp=0

}


</script>
<div id="helpback" style="display:inline">
<script language="Javascript">documentwrite('<table align=center border=0><tr><td onClick="hidehelp()" width='+Math.floor(scalef*50)+'>'+graphicfor('Back')+'</td></tr></table>')</script>
</div>

<div id="helpgeneral" style="display:inline">

<p>The graphics of Kublitz Cube are intended to represent a large cube made up of 27 smaller cubes, or cubelets - hence the name Kublitz, a word that sounds the same.  Three key features of the Kublitz Cube cubelets are:

<ol>
<li>The cubelets are separated from adjacent cubelets by a significant gap;
<li>The colours of faces on opposite sides of every cubelet are always the same;
<li>The colours of the faces on the outside of the larger cube are one of six colours: red, pink, blue, green, white or yellow.  The colours of the faces on the sides opposite to these on every cubelet are, from 2) above, also these colours. All other cubelet faces are grey.
</ol>

<p>The large cube (often referred to as just 'the cube') can also be considered as comprising 9 layers of 9 cubelets: a front layer and a back layer; a top layer and a bottom layer; a right layer and a left layer; and the middle layers lying between each of these pairs. 
<p>The large cube is designed so that it has a goal, or reset, state, in which the 9 cubelet faces of each layer of 9 cubelets are the same colour.  This is equivalent to the state in which the colours displayed on the outside of every one of the 6 faces of the large cube are all the same colour (a different colour for each of the 6 faces), as shown below.  This is effectively the same goal state as a traditional physical cube.

<p style="text-align:center"><script language="Javascript">documentwrite('<img width='+Math.floor(scalef*100)+' src="goal.png">')</script>
<p>To demonstrate that the opposite faces of a cubelet are the same colour, if we rotate the cube 180 degrees around the top-bottom axis, it now appears as follows:
<p style="text-align:center"><script language="Javascript">documentwrite('<img width='+Math.floor(scalef*100)+' src="goal2.png">')</script>
<p>Note how the cubelets at the front, which were displaying red on their forward-looking faces, are now at the back, displaying red on their forward-facing faces - the faces that had been backward-facing when the cubelets were at the front of the large cube.  Likewise, you can see that the cubelets on the right that were displaying blue on their right-facing sides are now on the left, but still displaying blue on their right-facing sides.
 
<p>This design, and the view you get as shown above, means that you are able to know what colour is on every face of the large cube, since the opposite side of every hidden face, which has the same colour, is visible. This is a major difference, and improvement, on traditional physical puzzle cubes and their visual representations.


<p>You are able to rotate, in increments of 90 degrees, the 9 layers of 9 cubelets on the outside of the large cube in either a clockwise or anticlockwise (counterclockwise) direction. This, of course, disturbs the colours displayed on the 6 faces of the large cube, so that they are no longer all displaying a single colour.  A clockwise turn of the right side by 90 degrees, for example, leads to the following state of the cube.
<p style="text-align:center"><script language="Javascript">documentwrite('<img width='+Math.floor(scalef*100)+' src="state1.png">')</script>
<p>The cube may also be rotated about any of the three axes in increments of 90 degrees, as demonstrated by the first two images above.
<p>By carrying out many layer rotations, the colours on the external large cube faces can become jumbled up.  The objective of the puzzle is to carry out your own rotations so that the large cube is restored to its goal state, with the colours displayed on the outside of every one of the 6 faces of the large cube being the same colour. 

<p><b>Cube manipulations and notation</b>
<p><i>Rotating layers</i>
<p>To rotate a layer in a certain direction, first ensure that the button with the word 'Layer' in it has a green background, or, if not, tap on the button to make it green.
<p>There are 12 arrows at the corners of the cube concerned with rotating the 6 outer layers.
<p>Near each pair of arrows you will see a single letter, which refers to the layer to be rotated when the arrows near it are tapped:
<ul>
<li>F = Front
<li>R = Right
<li>T = Top
<li>B = Back
<li>L = Left
<li>D = Down (Bottom)
</ul>

<p>Note: to be clear about which layer is which, in the reset (goal) state the Front displays red, the Top white, and the Right blue.

<p>Above the cube, you will see a table, whose six middle columns display one of these 6 letters in the first row.  Below each of these headings you will see three cells containing a letter denoting a type of rotation. These are buttons, which you may also tap to rotate the layers.  Their meanings are:
<ul>
<li>O = Clockwise 90 degrees (remember O'clock, or Ordinary clock)
<li>A = Anticlockwise 90 degrees (also called counterclockwise)
<li>I = Inverse (a 180-degree turn)
</ul>


<p>We refer to these buttons by the column heading followed by the letter of the cell, e.g. FO, BA or RI. So, pressing the FO button causes a clockwise rotation of the Front layer by 90 degrees, while pressing the BA button causes an anticlockwise rotation of the Back layer by 90 degrees.

<p>Important: Please note that the terms clockwise and anticlockwise are always used to indicate the direction of rotation <b>when facing that particular side or layer</b> from the outside of the large cube. This means that an anticlockwise rotation of the Back layer looks like a clockwise rotation when viewed from the front.     

<p>In addition, if you have a touchscreen, you can rotate each of the layers of 9 cubelets by 90 degrees clockwise or anticlockwise by a slide action on any of the outward looking faces on the Top or Front only (N.B. those on the Right are not touch-sensitive).  To rotate a layer, select a face on the perimeter of the layer (90 degrees to the main surface) and slide it in the desired direction.  This is also the face you would hold with a physical cube to rotate that layer.  So, to rotate the Top layer in a clockwise direction, make a leftwards sliding motion on any of the three cubelet faces at the Front along the Top edge.

<p><i>Rotating the complete cube</i>
<p>To the left of the rotation buttons at the top, you will see two buttons: one with the word <b>Layer</b> and one with the word <b>Cube</b>.  Initially, the Layer button has a green background, signifying that any rotations are to be carried out on the relevant layer.  If you tap on the 'Cube' button, this then takes the green background to signify that any rotations are to be applied to the entire cube.  
<p>So, to rotate the entire cube, first make sure that the 'Cube' button has a green background, or, if not, tap on the button to make it green.  Then simply use the same arrows or 'O', 'A' or 'I' buttons as for rotating layers, but now the entire cube will rotate rather than just the particular layer.
<p>Please note that a clockwise rotation of the cube when viewed from the Front side is the same as an anticlockwise rotation when viewed from the Back side.
<p>Below the Cube button is one called <b>Temp</b>, with a gold background.  Pressing this when the Layer button has the green background has the effect of switching the Cube button on - but only temporarily.  As soon as the cube needs to be redisplayed, e.g. after a cube rotation, the Layer button is reselected.  This is very useful, as you will normally be using Layer rotations, but may occasionally need to carry out one cube rotation, before continuing with layer rotations.  Just tap Temp before you do the single cube rotation.

<p><i>Top Tools</i>
<p>To the right of the Cube is a table entitled Top Tools.  This includes 8 icons, each of which, when tapped, carries out a sequence of rotations intended to make a particular change on the Top layer, while leaving the two lower levels unchanged. These make it easier for you and make solving the Cube less error-prone.

<p>These tools are described fully later, under <i>Solving the Cube</i>. Try them out on the cube when it is in its goal state (after tapping the Reset button), as this makes their effects easier to see.
<p><b>Starting the puzzle</b>
<p>To begin the puzzle, press the <b>New</b> button.  This carries out many random rotations of the layers, and many random cube rotations.  Then, use the various arrows or rotation buttons, and also the tool buttons, to restore the cube to its goal state with each side of the large cube showing only one colour.

<p><i>View buttons</i>
<p>To the right of the rotation buttons at the top is a pair of buttons, labelled <b>Front</b> and <b>Top</b>.  By default, the Front button has a green background, while Top has a white background.  This signifies that the current view of the cube shows the Front face with its cubelet faces looking square.  If the Top button is tapped, its background becomes green, and the view of cube changes so that the Top cubelet faces look square.  This view is particularly useful when using the Top Tools to solve the last layer of the cube (see below). 
<p>The layer letters in the table at the top, above the rotation buttons, are also buttons, concerned with which layers you view.  The All button to the right of these is also such a button.  Each one has either a green or a white background.  Their use is described next.
<p>If you press the All button when it is white, it changes to a green background, and all the layer letters also change to a green background.  In this state, all layers are shown (the default). If you then press any of the layer buttons, its colour changes to white and this layer is no longer shown.
<p>If you press the All button when it is green, it changes to a white background, and all the layer letters also change to a white background.  In this state, no layers are shown - the cube disappears. If you then press any of the layer buttons, its colour changes to green and this layer is then displayed.
<p>Below the cube, between the Undo and Reset buttons, are buttons labelled 1 to 5.  These control the gap between the cubelets. 1 means there is a gap of one quarter the size of the cube, while 5 means the gap is 5 times this.  The selected gap setting is shown in white, while the others are shown in silver.
<p>The <b>Expand</b> button, with a gold background, in the table at the top, lets you see a brief display of the cube with all 5 gaps, from 1 to 5, before the view changes back to its original gap.  This can be useful if you're viewing the cube with a small gap, and wish to briefly see all colours.  This is also activated whenever the New button is tapped.
<p>These view buttons give you great control over how the cube is displayed.  For example, when starting off a new puzzle, you would probably want to view the cube with a large gap, so that you can see all the cubelet colours.  Towards the end, when some layers are complete and you want to use the Top Tools, you might want to employ a small gap and view only the Top or the top two layers.
<p><b>Other buttons</b>
<p>The <b>Undo</b> button simply restores the cube to its previous position.  You can keep pressing the Undo button to undo previous rotations;  to undo the effect of pressing a Top Tool button, a single Undo press is adequate.  There is no theoretical limit to the number of rotations you can undo - it should continue to undo moves until you end up where you started (after opening up Kublitz Cube, or after pressing the New or Reset buttons).  
<p>Please note that if you have made a 180-degree rotation by pressing one of the 'I' buttons, then only one press of the Undo button is required to undo it; however, if you have carried out a 180-degree rotation using two separate presss of arrows or the 'O' or 'A' buttons, then two presses of the Undo button are required to undo it. 
<p>The <b>Reset</b> button takes the cube to its unjumbled state, i.e. to the goal state, with all sides displaying only one colour.  This is useful for trying out the Top Tools or your own sequences.

<p><i>Exiting</i>
<p>Tap the device back twice to exit the application.  The current state is remembered so that you continue when you open it up again.

<p><b>Solving the Cube</b>

<p>If you are new to the Cube, you will soon learn that solving it is far from easy.  This is hardly surprising since there are billions of permutations, and some people have taken decades to solve the traditional physical Cube (and most people who have started it have never completed it).  Below, however, we show you an approach to going about this;  not only that, but we hope that you will be able to remember how to solve it.
<p>The approach to solving the cube is suitable for beginners, and uses the Top Tools (or rotation sequences) that, we understand, were first developed by David Singmaster.  David Singmaster also developed a widely-used notation for describing moves and solutions;  however, here we use a notation devised by David Wolstenholme, as it results in word-like strings of letters that are easier to remember.

<p><i>Wolstenholme notation</i>
<p>The basic notation is as described above for the buttons, where we use the letters F, R, T, B, L and D for the layers, and specify rotations of these layers by adding on either an O (clockwise 90-degree rotation), an A (anticlockise 90-degree rotation) or an I (180-degree rotation). So, LA means turns the Left layer 90 degrees anticlockwise.  
<p>We use a three-letter specification for cube rotations, in which we add the letter C to the end to signify that the entire cube is to be rotated.  So, FOC means that the entire cube is to be rotated around the Front-Back axis in a clockwise direction when viewed from the Front.  Note that the cube rotation FOC is the same as the cube rotation BAC. 
<p>In the tool sequences below, we generally join two specifications of layer rotations together to form a 4-letter 'word'. So, ROTA specifies a clockwise rotation of the Right layer followed by an anticlockwise rotation of the Top layer. 
<p>As will be seen, these 4-letter 'words' and the 3-letter cube specifications often form recognizable words or names, or maybe sequences of letters that sound like words.  Examples include: FOTO, ROC, BAC, ROTA, RITA, ROTI, or RIFA. This is the primary reason for choosing the notation above, since we humans are good at remembering words and can build stories around them to help us remember them.


<p><b><i>The Basics</i></b>

<p>Apart from the cubelet at the middle of the large cube, which is grey on all sides, all other cubelets display either one, two or three of the 6 other colours.  
<ul>
<li>Those at the centre of each of the 6 outer layers display only one other colour apart from grey.  We will refer to these as <i>centre cubelets</i>, and describe them by the colour they display on the outside.
<li>Those at the 8 corners of the large cube display three colours.  We will refer to these as <i>corner cubelets</i>, and describe them by the three colours they display.
<li>The 12 cubelets between the corner cubelets, each at the middle of an edge of the large cube, display two colours other than grey.  We refer to these as <i>edge cubelets</i>, and describe them by the two colours they display on the outside.  
</ul>
<p>Remember that while the individual layers on a cube can rotate, the relative positions of the centre cubelets on each face will remain unchanged. In Kublitz Cube, <ul><li>red is opposite pink; <li>white is opposite yellow; and <li>blue is opposite green.</ul>  


<p>Also, if you have the white centre cubelet at the top and look down, you will find that the centre cubelets of the sides are always ordered red, green, pink and blue as you move clockwise.  Please note that if you have a physical cube, the colours and their relative positions may be different.
<p>When trying to solve the cube, it is not enough just to get the pieces into the correct position;  the pieces also have to have the correct orientation (that is, the colours have to be facing the correct way). Next we introduce two concepts concerned with orientation of the pieces.
<p><i>Edge Flips</i>
<p>You will often find that you would like to 'flip' an edge cubelet.  By this, we mean that we would like to take an edge cubelet that has a certain colour on one side of the large cube and do something so that it ends up with the other colour on this side.<br>
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*142)+'px" src="edgeflip.png">')</script></center>
<p><i>Corner Twists</i>
<p>You will often find that you would like to 'twist' a corner cubelet.   By this, we mean that we would like to take a corner cubelet that has a certain colour on one side of the large cube and do something to it so that a different colour ends up on this side.  Because it shows three colours, the effect of doing this is that the colours on the outward-facing sides of the cubelet appear to have twisted round, either clockwise or anticlockwise.  
<p>The diagram below shows an anticlockwise twist for the Front-Right-Top corner cubelet. See how the blue colour has moved anticlockwise from the Right side to the Top side.<br>
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*142)+'px" src="cornertwist.png">')</script></center>
<p>Corner twists are probably less easy to think about and understand with Kublitz Cube - and easier to get wrong - than with a physical Cube.  This is because you can see colours not only on the outside of the Cube, but also on other faces.  This means that when you look at the three visible colours, these are not necessarily the outward-facing colours.  
For example, the same cubelet, if moved around to the Front-Left-Top position, looks as though it needs a clockwise twist to move the blue to the Top.  This is because the red side you are seeing is not outward-looking.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*142)+'px" src="cornertwist2.png">')</script></center>
<p>To help your thinking about this, look at the visible colours and determine whether a clockwise or anticlockwise twist is required.  Then count up the number of visible colours that aren't outward-facing; if the number is even (0 or 2), then the actual twist required is this; if the number is odd (1 or 3), then the actual twist required is the opposite of this.  So, for this Front-Left-Top cubelet, the visible colours suggest a clockwise twist.  However, as 1 colour (red) is not outward-looking, the actual twist required is the opposite: anticlockwise - as we saw before.  
<p><i>How to flip and twist</i>
<p>As an example, look at the Front edge of the Top layer in the reset state.  All the cubelets are white on the Top and Red at the Front.  To flip or twist them all, simply do FO to bring these cubelets to the Right edge, then RO to move them back up to the Top, then TO to bring them back to the Front edge.  Now, they all have red on the Top and white on the Front - all flipped or twisted.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="foroto.png">')</script></center>
<p>This has had the desired effect of flipping or twisting these three cubelets.  However, every one of the 9 layers has been affected by these moves.  Next, we look at Top Tools - some sequences of rotations that have no impact on the bottom two layers.


<p><b><i>Top Tools</i></b>
<p>A Top Tool is a sequence of rotations that is designed to achieve a certain result on cubelets in the Top layer. There are four basic tools described here.                                                                                       
<ul><li>Flipper<li>Swapper<li>Twister<li>Looper</ul>  


<p>These four tools are not only useful but also easy to describe, since, when considering the Top layer and the two layers beneath it, they have an impact on the Top layer only.  The bottom two layers end up unchanged by the application of these tools, so you can make use of them safe in the knowledge that only the Top layer of these three is affected. Each tool is focused on either edge or corner cubelets, and is designed to change either the position or the orientation of some of these cubelets.  
<p>Many tools can, of course, be used in more than one way:  a screwdriver, for example, can be used not only to tighten a screw, but also to untighten it, i.e. to reverse or undo the impact.  These tools can also be used in reverse.  
<p>The Top Tools are laid out with the names of the four tools and, underneath each of these, two icons, which act as buttons.  The one on the right (beneath the &gt;&gt; symbol near the top,  carries out the sequence of rotations specified; the one on the left, beneath the &lt;&lt; button near the top, runs the sequence of rotations that undoes or reverses these.  
<p>So, if the main sequence of rotations is FOTO ROTA RAFA, as for Flipper, then the first rotation for the reverse will be on the same layer as the last rotation of the basic sequence, i.e. on the F layer, but in the O direction instead of A, i.e. FO.  The next rotation will be on the R layer, but this time in the O direction.  The complete sequence for the reverse of Flipper is: FORO TORA TAFA.  Note that the I direction remains unchanged when reversed, since a 180-degree rotation requires another 180-degree rotation to reverse it.  
<p>To distinguish the uses of the tool, we add the word Reverse in front of the name when it is used in reverse, e.g. Reverse Flipper.
<p>These tools can also be used when solving a physical Cube.  The notation has been designed to be fairly easy to remember.  You only have to remember the main set of sequences, since you can always work out the reverse sequence from that, as above.

<p>These tools will be used at most stages of solving the cube, so we will describe them all now.  You will see associated with each tool, and its reverse, an icon that describes the impact.  This summarizes the impact by pointing out which corners have been twisted, and in which direction, which edges have been flipped, and which pieces are moved to another location.  
<p>The intensity of colours is also important:  the intense colours and black signify the primary, intended impact we are looking for, while the less intense colours mean that these changes take place but they are not of primary importance - they are just side-effects.  
<p>

<center><b>Edge flips</b><br><br>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="edgeflipicon.gif">')</script>
</center>
<br><br>
The deep purple ones show that these represent a primary impact, while the lighter ones represent a secondary impact.

<br>
<br>

<center><b>Corner twists</b><br><br>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="cornertwisticon.gif">')</script>
</center>
<br><br>
The red-coloured ones signify that the twist is anticlockwise, while the blue ones mean clockwise.  If you forget this when looking at the icons, just look at the rotation buttons at the top: O (clockwise) has a blue background; A (anticlockwise) has a red background.<br><br>
The deeper-coloured ones show that these represent a primary, intended impact, while the others are secondary or side-effects.
<br>

<br>

<center><b>Moves</b><br><br>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="moveicon.gif">')</script>
</center>
<br><br>
The black ones show that these represent a primary impact, while the beige ones are secondary.


<br>

<br>Note: Always consider that the movement occurs after other changes, such as twists and flips, have been made. So, a cubelet shown as being flipped but also with an arrow on it means that the cubelet initially at this position is flipped but is also then moved in the direction of the arrow.  So, if the Front-Right corner is blue and has an arrow pointing to the Back, this means that the cubelet initially in this position is twisted clockwise, but ends up located in the Back-Right corner.
<br>

<br>Note: The arrow states in which direction the piece moves.  This is always unambiguous, as corner cubelets must end up at other corners, and edge cubelets at other edges. 

<br>

<br>Example: The icon for Flipper is<br><br><center>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="fotorotarafaicon.gif">')</script></center>

<br>
The deep purple background on the Front and Right edge squares show that the primary purpose of this is to flip the edge cubelets on the Front and Right sides.  However, there are also some secondary effects: the Back-Right corner is twisted clockwise, the Front-Right corner is twisted anticlockwise; the three rightmost edge cubelets move around one place clockwise; and the Back two corners swap places, as do the Front two. 
<br>

<br>
So, to operate these tools just tap the appropriate tool icon under the tool name in Top Tools: the right one for the standard, forward set of rotations, the left one for the reverse.  

<br>

<br>The icon, focus, rotation sequence and primary purpose of each of the tools (including the Reverse tools) are shown next.
<br>

<br><table border=1 width=100%>
<tr><td valign=top width=33%><b>Flipper</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="fotorotarafaicon.gif">')</script><br>Edge<br>orientation</td><td valign=top><b>FOTO ROTA RAFA</b><br><br>Flip the edge pieces on the Right and Front sides.</td></tr>
<tr><td valign=top><b>Reverse Flipper</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="revfotorotarafaicon.gif">')</script><br>Edge<br>orientation</td><td valign=top><b>FORO TORA TAFA</b><br><br>Flip the edge pieces on the Back and Front sides.</td></tr>
</table>

<br>

<br><table border=1 width=100%>
<tr><td valign=top width=33%><b>Swapper</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="lotaratolatarotiicon.gif">')</script><br>Corner<br>position</td><td valign=top><b>LOTA RATO LATA ROTI</b><br><br>Swap the positions of the two Right corner pieces.</td></tr>
<tr><td valign=top><b>Reverse Swapper</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="revlotaratolatarotiicon.gif">')</script><br>Corner<br>position</td><td valign=top><b>TIRA TOLO TARO TOLA</b><br><br>Swap the positions of the two Right corner pieces.</td></tr>
</table>

<br>

<br><table border=1 width=100%>
<tr><td valign=top width=33%><b>Twister</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="ratarotaratirotiicon.gif">')</script><br>Corner<br>orientation</td><td valign=top><b>RATA ROTA RATI ROTI</b><br><br>Twist three corner pieces (all except the Back-Left corner) anticlockwise.</td></tr>
<tr><td valign=top><b>Reverse Twister</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="revratarotaratirotiicon.gif">')</script><br>Corner<br>orientation</td><td valign=top><b>TIRA TIRO TORA TORO</b><br><br>Twist three corner pieces (all except the Back-Left corner) clockwise.</td></tr>
</table>

<br>

<br><table border=1 width=100%>
<tr><td valign=top width=33%><b>Looper</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="ritafobarifabotariicon.gif">')</script><br>Edge<br>position</td><td valign=top><b>RITA FOBA RIFA BOTA RI</b><br><br>Move the three rightmost edge pieces around one position anticlockwise, as if looped together.</td></tr>
<tr><td valign=top><b>Reverse Looper</b><br><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*50)+'px" src="revritafobarifabotariicon.gif">')</script><br>Edge<br>position</td><td valign=top><b>RITO BAFO RIBO FATO RI</b><br><br>Move the three rightmost edge pieces around one position clockwise, as if looped together.
</table>

<br><br>When you use one of these tools, its name and the sequence are displayed temporarily instead of the 5 gap buttons.  This should help you to remember the sequences.

<br><br><a name="strategy"></a><b><i>Overall strategy</i></b>

<p>The overall cube-solving strategy employed here is: Fix the four corners of the first layer; then fix the edge pieces in the first two layers of each of the sides; and, finally, solve the last layer.  
<br><br>


<p><b><i>Fix the four corners of the first layer</i></b>

<p>We will use white as the first layer. Our objective is to correctly position and orientate all the corner cubelets that have a white side - with the white side displayed on the side with the white centre cubelet.  


<p>This is the easiest part of solving the cube, since you do not need to worry about how you disturb the other layers. You can try positioning and orientating the corner cubelets with a white side using your own set of rotations, such as those described next, where the white centre cubelet is positioned on the Top.
<p>

First, bring up one of the corners with a white side so that it has its white side on Top. Then rotate the Top so that colours of the sides of the corner cubelet match the colours of the centre cubelet on the sides. In the image below, the white/red/blue corner has its sides correctly matching up with the white, red and blue centre cubelets.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*100)+'px" src="onewhitecorner.png">')</script></center>
Then bring the other Top corners cubelets into the correct position, with their white sides on Top and their side colours matching the centre cubelets of the sides. 
<p>If you're having problems, our recommended approach is to bring the corner piece you wish to position into the Top layer to the Front-Right-Down corner, directly beneath the corner in the Top layer into which it should move.  The images below show the way to achieve this in the situation where three of the white cubelets are fully in place and aligned, and the last one is in the Front-Right-Down corner and correctly aligned for moving to the top.  Carry out the sequence BO RO BA to bring it to the top:  BO moves the back two corners out of the way, RO brings the last corner up to the top, then BA brings the back two corners back into place.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="boroba.png">')</script></center>

<p>In the situation that the cubelet you wish to move up isn't correctly aligned, you need to twist it first.  The images below show the result of turning the cube over, using rotation RIC, so that the misaligned cubelet is now at the Back-Right-Top, then using Reverse Twister to re-align the corner cubelet, and finally using RIC again to bring the cubelet back to the Front-Right-Down corner.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="rorevtwisterra.png">')</script></center>



<p><b><i>Fix the edge cubelets in the first two layers</i></b>


<p>Once the corners of the first, white layer have been fixed, we can see that to complete the top two layers (the white layer and the one between white and yellow) we just need to put the eight edge cubelets in these layers into their correct positions with correct orientation.  

<p>To do this, we will use the Looper and Reverse Looper tools as our main tools, supported by the Flipper and Reverse Flipper tools and some easy rotations to get the cubelets into the correct starting positions for using these tools. We operate on one of the side colours (all but white and yellow) at a time. To begin doing this, we always start off by putting the first, white layer at the Back if it's not already there (ROC). 
<p>Our basic approach is that we work on the Top layer and use the Looper to push the edge cubelet we want to have at the Back edge from the Front to the Right edge, then use the Looper again to push the cubelet we want to have at the Right side from the Front to the Right, which also moves the cubelet that was there to the Back edge where we want it.  
<p>To demonstrate this, the image below shows our starting position for doing this on the blue side, where we have the blue/white edge cubelet at the Front (blue on Top).  Running the Looper tool pushes this cubelet to the Right edge.  
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer12edges1.png">')</script></center>
<p>We then move the blue/pink edge cubelet into position and use the Looper tool again to push it to the right, its final position, and also the blue/white cubelet to the Back - again, its final position.
<p>This is a neat use of the tool, since we move the two edge cubelets into position with two uses of Looper. However, we had the ideal starting position in this example, where both edge cubelets were already at the Front and correctly orientated. Often we find that the required edge pieces are not at the Front, and, once moved there, they are not both correctly orientated. So, we need to move edge cubelets forward to the Front layer, and to flip incorrectly orientated pieces. 

<p><i>Bringing edge cubelets to the Front layer</i>
<p>If the edge piece you are interested in is in the Back layer or the layer between the Back and the Front, and needs to be brought to the Front layer ready for use of the Looper as just described, keep the white side to the Back and then turn the Cube so that the cubelet to be brought to the Back is on the Top and simply use the Looper or Reverse Looper to bring it to the Front. 

<p><i>Flip incorrectly orientated cubelets</i>

<p>In this example, where we have already used these techniques on the blue, red and green sides and are trying to complete the pink side, we can see that the pink/white edge cubelet is incorrectly orientated if we were to use Looper to move it to the Back, as white would be on the Top not on the Back side. It therefore needs to be flipped.  The pink/green cubelet is also mis-orientated, so also need to be flipped.  To flip one or two cubelets, first rotate the Cube so that the white side is on the Down side.  Then rotate the Top layer so that the piece you want to flip is in the correct position for flipping by the Flipper or Reverse Flipper (and make sure that any pieces you don't want flipped aren't in a position to be flipped as well).  
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer12edges4.png">')</script></center>
In this case, having done this, the pink/white cubelet is at the Back and the pink/green is at the Left.  We can first rotate the Top by 180 degrees, so that they are then on the Front and Right - perfect for using Flipper to flip both at once.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer12edges5.png">')</script></center>


<p>We can now move the white side to the Back, then use Looper and some simple rotations to push these two edge cubelets into place, leaving us with two layers complete.
<center><script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer12edges6.png">')</script></center>


<br><br><a name="layer3"></a><b><i>Solve the last layer</i></b>

<p>Once the first two layers are complete, only one layer needs to be solved: the layer that should display yellow on its main side.  To solve this we first bring the yellow side to the top.  
<p>Now, as we are going to make changes only to the top of the three layers, principally by using the Top Tools, it is appropriate to change the view of the Cube so that the Top of the cubelets appears square - better matching the layout of the Top Tools icons.  We only need to see the Top layer and the centre cubelets of the sides, so we can also reduce the gaps between the cubelets to 2, as shown in the image below.

<p><center>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer3_1_1.png">')</script>
</center>

<br>

<br>The last layer is solved in four stages:

<p>Each stage makes use of only one of our four tools.  You may have noticed that the four tools vary significantly in their side effects, from Flipper which has many, to Looper, which has none.  As we move through the stages we use a more refined tool.  
<br>

<br>The order in which the tools are used and their names have the same initial letter, which helps you to remember them:  <ol><li>First - Flipper; <li>Second - Swapper; <li>Third - Twister; <li>Last - Looper.</ol>  Their primary focus (e.g. Flipper is concerned with edge cubelet orientation) helps you to remember what you need to do in these stages:


<ol>
<li>Orientate edge cubelets
<li>Position corner cubelets
<li>Orientate corner cubelets
<li>Position edge cubelets
</ol>


<a name="last1"></a><i>1. Orientate edge cubelets</i>

<p>To begin the last layer, now on the Top, we first form a yellow cross by ensuring that the four edge cubelets have yellow showing on the Top.  It is important to note that we don't, at this stage, care whether or not they're in the correct positions (i.e. whether their side colours match up with the centre cubelet of the sides).
<br>

<br>Clearly, if some of them are not displaying yellow on the top, we need to flip them using Flipper or Reverse Flipper.  Now, you will find that you begin with one of the following scenarios:  
<ul>
<li>the cross is already formed, in which case there's nothing to do at this stage; 
<li>two of the edge cubelets are showing yellow
<li>none of the edge cubelets are showing yellow
</ul>


<br>If two of the edge cubelets are showing yellow, we simply use either Flipper or Reverse Flipper to flip the two that aren't showing yellow, making sure that we rotate the Top to get them in the correct positions.  
<p>If none of the edge cubelets were showing yellow, you would first run Flipper, which results in two yellow edges opposite each other, then rotate the Top 90 degrees (TO or TA) and run Reverse Flipper.
<br>

<br>We now have the yellow cross (edge cubelets correctly orientated but not necessarily correctly positioned), so we can move to the next stage.
<p><center>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer3_1_2.png">')</script>
</center>


<br><br><a name="last2"></a><i>2. Position corner cubelets</i>

<p>Now we rotate the Top to see whether we can get all the corners in their correct positions, regardless of the fact that they may not have yellow showing on the Top.  So, we're looking to position the red/blue/yellow corner in the corner where the red, blue and yellow sides meet, for example.  If you find that you can rotate the Top so that all four are correctly positioned, then this stage is complete.  
<br>

<br>If the four corners aren't all correctly positioned, then we need to look to find two that can be correctly positioned, leaving the other two incorrectly positioned.  This often seems difficult to do, due to the fact that corners may be twisted, but do persevere and you <i>will</i> find two that can be correctly positioned.
<br>

<br>Once you have found the two corners that are correctly positioned, you need to swap the positions of the two that aren't.  If the two that need swapping are on one side, we just rotate the cube to bring them to the Right side and use the Swapper.
<br>

<br>If the two that need swapping are diagonally opposite each other, just use Swapper to swap over any two corners.  After doing that, you will find that you then have two corners that need swapping on one side, so you can just rotate the cube to get these on the Right side and use Swapper again.
<br>

<br>We now have the edge cubelets correctly orientated and the corner cubelets in their correct positions, but not necessarily correctly orientated.


<br><br><a name="last3"></a><i>3. Orientate corner cubelets</i>
<p>Now that the corners are in their correct positions, you will probably find that some of them are not correctly orientated and need twisting.  If you're lucky enough to find that they're all correctly orientated, just move on to the last stage.
<br>

<br>Check each corner in turn to see what sort of twisting is required to orientate it, if any, and count up the numbers needing clockwise and anticlockwise twists.  Clearly you're going to use the Twister or Reverse Twister tool, but it is not always easy to work out how to use them.  If you think about what they do you should be able to work out how to use them, but the following guide gives details.
<br>

<br>
<dl>
<dt>Three clockwise rotations required
<dd>Rotate the cube so that the corner that doesn't need twisting is in the Back-Left corner, then use Reverse Twister.
<dt>Three anticlockwise rotations required
<dd>Rotate the cube so that the corner that doesn't need twisting is in the Back-Left corner, then use Twister.
<dt>Two clockwise and two anticlockwise rotations required
<dd>Rotate the cube so that one of the corners that needs an anticlockwise twist is in the Back-Left corner, then use Twister.  This will leave you with three corners requiring anticlockwise twists, so do as instructed above.
<dt>One clockwise and one anticlockwise rotation required
<dd>Rotate the cube so that the corner that needs a clockwise twist is in the Back-Left corner, then use Twister.  This will leave you with three corners requiring clockwise twists, so do as instructed above.
</dl>

<p>Don't forget the issue about corner twists - the twists required are not necessarily those that seem to be required
by looking at the visible colours.  The image below, of a Top layer, shows in parentheses, for every corner, the twist that appears to be required if we look at the visible colours and wish to end up with the 
yellow colour on Top.  After that is the actual twist required.  In this, O means clockwise, A means anticlockwise.  We can see that we require two clockwise and two anticlockwise twists.  From this point, we 
would do TO then use Twister, then TO and Twister again, to end up with all cubelets displaying yellow on top.

<p><center>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer3_3_a.png">')</script>
</center>


At this point we're nearly there, but may have the edge cubelets in the wrong positions.


<br><br><a name="last4"></a><i>4. Position edge cubelets</i>

<p>You may find that all the edge cubelets are correctly positioned.  If not, you may find that 3 or 4 edges are in the wrong position.
<br>

<br>If there are four incorrectly positioned edges, run Looper, which results in three incorrectly positioned edges.  Then bring the correctly positioned side to the Left and run either Looper or Reverse Looper, as appropriate, to position the three remaining edge cubelets correctly and complete the puzzle.
<p><center>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer3_3_1.png">')</script>
</center>

<p>In the image above, there are only three incorrectly positioned, so we can just use Reverse Looper to complete the last layer, and the puzzle.

<p><center>
<script language="Javascript">documentwrite('<img style="display:block;width:'+Math.floor(scalef*200)+'px" src="layer3_4_1.png">')</script>
</center>

<br><br><a name="mnemonics"></a><b><i>Memorizing the tools</i></b>

<p>Our four top-layer tools can, of course, be used with a physical cube - and can you really say you've solved the cube until you've solved a physical cube?  If you want to solve the cube without having instructions around, you'll need to remember the tool sequences.  To help you remember these, here are some mnemonics.  You'll have to get used to thinking of eating rat, and know that a roti is a flat bread, often eaten as a wrap.
<br>

<br>FOTO ROTA RAFA (photo rota rougher)<br>
<b>Flipper</b> and his dolphin friends are forming a <b>photo rota</b> to have their pictures taken in turn, but the <b>rougher</b> sea may prevent this. 
<p>LOTA RATO LATA ROTI (lotta rat-oh latter roti)<br>
Lunch arrives:  Cheese and a <b>lotta rat! Oh,</b> I'd rather <b>swap</b> the <b>latter</b> for a <b>roti</b>.
<br>

<br>RATA ROTA RATI ROTI (ratter rota ratty roti)<br>
The <b>Ratter Rota</b> shows the rat-catchers' work plans for the week, but with a <b>twist</b>, as it says who has to make the <b>ratty roti</b> for lunch.
<p>RITA FOBA RIFA BOTA RI (Rita Fo B.A. reefer boater rye)<br>
<b>Loopy Rita Fo B.A.</b> is celebrating her graduation smoking a <b>reefer</b>, wearing a <b>boater</b> and drinking <b>rye</b> whiskey.
<br>

<br>Also, don't forget that the initial letters of the names of the tools are the same as the initial letters of First, Second, Third and Last - the stages at which they are used when solving the final layer.
<br>

<br>Finally, remember that you can work out the sequences of the Reverse tools by carrying out each of the rotations in the main sequence in reverse order and in the opposite direction.  It's also worth knowing that for the Reverse versions of Flipper, Twister and Looper, running the main tool twice in succession yields the same intended impact as the Reverse tool (but double Flipper has different side-effects compared to Reverse Flipper).



<p><span style="font-weight: bold">About Kublitz Cube</sup></span>

<p>This Kublitz Cube application has been designed by Dr David Wolstenholme, who also developed the idea of separated cubelets to enable the colours on all sides to be known without turning the cube.
<p><span style="font-weight: bold">Terms of use</span><p>This software may be used for personal purposes only.  It may not be used for commercial purposes.</p> 
<p>The software, code and script of this application may not be copied or be distributed to others.</p> 
<p>The software, code and script may not be altered in any way.</p> 
<p >Copyright of the software, code and script, and its help documentation, is owned by TopAccolades Limited. No part of the software, code, script or documentation may be copied or used in another application or document.</p> 
<p >Although every effort has been made to ensure that this software functions as intended, TopAccolades Limited provides no warranty of merchantability, or fitness for a particular purpose, in relation to this application or its support.</p> 
<p >TopAccolades Limited shall not be liable for any damages whatsoever arising out of the use of or inability to use this application or the provision of or failure to provide support.</p> 
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>
<p><br>Version <script language="Javascript">documentwrite(appversion)</script><br>
Scale <script language="Javascript">documentwrite(scalef)</script>
</div> 

<script language="Javascript">
documentwrite('</div></td></tr></table></div>')

var remoteads=[]

if (GetLocalVal('remoteads')==null)
{
// default remoteads
SetLocalVal('remoteads', 'remoteads=[]')

}
if (GetLocalVal('lastremoteadstime')==null) {SetLocalVal('lastremoteadstime', 0)}
// if (Date.now()-(1*GetLocalVal('lastremoteadstime'))>0)
// If it's more than 5 days since last remote ad update, then we upload it.
// However, if there's no internet access, then this loading can hang the app up.  So, we set the last time of upload to be 4 days ago
// then try to reload.  If it fails and hangs up, we're showing a Reload button, which will reload the page, this time without needing to upload the remote ad
// However, if we have no local storage, this won't work, as it would just end up at the reload button again.  In this case, we essentially do nothing, inc. no remote ad upload (safer), and go to auto runonload

if (Date.now()-(1*GetLocalVal('lastremoteadstime'))>(5*24*60*60*1000)) // if more than 5 days
{
if (localstorageworks==1)
{
document.getElementById('theboard').style.display='none'
changetextvalue('output',  '<br><br><table width=80% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=white><tr><td><table width=100% border=0><tr><td  bgcolor=lemonchiffon height='+Math.floor(scalef*75)+' align=center valign=middle>Internet access is required for certain updates, which is currently not available.  Please tap the Reload button and a further attempt will be made after 24 hours.</td></tr><tr height='+Math.floor(scalef*3)+'><td></td></tr><tr><td><table border=0 align=center><tr><td onClick="location.reload()">'+graphicfor('Reload')+'</td></tr></table></td></tr></table></td></tr></table>')
document.getElementById('output').style.display='block'
SetLocalVal('lastremoteadstime', Date.now()-(4*24*60*60*1000)) // in case of problems loading, ensures that it will work for next day, as lasttime now set to 4 days ago, so can reload and it should work fine
documentwrite('<sc'+'ript src="http://www.compactfun.com/remoteads/largeadsuntimed.js?time='+Date.now()+'"></sc'+'ript>')
// ?time=current time above helps to ensure that the javascript is reloaded and that a cached version is not used

}
}


</script>

</body></html>