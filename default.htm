<!DOCTYPE HTML><html><head><title>Xword4x4</title>
<meta name = "viewport" content = "user-scalable=no,width=device-width" />

<script language="Javascript">
var appname='xword4x4'
var appversion='2.0 (20160314)'
var gameon=0
var restartconfirmationrequired=1
var adfrequency=1
var adsrequired=1
var numfreeturns=4

function documentwrite(someitem)
{
document.write(someitem)
}

var scalef
var screenwidth=window.innerWidth
var screenheight=window.innerHeight
var overallwidthscale=screenwidth/240
var overallheightscale=screenheight/360
if (overallwidthscale<overallheightscale) {scalef=Math.floor(10*overallwidthscale)/10} else {scalef=Math.floor(10*overallheightscale)/10}
if (scalef<1.0) {scalef=1.0}


documentwrite('<style type="text/css">      \nbody {color: black; background-color: white; font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left}      \nh1 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: bold; font-style: normal; text-align: left} \nh2 {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: italic; text-align: left} \np {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ndt {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ndd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \nli {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntable {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; text-align: left} \ntd {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; } \ntextarea {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; overflow:hidden;} \ninput {font-family: sans-serif; font-size: '+(scalef*10)+'px; font-weight: normal; font-style: normal; }  \n * {-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}\n</style> \n')

</script>

</head>
<body onLoad="runonload()" TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0 style="background-color:lightcyan; width:100%; height:100%">
<SCRIPT LANGUAGE="JavaScript">

// Local storage
// SetLocalVal and GetLocalVal - use cookies if available, if not local storage
// Reason: for testing, local storage doesn't seem to work.  On devices, local storage works but not always cookies.  Should cover everything.

var daystoExpire = 2000;
var expirydate = new Date(); 
expirydate.setTime(expirydate.getTime() + (daystoExpire*24*60*60*1000));


function GetCookie(name) 
{  
var thecookie=document.cookie
var namestring = name+'='  
var cookieval = null
var cookievalbeg=-1
var cookievalend=thecookie.length
for (var beg=0; beg<thecookie.length; beg++)
{
var end=beg+namestring.length
if (thecookie.substring(beg, end) == namestring)
{
cookievalbeg=end
}
}
if (cookievalbeg > -1)
{
cookievalend=thecookie.indexOf(';', cookievalbeg) // look for next ; after beginning of value
if (cookievalend == -1) (cookievalend = thecookie.length)
cookieval = unescape(thecookie.substring(cookievalbeg, cookievalend))
} 

return cookieval
}


function SetCookie(name, val) 
{  
var cookiestring = name+'='+escape(val)+'; expires='+ expirydate.toGMTString()
document.cookie=cookiestring
}

var usecookies=1
SetCookie('dummy', 'answer')
if (GetCookie('dummy')==null) {usecookies=0}

// For this app cookies not adequate, so must use local storage, so set usecookies to 0
usecookies=0
</script>
<script language="Javascript">
// checks whether local storage works.  Often doesn't with Internet Explorer
var localstorageworks=0
localStorage.setItem('testcheck', '43')
if (localStorage.getItem('testcheck')=='43') {localstorageworks=1}

</script>
<script language="Javascript">


</script>
<script language="Javascript">
var localstoragesubstitute=[]

function SetLocalStorageSubstitute(someitem, someval)
{
someval=someval+''
var someset=0
for (var i=0; i<localstoragesubstitute.length; i++)
{
if (localstoragesubstitute[i][0]==someitem)
{
localstoragesubstitute[i][1]=someval
someset=1
break
}
}
if (someset==0) {localstoragesubstitute=localstoragesubstitute.concat([[someitem, someval]])}
}

function GetLocalStorageSubstitute(someitem)
{
for (var i=0; i<localstoragesubstitute.length; i++)
{
if (localstoragesubstitute[i][0]==someitem)
{
return localstoragesubstitute[i][1]
}
}
return null
}
</script>
<script language="Javascript">

function SetLocalVal(somename, someval)
{
if (usecookies==1) 
{
SetCookie(somename, someval)
}
else
{
if (localstorageworks==1)
{
localStorage.setItem(somename, someval)
}
else
{
SetLocalStorageSubstitute(somename, someval)
}
}
}

function GetLocalVal(somename)
{
if (usecookies==1) 
{
return GetCookie(somename)
}
else
{
if (localstorageworks==1)
{
return localStorage.getItem(somename)
}
else
{
return GetLocalStorageSubstitute(somename)
}
}
}

// end Local Storage




function continueafterad()
{
showingads=0
document.getElementById('theboard').style.display='block'
continuegame()

}

function changetextvalue(someitem, someval)
{
document.getElementById(someitem).innerHTML = someval
}

function changebgcolor(someitem, somecolor)
{
document.getElementById(someitem).style.backgroundColor=somecolor
}

function genintegers(somenum)
{
var someresult=[]
for (var i=1; i<=somenum; i++)
{
someresult[i-1]=i
}
return someresult
}

function member(someitem, somelist)
{
for (var i=0; i<somelist.length; i++)
{
if (someitem==somelist[i]) {return true}
}
return false
}

function randomnumber(num) {
// returns a random number from 1 to num
var ran=Math.round(Math.random()*num)
if (ran == 0) {ran = num}  // ran initially 0 to num - but 0 and num have half the probability of the other numbers
return ran
}

function shufflearray(somearray)
{

var temparray=somearray
var shuffled=new Array()
var packsize=somearray.length
var ran

for (var i=0; i<packsize; i++)
{
ran = randomnumber(temparray.length)
shuffled[i] = temparray[ran-1]
temparray = removeElement(ran-1, temparray)
}
return shuffled
}

function removeElement(index, somearray)
{
var beg=somearray.slice(0, index)
var end=[]
if (index+1 < somearray.length) {end = somearray.slice(index+1)}
return beg.concat(end)
}

function removeitem(someitem, somearray)
{
var somebeg=[]
var someend=[]
for (var i=0; i<somearray.length; i++)
{
if (somearray[i]==someitem) {return somearray.slice(0, i).concat(somearray.slice(i+1))}
}
return somearray
}

function copylist(somelist)
{
var somereturn=[]
for (var i=0; i<somelist.length; i++)
{
somereturn[i]=somelist[i]
}
return somereturn
}



</script>
<script language="Javascript">


/*
Each design: 
Name, 
9x9 array of elements, each a number stating the square property: 0=blank, 1=standard, 2,3, and 4 are premium letter squares, 12, 13, 14 are premium word squares ,
Treatment of ? wilds:  0 means ?s have no value while 1 means treat the ? the same as the original letter,
Number of tiles per player,
Tile triples of form [a,b,c] where a is index of letters  (0=A, 1=B, 25=Z, 26=?), b is number of this in set and c is value
Bonus for using all tiles
Going out treatment: 1 means take values off player and give to player going out, 0 means do nothing, 2 means take values off but don't give to player going out
1/0 Use timer to limit turn
Seconds for turn
*/
var gamedesigndefaults=
[
[
[18, 19, 0, 13, 3, 0, 17, 3],
[
0,0,0,0,0,0,0,0,0,
0,13,1,1,1,2,1,1,13,
0,1,12,1,1,1,3,1,1,
0,1,1,12,1,1,1,2,1,
0,1,1,1,12,1,1,1,2,
0,2,1,1,1,12,1,1,1,
0,1,3,1,1,1,3,1,1,
0,1,1,2,1,1,1,2,1,
0,13,1,1,2,1,1,1,12
],
0,
7,
[0,9,1,1,2,3,2,2,3,3,4,2,4,12,1,5,2,4,6,3,2,7,2,4,8,9,1,9,1,8,10,1,5,11,4,1,12,2,3,13,6,1,14,8,1,15,2,3,16,1,10,17,6,1,18,5,1,19,7,1,20,4,1,21,2,6,22,2,4,23,1,7,24,2,4,25,1,9,26,2,0],
50,
1,
0,
300
]
,
[
[11, 0, 17, 6, 4, 26, 26, 26],
[
14,1,1,1,2,1,1,1,13,
1,12,1,1,1,2,1,1,1,
1,1,0,0,1,1,3,1,1,
1,1,0,0,1,1,1,2,1,
2,1,1,1,12,1,1,1,2,
1,2,1,1,1,12,1,1,1,
1,1,3,1,1,1,3,1,1,
1,1,1,2,1,1,1,2,1,
13,1,1,1,2,1,1,1,1
],
1,
8,
[0,9,1,1,2,3,2,2,3,3,4,2,4,12,1,5,2,4,6,3,2,7,2,4,8,9,1,9,1,8,10,1,5,11,4,1,12,2,3,13,6,1,14,8,1,15,2,3,16,1,10,17,6,1,18,5,1,19,5,1,20,4,1,21,2,6,22,2,4,23,1,7,24,2,4,25,1,9,26,4,0],
60,
2,
1,
360
]
,
[
[16, 20, 8, 2, 10, 26, 26, 26],
[
0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
0,0,13,1,1,2,1,1,12,
0,0,1,1,1,1,1,2,1,
0,0,1,1,12,1,1,1,1,
0,0,2,1,1,12,1,1,2,
0,0,1,1,1,1,3,1,1,
0,0,1,2,1,1,1,2,1,
0,0,13,1,1,2,1,1,1
],
0,
6,
[0,6,1,1,2,3,2,2,3,3,4,2,4,9,1,5,2,4,6,3,2,7,2,4,8,6,1,9,1,8,10,1,5,11,3,1,12,2,3,13,5,1,14,6,1,15,2,3,16,1,10,17,5,1,18,4,1,19,4,1,20,4,1,21,2,6,22,2,4,23,1,7,24,2,4,25,1,9,26,0,0],
40,
0,
1,
240
]
,
[
[2, 17, 14, 18, 18, 26, 26, 26],
[
0,0,13,1,1,1,1,1,13,
0,0,1,1,1,2,1,1,1,
0,0,1,12,1,1,3,1,1,
0,0,1,1,1,1,1,2,1,
12,1,1,1,12,1,1,1,2,
1,2,1,1,1,12,1,1,1,
1,1,3,1,1,1,3,1,1,
1,1,1,2,1,1,1,2,1,
13,1,1,1,2,1,1,1,1
],
0,
7,
[0,9,1,1,2,3,2,2,3,3,4,2,4,12,1,5,2,4,6,3,2,7,2,4,8,9,1,9,1,8,10,1,5,11,4,1,12,2,3,13,6,1,14,8,1,15,2,3,16,1,10,17,6,1,18,5,1,19,5,1,20,4,1,21,2,6,22,2,4,23,1,7,24,2,4,25,1,9,26,2,0],
50,
1,
0,
300
]
]

var gamedesigns=gamedesigndefaults



if (GetLocalVal('designname0')==null) // means never been used before
{
for (var i=0; i<4; i++)
{
SetLocalVal('designname'+i, gamedesigndefaults[i][0])
SetLocalVal('designboard'+i, gamedesigndefaults[i][1])
SetLocalVal('designwilds'+i, gamedesigndefaults[i][2])
SetLocalVal('designnumtiles'+i, gamedesigndefaults[i][3])
SetLocalVal('designletters'+i, gamedesigndefaults[i][4])
SetLocalVal('designalllettersbonus'+i, gamedesigndefaults[i][5])
SetLocalVal('designendactions'+i, gamedesigndefaults[i][6])
SetLocalVal('designusetimer'+i, gamedesigndefaults[i][7])
SetLocalVal('designtimelimit'+i, gamedesigndefaults[i][8])
}
}



function namegame(somelist)
{
var somename=''
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]<26) {somename=somename+letterfromnum(somelist[i])} else {somename=somename+' '}
}
return somename
}






function lastchar(somestring)
{
return somestring.slice(somestring.length-1)
}

var theview=0
var playercolours=['#FF8888', 'yellow', 'limegreen', 'cornflowerblue']
var playercolournames=['Red', 'Yellow', 'Green', 'Blue']
function graphicfor(somename)
{

if (member(somename, ['New', 'Help',  'More', 'Back', 'Rack', 'Swap', 'Pass', 'Down', 'Right', 'OK', 'Accept', 'Reject', 'Hide', 'Cancel', 'See All', 'Reset', 'Tiles', 'Confirm', 'Scores', 'Name', 'Board', 'Bonus', 'Wilds', 'End', 'Timer', 'Design', 'Reload'])==true) {return '<div style="position:relative"><img width='+Math.floor(scalef*50)+' height='+Math.floor(scalef*20)+' src="greybluebutton.png" ><div style="position:absolute;top:0px;left:0px;width:100%;height:100%;display:inline"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle ><tr height='+Math.floor(scalef*20)+'><td align=center valign=middle style="text-align:center;font-weight:bold;color:white">'+somename+'</td></tr></table></div></div>'}
if (member(somename, ['Play2', 'Play3',  'Play4'])==true) {return '<div style="position:relative"><img width='+Math.floor(scalef*20)+' height='+Math.floor(scalef*20)+' src="tealbutton.png" ><div style="position:absolute;top:0px;left:0px;width:100%;height:100%;display:inline"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle ><tr height='+Math.floor(scalef*20)+'><td align=center valign=middle style="text-align:center;font-weight:bold;color:white">'+lastchar(somename)+'</td></tr></table></div></div>'}
// if (member(somename, ['Play2', 'Play3',  'Play4'])==true) {return '<table border=1 cellspacing=0 cellpadding=0 align=left valign=middle style="background-color:violet"><tr><td height='+Math.floor(scalef*12)+' width='+Math.floor(scalef*25)+' style="text-align:center;font-weight:bold">'+lastchar(somename)+'</td></tr></table>'}
// if (somename=='Design') {return '<table border=1 cellspacing=0 cellpadding=0 align=left valign=middle style="background-color:violet"><tr><td height='+Math.floor(scalef*12)+' width='+Math.floor(scalef*50)+' style="text-align:center;font-weight:bold">Design</td></tr></table>'}

if (somename.slice(0,5)=='Score') {return '<table border=0 cellspacing=0 cellpadding=0 align=left valign=middle ><tr><td height='+Math.floor(scalef*12)+' width='+Math.floor(scalef*50)+' style="background-color:silver;text-align:center;font-weight:bold" id="score'+somename.slice(5)+'"></td></tr></table>'}
if (somename=='TheGame') {return '<div style="position:relative"><img width='+Math.floor(scalef*50)+' height='+Math.floor(scalef*20)+' src="lightbluebutton.png" ><div style="position:absolute;top:0px;left:0px;width:100%;height:100%;"><table border=0 cellspacing=0 cellpadding=0 align=center valign=middle ><tr height='+Math.floor(scalef*20)+'><td align=center valign=middle style="text-align:center;font-weight:bold;color:white"><table border=0 cellpadding=0 cellspacing=0 width='+Math.floor(scalef*42)+'><tr><td style="text-align:center;width:50%;height:'+Math.floor(scalef*10)+'px;background-color:white;color:black" id="bagnum">&nbsp;</td><td style="text-align:center;width:50%;height:'+Math.floor(scalef*10)+'px;background-color:green" id="countdown">&nbsp;</td></tr></table></td></tr></table></div></div>'}



if (somename=='blank') {return ''}

return '<b><span style="text-align:center">'+somename+'</span></b>'
}






function startnewgame()
{
if (showingads==1 || showinghelp==1) {return}
var somestatus=gamestatus[0]*1

if (somestatus==1 && gamestatus[2]<7)
{
mydecision('Please confirm that you wish to begin a new game', 'startnewgame2()', 'continuegame()')

}
else
{
startnewgame2()
}

}

function startnewgame2()
{
SetLocalVal('gamestatus', [0])
changetextvalue('squaredetails', '')
showad()
}


function donothing(somenum)
{}
function donothing2()
{}

function showrecord()
{
var sometext=''
sometext=sometext+'<table align=center border=0 cellpadding=0 cellspacing=0><tr><td onClick="showsettings()">'+graphicfor('Back')+'</td></tr></table>'
sometext=sometext+'<br><table align=center border=0  cellpadding=0 cellspacing=0 style="color:black;background-color:lemonchiffon"><tr style="color:white;background-color:purple"><td align=center style="width:'+Math.floor(scalef*35)+'px"><b>Player</b></td><td align=center   style="width:'+Math.floor(scalef*100)+'px"><b>Result</b></td><td align=center style="width:'+Math.floor(scalef*35)+'px"><b>Score</b></td><td align=center style="width:'+Math.floor(scalef*35)+'px"><b>Total</b></td></tr>'
sometext=sometext+GetLocalVal('gamerecord')
sometext=sometext+'</table>'
changetextvalue('output', sometext)
changetextvalue('theboard', '')

}

function showsettings()
{

if (showingads==1 || showinghelp==1) {return}
changetextvalue('squaredetails', '')
gamestatus=GetLocalList('gamestatus')
if (gamestatus[0]==0) {return}
displaytheboard(2)
var somedesignletters=GetLocalList('gameletters')
var sometotaltiles=0
for (var i=0; i<(somedesignletters.length/3); i++)
{
sometotaltiles=sometotaltiles+somedesignletters[(3*i)+1]


}
var sometext=''
sometext=sometext+'<table border=0 width=80% align=center><tr><td align=center><table align=center border=0 cellpadding=0 cellspacing=0><tr><td onClick="continuegame()">'+graphicfor('Back')+'</td></tr></table></td><td align=center><table align=center border=0 cellpadding=0 cellspacing=0><tr><td onClick="showrecord()">'+graphicfor('Scores')+'</td></tr></table></td></tr></table>'
sometext=sometext+'<table align=center border=1 style="color:black;background-color:lemonchiffon"><tr style="color:white;background-color:purple"><td align=center style="width:'+Math.floor(scalef*50)+'px"><b>Tile</b></td><td align=center  style="width:'+Math.floor(scalef*50)+'px"><b>Number</b></td><td align=center style="width:'+Math.floor(scalef*50)+'px"><b>Value</b></td></tr>'

for (var i=0; i<26; i++)
{
sometext=sometext+'<tr><td align=center>'+letterfromnum(i)+'</td><td align=center>'+gameletters[1+3*i]+'</td><td align=center>'+gameletters[2+3*i]+'</td></tr>'
}
sometext=sometext+'<tr><td align=center>'+letterfromnum(26)+'</td><td align=center>'+gameletters[1+3*26]+'</td><td align=center>*</td></tr>'
sometext=sometext+'<tr><td align=center>Total:</td><td align=center>'+sometotaltiles+'</td><td align=center></td></tr>'
var somewilds
if (gamewilds==0) {somewilds='* Wilds (?) count as 0'} else {somewilds='* Wilds (?) count as the value of the letter to which they are mapped'}
sometext=sometext+'<tr><td colspan=3>'+somewilds+'</td><tr>'
sometext=sometext+'</table>'
sometext=sometext+'<br>Number of players: '+gamenumplayers
sometext=sometext+'<br>Number of tiles in complete rack: '+gamenumtiles
sometext=sometext+'<br>Bonus for laying '+gamenumtiles+' tiles: '+gamealllettersbonus
var someendbonus
if (gameendactions==0) {someendbonus='When the game is over, no deductions for remaining tiles or end bonus'}
if (gameendactions==1) {someendbonus='When the game is over, deductions are made for the values of any tiles remaining (?=0), and, if one player has no tiles left, the total of all these is added as an end bonus for that player'}
if (gameendactions==2) {someendbonus='When the game is over, deductions are made for the values of any tiles remaining (?=0), but no bonus for any player with no tiles left'}
sometext=sometext+'<br>'+someendbonus

var sometimertext
if (gameusetimer==0) 
{
sometimertext='<br>No timer used'
}
else
{
sometimertext='<br>Timer used with time limit '+(gametimelimit/60)+' mins.'
}

sometext=sometext+sometimertext

changetextvalue('output', sometext)

/*
if (showingads==1) {return}

*/
}



var starthelpindex=6
function designgame(sometype)
{
starthelpindex=0
blankmappings=[]
selectedpremium=-1
changetextvalue('banner', 'Xword<sup>4x4</sup> Design Game '+(sometype+1))
var sometext='<br><table border=1 width=90% align=center bgcolor=white><tr><td><table border=0 valign=middle align=center border=0 width=100%>'
sometext=sometext+'<tr><td width=100% colspan=2 align=center>Tap one of the four design/edit buttons to change different aspects of the game design, or tap the Reset button to reset the game to its factory settings.<br>&nbsp;</td></tr>'
sometext=sometext+'<tr><td width=50% align=center valign=top><table align=center><tr><td onClick="editname('+sometype+')">'+graphicfor('Name')+'</td></tr></table><i>Name of game<br>Currently:<br>'+namegame(GetLocalList('designname'+sometype))+'</i></td><td  width=50%  align=center valign=top><table align=center><tr><td onClick="editboard('+sometype+')">'+graphicfor('Board')+'</td></tr></table><i>Board size<br>Board layout</i></td></tr>'
sometext=sometext+'<tr><td  align=center valign=top><table align=center><tr><td onClick="edittiles('+sometype+')">'+graphicfor('Tiles')+'</td></tr></table><i>Letter distribution<br>Letter values<br>Wild tiles (?)<br>Deductions<br>Bonuses</i></td><td align=center valign=top><table align=center><tr><td onClick="edittimer('+sometype+')">'+graphicfor('Timer')+'</td></tr></table><i>Use of timer<br>Time limit</i></td></tr>'
sometext=sometext+'<tr><td  align=center valign=top ><table align=center><tr><td onClick="continuegame()">'+graphicfor('Back')+'</td></tr></table><i>Return to Choose New Game</i></td><td  align=center valign=top ><table align=center><tr><td onClick="editreset('+sometype+')">'+graphicfor('Reset')+'</td></tr></table><i>Reset this game to its original factory design</i></td></tr>'

changetextvalue('theboard', sometext)    
changetextvalue('output', '')                                                                                                                                                                                                                                                                                                                                                                                                          
}

function editreset(sometype)
{
starthelpindex=5

changetextvalue('banner', 'Xword<sup>4x4</sup> Design Game '+(sometype+1)+' Reset')
var sometext=''
sometext=sometext+'<br><br><table align=center border=1 cellpadding=0 cellspacing=0 width=80% bgcolor=white><tr><td align=center><table align=center border=0 width=100%><tr><td colspan=2 align=center bgcolor=lemonchiffon><br>Please Confirm reset or Cancel the reset request<br><br></td></tr>'
sometext=sometext+'<tr height='+Math.floor(scalef*3)+'><td colspan=2></td></tr><tr><td width=50% align=center valign=top><table align=center><tr><td onClick="designgame('+sometype+')">'+graphicfor('Cancel')+'</td></tr></table></td><td  width=50%  align=center valign=top><table align=center><tr><td onClick="reallyreset('+sometype+')">'+graphicfor('Confirm')+'</td></tr></table></td></tr></table></td></tr></table>'
changetextvalue('theboard', sometext)    
changetextvalue('output', '')                                                                                                                                                                                                                                                                                                                                                                                                          

}

function reallyreset(sometype)
{

var i=sometype
SetLocalVal('designname'+i, gamedesigndefaults[i][0])
SetLocalVal('designboard'+i, gamedesigndefaults[i][1])
SetLocalVal('designwilds'+i, gamedesigndefaults[i][2])
SetLocalVal('designnumtiles'+i, gamedesigndefaults[i][3])
SetLocalVal('designletters'+i, gamedesigndefaults[i][4])
SetLocalVal('designalllettersbonus'+i, gamedesigndefaults[i][5])
SetLocalVal('designendactions'+i, gamedesigndefaults[i][6])
SetLocalVal('designusetimer'+i, gamedesigndefaults[i][7])
SetLocalVal('designtimelimit'+i, gamedesigndefaults[i][8])
designgame(sometype)
}

function edittimer(sometype)
{
starthelpindex=4

changetextvalue('banner', 'Xword<sup>4x4</sup> Design Game '+(sometype+1)+' Timer')
var sometext=''
sometext=sometext+'<br>A timer may be used to help keep a game moving.  Choose whether to use a timer or not.<br><br>'

sometext=sometext+'<table border=1 align=center><tr><td width=50% onClick="changetimerhandling('+sometype+', 0)" id="timertreatment0" style="text-align:center;background-color:white">No timer</td><td width=50% onClick="changetimerhandling('+sometype+', 1)" id="timertreatment1" style="text-align:center;background-color:white">Use a timer</td></tr></table>'

sometext=sometext+'<br>If a timer is being used, please specify the time limit (minutes):'

sometext=sometext+'<br><br><table border=0 align=center><tr><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:red" onClick="changetimelimit('+sometype+', -1, 2, 10)">&lt;</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:white">'+(GetLocalVal('designtimelimit'+sometype)*1/60)+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:green" onClick="changetimelimit('+sometype+', 1, 2, 9)">&gt;</td></tr></table>'

sometext=sometext+'<br><br><table align=center border=0><tr><td onClick="designgame('+sometype+')" width='+Math.floor(scalef*50)+'>'+graphicfor('Back')+'</td></tr></table>'
changetextvalue('theboard', sometext)    
changetextvalue('output', '')                                                                                                                                                                                                                                                                                                                                                                                                          



var sometimerhandling=GetLocalVal('designusetimer'+sometype)*1
changebgcolor('timertreatment'+sometimerhandling, 'lime')

}

function changetimerhandling(sometype, someval)
{
SetLocalVal('designusetimer'+sometype, someval)
edittimer(sometype)
}

function changetimelimit(sometype, somechange, somemin, somemax)
{
var somenum=(GetLocalVal('designtimelimit'+sometype)*1)/60
var somenewnum=somenum+somechange
if (somenewnum<somemin || somenewnum>somemax)
{
somenewnum=somenum // no change if beyond limits
}
SetLocalVal('designtimelimit'+sometype, (somenewnum*60))
edittimer(sometype)
}

var minnumtiles=50

function edittiles(sometype)
{
starthelpindex=3
var somedesignletters=GetLocalList('designletters'+sometype)
var sometotaltiles=0
for (var i=0; i<(somedesignletters.length/3); i++)
{
sometotaltiles=sometotaltiles+somedesignletters[(3*i)+1]


}
var somemin=minnumtiles
var somewarningtext=''
if (sometotaltiles==somemin) {somewarningtext='(Min. '+somemin+')'}
changetextvalue('banner', 'Xword<sup>4x4</sup> Design Game '+(sometype+1)+' Tiles')
var sometext=''
sometext=sometext+'<br><table align=center border=0><tr><td onClick="designgame('+sometype+')" width='+Math.floor(scalef*50)+'>'+graphicfor('Back')+'</td></tr></table>'

sometext=sometext+'<br><table border=1 align=center bgcolor=beige><tr><td><table border=0 align=center><tr><td style="text-align:center;font-weight:bold">Tile</td><td style="text-align:center;font-weight:bold" colspan=3>Number</td><td></td><td style="text-align:center;font-weight:bold" colspan=3>Value</td></tr>'
for (var i=0; i<26; i++)
{
sometext=sometext+'<tr><td style="text-align:center;font-weight:bold">'+letterfromnum(i)+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:red" onClick="changenumletters('+sometype+', -1, '+i+', 1, 20)">&lt;</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:white">'+GetLocalList('designletters'+sometype)[(3*i)+1]+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:green" onClick="changenumletters('+sometype+', 1, '+i+', 1, 20)">&gt;</td><td width='+Math.floor(scalef*5)+'></td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:red" onClick="changelettervalue('+sometype+', -1, '+i+', 1, 20)">&lt;</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:white">'+GetLocalList('designletters'+sometype)[(3*i)+2]+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:green" onClick="changelettervalue('+sometype+', 1, '+i+', 1, 20)">&gt;</td></tr>'
}
i=26
sometext=sometext+'<tr><td style="text-align:center;font-weight:bold">'+letterfromnum(i)+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:red" onClick="changenumletters('+sometype+', -1, '+i+', 0, 20)">&lt;</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:white">'+GetLocalList('designletters'+sometype)[(3*i)+1]+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:green" onClick="changenumletters('+sometype+', 1, '+i+', 1, 20)">&gt;</td><td width='+Math.floor(scalef*5)+'></td><td></td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold">*</td><td></td></tr>'
sometext=sometext+'<tr><td style="text-align:center;font-weight:bold" colspan=2>Total:</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold">'+sometotaltiles+'</td><td colspan=4>'+somewarningtext+'</td></tr>'

sometext=sometext+'</table></td></tr></table>'

sometext=sometext+'<br><b>* Wild (?) value</b><br><br>A wild (?) always has zero value on a rack.  You may choose the value that it has when placed (current setting shown with a green background):'


sometext=sometext+'<br><br><table border=1 align=center><tr><td width=50% onClick="changewildhandling('+sometype+', 0)" id="zerotreatment0" style="text-align:center;background-color:white">Zero</td><td width=50% onClick="changewildhandling('+sometype+', 1)" id="zerotreatment1" style="text-align:center;background-color:white">Value of the letter it represents</td></tr></table>'

sometext=sometext+'<br><b>Tiles per rack</b><br><br>Please specify the number of tiles to be placed in each rack initially:'

sometext=sometext+'<br><br><table border=0 align=center><tr><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:red" onClick="changeracktiles('+sometype+', -1, 6, 8)">&lt;</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:white">'+GetLocalVal('designnumtiles'+sometype)+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:green" onClick="changeracktiles('+sometype+', 1, 6, 8)">&gt;</td></tr></table>'

sometext=sometext+'<br><b>All-letter bonus</b><br><br>Please specify the bonus for any player laying the number of tiles per rack specified above in one turn:'

sometext=sometext+'<br><br><table border=0 align=center><tr><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:red" onClick="changealltilesbonus('+sometype+', -10, 0, 100)">&lt;</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:white">'+GetLocalVal('designalllettersbonus'+sometype)+'</td><td style="width:'+Math.floor(scalef*20)+'px;text-align:center;font-weight:bold;background-color:green" onClick="changealltilesbonus('+sometype+', 10, 0, 100)">&gt;</td></tr></table>'

sometext=sometext+'<br><b>End deductions and bonus</b><br><br>When the game ends, certain deductions may be made and bonuses added.  Please specify these (current setting shown with a green background):'

sometext=sometext+'<br><br><table border=1 align=center width=80%><tr><td onClick="changeendhandling('+sometype+', 0)" id="endhandling0" style="text-align:center;background-color:white">No deductions or bonuses</td></tr><tr><td onClick="changeendhandling('+sometype+', 1)" id="endhandling1" style="text-align:center;background-color:white">Values of tiles left in rack deducted from each player, and total of these added as a bonus to the player (if any) having no tiles left in rack</td></tr><tr><td onClick="changeendhandling('+sometype+', 2)" id="endhandling2" style="text-align:center;background-color:white">Values of tiles left in rack deducted from each player, but no bonus for any player having no tiles left in rack</td></tr></table>'







changetextvalue('theboard', sometext)    
changetextvalue('output', '')                                                                                                                                                                                                                                                                                                                                                                                                          

var somewildhandling=GetLocalVal('designwilds'+sometype)*1
changebgcolor('zerotreatment'+somewildhandling, 'lime')

var someendhandling=GetLocalVal('designendactions'+sometype)*1
changebgcolor('endhandling'+someendhandling, 'lime')

}

function changeendhandling(sometype, someval)
{
SetLocalVal('designendactions'+sometype, someval)
edittiles(sometype)
}

function changealltilesbonus(sometype, somechange, somemin, somemax)
{
var somenum=GetLocalVal('designalllettersbonus'+sometype)*1
var somenewnum=somenum+somechange
if (somenewnum<somemin || somenewnum>somemax)
{
somenewnum=somenum // no change if beyond limits
}
SetLocalVal('designalllettersbonus'+sometype, somenewnum)
edittiles(sometype)
}

function changeracktiles(sometype, somechange, somemin, somemax)
{
var somenum=GetLocalVal('designnumtiles'+sometype)*1
var somenewnum=somenum+somechange
if (somenewnum<somemin || somenewnum>somemax)
{
somenewnum=somenum // no change if beyond limits
}
SetLocalVal('designnumtiles'+sometype, somenewnum)
edittiles(sometype)
}


function changewildhandling(sometype, someval)
{
SetLocalVal('designwilds'+sometype, someval)
edittiles(sometype)
}

function changenumletters(sometype, somechange, someindex, somemin, somemax)
{
var somelist=GetLocalList('designletters'+sometype)
var somenum=somelist[3*someindex+1]
var somenewnum=somenum+somechange
var sometotal=somechange
for (var i=0; i<(somelist.length/3); i++)
{
sometotal=sometotal+somelist[3*i+1]
}
if (somenewnum<somemin || somenewnum>somemax || sometotal<minnumtiles)
{
somenewnum=somenum // no change if beyond limits
}

somelist[3*someindex+1]=somenewnum
SetLocalVal('designletters'+sometype, somelist)
edittiles(sometype)
}

function changelettervalue(sometype, somechange, someindex, somemin, somemax)
{
var somelist=GetLocalList('designletters'+sometype)
var somenum=somelist[3*someindex+2]
var somenewnum=somenum+somechange
if (somenewnum<somemin || somenewnum>somemax)
{
somenewnum=somenum // no change if beyond limits
}
somelist[3*someindex+2]=somenewnum
SetLocalVal('designletters'+sometype, somelist)
edittiles(sometype)
}



function editboard(sometype)
{
starthelpindex=2

changetextvalue('banner', 'Xword<sup>4x4</sup> Design Game '+(sometype+1)+' Board Layout')

gameboard=GetLocalList('designboard'+sometype)
gameboardletters=[]
for (var i=0; i<gameboard.length; i++)
{
gameboardletters[i]=-1
}
theview=2
var somecellsize=Math.floor(scalef*15) 
var someborder=Math.floor(scalef*1)
var someboardbgsize=(somecellsize*9)+someborder
var sometextsize=somecellsize-Math.floor(scalef*6)
cellsize=somecellsize-someborder
celltextsize=sometextsize
boardbgsize=someboardbgsize
var sometable='<table border=0 width='+someboardbgsize+' cellpadding=0 cellspacing=0 align=center><tr><td>'
sometable=sometable+'<div id="maingrid" style="display:inline">'
sometable=sometable+'<div style="position:relative;left:0px;top:0px;width:'+someboardbgsize+'px;height:'+someboardbgsize+'px;background-color:black;">'
var someindex=0

for (var i=0; i<9; i++)
{
for (var j=0; j<9; j++)
{
sometable=sometable+'<div style="position:absolute; left:'+((j*somecellsize)+someborder)+'px;top:'+((i*somecellsize)+someborder)+'px;width:'+cellsize+'px;height:'+cellsize+'px;background-color:black;font-size:'+sometextsize+'px;font-weight:bold" onClick="designboardclick('+someindex+', '+sometype+')" id="designcell'+someindex+'">'+cellimage(someindex, theview)+'</div>'
someindex++
}
}

sometable=sometable+'</div></div></td></tr></table>'

changetextvalue('theboard', sometable)

var sometext='<br>The above represents the <b>top-left</b> of the board only (the bottom-right cell is the middle square). Click on one of the palette cells below then on one of the above cells to change the board layout.<br>&nbsp;'
gameboard=[0,1,2,3,4,12,13,14]
sometext=sometext+'<table border=1 align=center bgcolor=white><tr><td><table border=0 align=center>'
sometext=sometext+'<tr><td align=center width='+Math.floor(scalef*80)+'>Standard</td><td align=center onClick="selectpattern(1,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(1, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection1">&nbsp;</td><td align=center   width='+Math.floor(scalef*80)+'>Black - no tile</td><td align=center onClick="selectpattern(0,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(0, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection0">&nbsp;</td></tr>'
sometext=sometext+'<tr><td align=center>Letter x2</td><td align=center  onClick="selectpattern(2,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(2, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection2">&nbsp;</td><td align=center>Word x2</td><td align=center  onClick="selectpattern(5,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(5, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection5">&nbsp;</td></tr>'
sometext=sometext+'<tr><td align=center>Letter x3</td><td align=center  onClick="selectpattern(3,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(3, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection3">&nbsp;</td><td align=center>Word x3</td><td align=center  onClick="selectpattern(6,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(6, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection6">&nbsp;</td></tr>'
sometext=sometext+'<tr><td align=center>Letter x4</td><td align=center  onClick="selectpattern(4,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(4, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection4">&nbsp;</td><td align=center>Word x4</td><td align=center  onClick="selectpattern(7,'+sometype+')" width='+cellsize+'  height='+cellsize+'>'+cellimage(7, theview)+'</td><td style="text-align:left;font-weight:bold;color:red"   width='+Math.floor(scalef*10)+' id="patternselection7">&nbsp;</td></tr>'
sometext=sometext+'</table></td></tr></table><table align=center border=0 width=80%><tr><td width=50% onClick="designgame('+sometype+')" width='+Math.floor(scalef*50)+' align=center>'+graphicfor('Back')+'</td><td width=50% onClick="showfullboard('+sometype+')" width='+Math.floor(scalef*50)+' align=center>'+graphicfor('See All')+'</td></tr></table>'

changetextvalue('output', sometext)

if (selectedpremium>-1) 
{
changetextvalue('patternselection'+selectedpremium, '&lt;')

}

}

function showfullboard(somelayout)
{
var someboard=eval('['+GetLocalVal('designboard'+somelayout)+']')
var someboardarray=[]
for (var i=0; i<9; i++)
{
someboardarray[i]=someboard.slice(i*9, (i+1)*9)
}
// next find effective size of board - but minimum 11 (3 blanks top and left on a 17*17 board)
var somegaps=3


for (var i=0; i<9; i++)
{
for (var j=0; j<9; j++)
{
if (someboardarray[i][j]>0)
{
if (i<somegaps) {somegaps=i}
if (j<somegaps) {somegaps=j}
}
}
}
// somegaps now contains the effective number of gaps on a 17*17 board, so effective board size is 1+2*(8-(somegaps))

var someeffectivesize=1+2*(8-(somegaps))
gameboardsize=someeffectivesize
var somefinalboardarray=[]
for (var i=0; i<9-somegaps; i++)
{
somefinalboardarray[i]=[]
for (var j=0; j<9-somegaps; j++)
{
somefinalboardarray[i][j]=someboardarray[i+somegaps][j+somegaps]
}
}
var somelayoutwidth=9-somegaps
var somelayoutheight=9-somegaps
var sometotalboardarray=[]
for (var i=0; i<somelayoutheight; i++)
{
sometotalboardarray[i]=somefinalboardarray[i].concat((somefinalboardarray[i].slice(0, somelayoutwidth-1)).reverse())
}
sometotalboardarray=sometotalboardarray.concat((sometotalboardarray.slice(0, somelayoutheight-1)).reverse())

gameboard=[]
for (var i=0; i<sometotalboardarray.length; i++)
{
gameboard=gameboard.concat(sometotalboardarray[i])
}

var someplaces=[]
for (var i=0; i<(someeffectivesize*someeffectivesize); i++)
{
someplaces[i]=-1
}
gameboardletters=someplaces
// 'gameboardletters' represents the letters on the board.  Initially all set to -1 to signify empty
displaytheboard(2)
changetextvalue('output', '<table align=center border=0><tr><td onClick="editboard('+somelayout+')" width='+Math.floor(scalef*50)+' align=center>'+graphicfor('Back')+'</td></tr></table>')
}

var selectedpremium=-1
function selectpattern(somenum, sometype)
{
selectedpremium=somenum
editboard(sometype)

}

function designboardclick(someindex, sometype)
{
if (selectedpremium==-1) {return}
var somenew=gameboard[selectedpremium]
if (someindex==80 && selectedpremium==0) // if trying to make the centre square a black
{
return
}
var somelist=GetLocalList('designboard'+sometype)
somelist[someindex]=somenew
SetLocalVal('designboard'+sometype, somelist)
editboard(sometype)
}

function editname(sometype)
{
starthelpindex=1

var somenum=8
var sometiles=[]
for (var i=0; i<somenum; i++)
{
sometiles[i]=26
}

if (blankmappings.length>sometiles.length)
{
SetLocalVal('designname'+sometype, blankmappings.slice(0, sometiles.length))
designgame(sometype)
return

}
else
{
for (var i=0; i<blankmappings.length; i++)
{
sometiles[i]=blankmappings[i]
}
mapnameletterblank(blankmappings.length, sometiles, 26, sometype)

}

}

function delnameletter(sometype)
{
if (blankmappings.length==0) {return}
if (blankmappings.length>0)
{
blankmappings=blankmappings.slice(0, blankmappings.length-1)
}

editname(sometype)
}


function mapnameletterblank(someindex, sometiles, somecurrent, sometype)
{
var sometext=''
var racksize=sometiles.length

sometext=sometext+'<br><table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'
for (var i=0; i<racksize; i++)
{
if (i!=someindex)
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
else
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="background-color:black;text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}

}
sometext=sometext+'</tr><tr>'
var someletter
var somechar
var someval

for (var i=0; i<sometiles.length; i++)
{
someletter=sometiles[i]
if (i==someindex) {someletter=somecurrent}
somechar=letterfromnum(someletter)
if (someletter==26) {somechar='&nbsp;'}
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'

}


sometext=sometext+'</tr></table>'
var someconfirmkey
if (someindex==sometiles.length) // just need confirmation
{
sometext=sometext+'<p style="text-align:center"><br>Tap &gt; or any letter key below to confirm the name (or &lt; to make changes)<br><br>'
someconfirmkey='<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapnameletterto(0,'+sometype+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold;background-color:green">&gt;</td></tr></table></td>'
}
else
{
sometext=sometext+'<p style="text-align:center"><br>Tap a letter below to specify the letter of the game name marked above<br><br>'
someconfirmkey='<td></td>'
}

sometext=sometext+'<table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'



for (var i=0; i<9; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapnameletterto('+i+','+sometype+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="delnameletter('+sometype+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold;background-color:red">&lt;</td></tr></table></td></tr><tr>'

for (var i=9; i<18; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapnameletterto('+i+','+sometype+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

sometext=sometext+someconfirmkey+'</tr><tr>'
for (var i=18; i<26; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapnameletterto('+i+','+sometype+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}


sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapnameletterto(26,'+sometype+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">&nbsp;</td></tr></table></td><td></td></tr></table><br><br><table align=center border=0><tr><td onClick="designgame('+sometype+')" width='+Math.floor(scalef*50)+'>'+graphicfor('Cancel')+'</td></tr></table>'

changetextvalue('theboard', sometext)
changetextvalue('output', '')
changetextvalue('banner', 'Xword<sup>4x4</sup> Design Game '+(sometype+1)+' Name')

}

function mapnameletterto(someletter, sometype)
{
blankmappings=blankmappings.concat([someletter])
editname(sometype)
}


function showintro()
{
showhelpindex=6
var sometext='<table width=100% valign=top align=center><tr><td align=left><br>Xword<sup>4x4</sup> lets you design, save, and play 4 named crossword games.  You can specify positions of 2x, 3x and 4x word or letter special squares, and positions of black squares, on which you cannot place letters.  In addition, you can specify letter values and numbers, the treatment of "?" tiles (wilds), and other features.<br><br>Press one of the 2, 3 or 4 buttons below to start a game for that number of players with one of the currently-defined games.  Alternatively, press one of the Design buttons to view or change the design.<br><br>'
sometext=sometext+'<table border=0>'
sometext=sometext+'<tr><td width='+Math.floor(scalef*15)+'>1</td><td width='+Math.floor(scalef*50)+'>'+namegame(GetLocalList('designname0'))+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(0,2)">'+graphicfor('Play2')+'</td><td width='+Math.floor(scalef*5)+'></td><td width='+Math.floor(scalef*20)+' onClick="begingame(0,3)">'+graphicfor('Play3')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(0,4)">'+graphicfor('Play4')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*50)+' onClick="designgame(0)">'+graphicfor('Design')+'</td></tr>'
sometext=sometext+'<tr><td width='+Math.floor(scalef*15)+'>2</td><td width='+Math.floor(scalef*50)+'>'+namegame(GetLocalList('designname1'))+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(1,2)">'+graphicfor('Play2')+'</td><td width='+Math.floor(scalef*5)+'></td><td width='+Math.floor(scalef*20)+' onClick="begingame(1,3)">'+graphicfor('Play3')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(1,4)">'+graphicfor('Play4')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*50)+' onClick="designgame(1)">'+graphicfor('Design')+'</td></tr>'
sometext=sometext+'<tr><td width='+Math.floor(scalef*15)+'>3</td><td width='+Math.floor(scalef*50)+'>'+namegame(GetLocalList('designname2'))+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(2,2)">'+graphicfor('Play2')+'</td><td width='+Math.floor(scalef*5)+'></td><td width='+Math.floor(scalef*20)+' onClick="begingame(2,3)">'+graphicfor('Play3')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(2,4)">'+graphicfor('Play4')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*50)+' onClick="designgame(2)">'+graphicfor('Design')+'</td></tr>'
sometext=sometext+'<tr><td width='+Math.floor(scalef*15)+'>4</td><td width='+Math.floor(scalef*50)+'>'+namegame(GetLocalList('designname3'))+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(3,2)">'+graphicfor('Play2')+'</td><td width='+Math.floor(scalef*5)+'></td><td width='+Math.floor(scalef*20)+' onClick="begingame(3,3)">'+graphicfor('Play3')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*20)+' onClick="begingame(3,4)">'+graphicfor('Play4')+'</td><td width='+Math.floor(scalef*5)+'><td width='+Math.floor(scalef*50)+' onClick="designgame(3)">'+graphicfor('Design')+'</td></tr>'
sometext=sometext+'</td></tr></table>'
sometext=sometext+'</td></tr></table><p style="text-align:center">TopAccolades</p>'
changetextvalue('banner', 'Xword<sup>4x4</sup>  Choose New Game')
changetextvalue('theboard', sometext)
changetextvalue('output', '')
document.getElementById('theboard').style.display='inline'
for (var i=0; i<4; i++)
{
changetextvalue('score'+i, '')
changebgcolor('score'+i, 'silver')
}
}



var gamename
var gamenametext
var gameletters
var gamewilds
var gamenumtiles
var gamealllettersbonus
var gameendactions
var gamenumplayers
var gamebag
var gameboardsize
var gameboard
var gameboardletters
var tempgameboardletters // used for when showing placed tiles before acceptance
var gamevalues
var gamestatus=[0]
var gameusetimer
var gametimelimit
var gametimeleft
var rack0
var rack1
var rack2
var rack3
var score0
var score1
var score2
var score3


function GetLocalList(somename)
{
var somestore=GetLocalVal(somename)
if (somestore==null) {return []}
return eval('['+somestore+']')
}

function GetLocalString(somename)
{
var somestore=GetLocalVal(somename)
if (somestore==null) {return ''}
return somestore
}

function addtilestorack(someplayer, somenum)
{
var somebag=shufflearray(GetLocalList('gamebag'))
var sometaken=somebag.slice(0, somenum)
var someexisting=GetLocalList('rack'+someplayer)
var somenewrack=someexisting.concat(sometaken)
SetLocalVal('rack'+someplayer, somenewrack)
somenewbag=somebag.slice(somenum)
SetLocalVal('gamebag', somenewbag)
}

function begingame(somelayout, someplayers)
{
starthelpindex=6
SetLocalVal('gamename', GetLocalString('designname'+somelayout))
SetLocalVal('gameletters', GetLocalList('designletters'+somelayout))
SetLocalVal('gamewilds', GetLocalVal('designwilds'+somelayout))
SetLocalVal('gamenumtiles', GetLocalVal('designnumtiles'+somelayout))
SetLocalVal('gamealllettersbonus', GetLocalVal('designalllettersbonus'+somelayout))
SetLocalVal('gameendactions', GetLocalVal('designendactions'+somelayout))
SetLocalVal('gameusetimer', GetLocalVal('designusetimer'+somelayout))
SetLocalVal('gametimelimit', GetLocalVal('designtimelimit'+somelayout))
SetLocalVal('gametimeleft', '0')
SetLocalVal('gamerecord', '')

var numplayers=someplayers
SetLocalVal('gamenumplayers', ''+numplayers)
var firstplayer=randomnumber(numplayers)-1
var someboard=eval('['+GetLocalVal('designboard'+somelayout)+']')
var someboardarray=[]
for (var i=0; i<9; i++)
{
someboardarray[i]=someboard.slice(i*9, (i+1)*9)
}
// next find effective size of board - but minimum 11 (3 blanks top and left on a 17*17 board)
var somegaps=3


for (var i=0; i<9; i++)
{
for (var j=0; j<9; j++)
{
if (someboardarray[i][j]>0)
{
if (i<somegaps) {somegaps=i}
if (j<somegaps) {somegaps=j}
}
}
}
// somegaps now contains the effective number of gaps on a 17*17 board, so effective board size is 1+2*(8-(somegaps))

var someeffectivesize=1+2*(8-(somegaps))
SetLocalVal('gameboardsize', someeffectivesize)
var somefinalboardarray=[]
for (var i=0; i<9-somegaps; i++)
{
somefinalboardarray[i]=[]
for (var j=0; j<9-somegaps; j++)
{
somefinalboardarray[i][j]=someboardarray[i+somegaps][j+somegaps]
}
}
var somelayoutwidth=9-somegaps
var somelayoutheight=9-somegaps
var sometotalboardarray=[]
for (var i=0; i<somelayoutheight; i++)
{
sometotalboardarray[i]=somefinalboardarray[i].concat((somefinalboardarray[i].slice(0, somelayoutwidth-1)).reverse())
}
sometotalboardarray=sometotalboardarray.concat((sometotalboardarray.slice(0, somelayoutheight-1)).reverse())
SetLocalVal('gameboard', sometotalboardarray)
// 'gameboard' now contains just a single array of layouts as a string 

var someplaces=[]
for (var i=0; i<(someeffectivesize*someeffectivesize); i++)
{
someplaces[i]=-1
}
SetLocalVal('gameboardletters', someplaces)
// 'gameboardletters' represents the letters on the board.  Initially all set to -1 to signify empty
var someletters=eval('['+GetLocalVal('designletters'+somelayout)+']')

var somebag=[]
for (var i=0; i<27; i++)
{
for (var j=0; j<someletters[(i*3)+1]; j++)
{
somebag=somebag.concat([someletters[i*3]])
}
}
somebag=shufflearray(somebag)
SetLocalVal('gamebag', somebag)
// 'gamebag' contains a shuffled bag of letters (all expressed as 0-26), where 0=A, 25=Z, 26=?


for (var i=0; i<4; i++)
{
SetLocalVal('rack'+i, [-2]) // adds the separator
SetLocalVal('score'+i, 0)
}

for (var i=0; i<numplayers; i++)
{
addtilestorack(i, GetLocalVal('gamenumtiles')*1)
}


var somevalues=[]
for (var i=0; i<26; i++)
{
for (var j=0; j<someletters[(i*3)+1]; j++)
{
somevalues[i]=someletters[(i*3)+2]
}
}
SetLocalVal('gamevalues', somevalues)


theview=0
SetLocalVal('gamepasses', 0)
SetLocalVal('gamestatus', [0, firstplayer])
continuegame()
// defineuserinitials()
}

var gameinitials

function initialsfor(somenum)
{
return [gameinitials[somenum*2], gameinitials[1+somenum*2]]
}

function textinitialsfor(somenum)
{
return ''+letterfromnum(gameinitials[somenum*2])+''+letterfromnum(gameinitials[1+somenum*2])
}

function defineuserinitials()
{
starthelpindex=7
blankmappings=[]
gamestatus=GetLocalList('gamestatus')
if (GetLocalVal('gameinitials')==null) {SetLocalVal('gameinitials', [15, 0, 15, 1, 15, 2, 15, 3])}
gameinitials=GetLocalList('gameinitials')
var someinitialstext=[]
for (var i=0; i<4; i++)
{
someinitialstext[i]=textinitialsfor(i)
}
var somedesctext=''
gamenumplayers=GetLocalVal('gamenumplayers')*1
if (gamenumplayers==2) {somedesctext='The two players each have a different associated colour: '+playercolournames[0]+' or '+playercolournames[1]+'. Please now agree who will play with each colour.<br><br>Each player also has two associated initials.  The current settings for these are shown below.  If you wish to use these initials press OK, but if you wish to reset them press Reset.'}
if (gamenumplayers==3) {somedesctext='The three players each have a different associated colour: '+playercolournames[0]+', '+playercolournames[1]+' or '+playercolournames[2]+'.  Regardless of who goes first, we know that during play the order will be '+playercolournames[0]+', '+playercolournames[1]+', '+playercolournames[2]+' and then '+playercolournames[0]+' again. Please now agree who will play with each colour.<br><br>Each player also has two associated initials.  The current settings for these are shown below.  If you wish to use these initials press Continue, but if you wish to reset them press Reset.'}
if (gamenumplayers==4) {somedesctext='The four players each have a different associated colour: '+playercolournames[0]+', '+playercolournames[1]+', '+playercolournames[2]+' or '+playercolournames[3]+'.  Regardless of who goes first, we know that during play the order will be '+playercolournames[0]+', '+playercolournames[1]+', '+playercolournames[2]+', '+playercolournames[3]+' and then '+playercolournames[0]+' again. Please now agree who will play with each colour.<br><br>Each player also has two associated initials.  The current settings for these are shown below.  If you wish to use these initials press OK, but if you wish to reset them press Reset.'}

somedesctext=somedesctext+'<div style="height:'+Math.floor(scalef*5)+'px"></div><table border=1 cellpadding=0 cellspacing=0  align=center width=80% bgcolor=white><tr><td style="width:50%;font-weight:bold;text-align:center">Player</td><td style="width:50%;font-weight:bold;text-align:center">Initials</td></tr>'
for (var i=0; i<gamenumplayers; i++)
{
somedesctext=somedesctext+'<tr><td style="font-weight:bold;text-align:center;background-color:'+playercolours[i]+'">'+playercolournames[i]+'</td><td style="font-weight:bold;text-align:center">'+textinitialsfor(i)+'</td></tr>'
}
somedesctext=somedesctext+'</table><div style="height:'+Math.floor(scalef*5)+'px"></div>'
var sometext='<div style="height:'+Math.floor(scalef*10)+'px"></div><table width=95% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=white><tr><td><table width=100% border=0 cellpadding='+Math.floor(scalef*2)+'><tr><td  colspan=2 bgcolor=lemonchiffon height='+Math.floor(scalef*75)+' align=left valign=middle>'+somedesctext+'<div style="height:'+Math.floor(scalef*5)+'px"></div></td></tr><tr height='+Math.floor(scalef*5)+'><td><td></tr><tr><td  onClick="resetinitials()" align=center>'+graphicfor('Reset')+'</td><td onClick="reallybegingame()" align=center>'+graphicfor('OK')+'</td></tr></table></td></tr></table>'
changetextvalue('banner', 'Xword<sup>4x4</sup>  Player Details')
changetextvalue('theboard', sometext)
}


function resetinitials()
{

var somenum=gamenumplayers*2
var sometiles=[]

for (var i=0; i<somenum; i++)
{
sometiles[i]=26
}

if (blankmappings.length>sometiles.length)
{
for (var i=0; i<sometiles.length; i++)
{
gameinitials[i]=blankmappings[i]
}
SetLocalVal('gameinitials', gameinitials)
defineuserinitials()
return


}
else
{
for (var i=0; i<blankmappings.length; i++)
{
sometiles[i]=blankmappings[i]
}
mapinitialblank(blankmappings.length, sometiles, 26)

}
}

function delinitial()
{
if (blankmappings.length==0) {return}
if (blankmappings.length>0)
{
blankmappings=blankmappings.slice(0, blankmappings.length-1)
}

resetinitials()
}

function mapinitialblank(someindex, sometiles, somecurrent)
{
var sometext=''
var racksize=sometiles.length

sometext=sometext+'<br><table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'
for (var i=0; i<racksize; i++)
{
if (i!=someindex)
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
else
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="background-color:black;text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
if (member(i, [1,3,5])==true)
{
sometext=sometext+'<td width='+Math.floor(scalef*5)+'></td>'
}
}
sometext=sometext+'</tr><tr>'
var someletter
var somechar
var someval

for (var i=0; i<sometiles.length; i++)
{
someletter=sometiles[i]
if (i==someindex) {someletter=somecurrent}
somechar=letterfromnum(someletter)
if (someletter==26) {somechar='&nbsp;'}
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
if (member(i, [1,3,5])==true)
{
sometext=sometext+'<td width='+Math.floor(scalef*5)+'></td>'
}
}

sometext=sometext+'</tr><tr>'
for (var i=0; i<racksize; i++)
{
sometext=sometext+'<td height='+Math.floor(scalef*10)+' style="background-color:'+playercolours[Math.floor(i/2)]+';text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
if (member(i, [1,3,5])==true)
{
sometext=sometext+'<td width='+Math.floor(scalef*10)+'></td>'
}
}

sometext=sometext+'</tr></table>'
var someconfirmkey
if (someindex==sometiles.length)
{
sometext=sometext+'<p style="text-align:center"><br>Tap &gt; or any letter key below to confirm the initials (or &lt; to make changes)<br><br>'
someconfirmkey='<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapinitialto(0)"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold;background-color:green">&gt;</td></tr></table></td>'
}
else
{
sometext=sometext+'<p style="text-align:center"><br>Tap a letter below to specify the letter of the initials marked above<br><br>'
someconfirmkey='<td></td>'
}

sometext=sometext+'<table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'



for (var i=0; i<9; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapinitialto('+i+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="delinitial()"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold;background-color:red">&lt;</td></tr></table></td></tr><tr>'

for (var i=9; i<18; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapinitialto('+i+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

sometext=sometext+someconfirmkey+'</tr><tr>'
for (var i=18; i<26; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapinitialto('+i+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}


sometext=sometext+'<td></td><td></td></tr></table><br><br><table align=center border=0><tr><td onClick="defineuserinitials()" width='+Math.floor(scalef*50)+'>'+graphicfor('Cancel')+'</td></tr></table>'

changetextvalue('theboard', sometext)
changetextvalue('output', '')
changetextvalue('banner', 'Xword<sup>4x4</sup> Player Initials')

}

function mapinitialto(someletter)
{
blankmappings=blankmappings.concat([someletter])
resetinitials()
}


function reallybegingame()
{
var somestatus=GetLocalList('gamestatus')
SetLocalVal('gamestatus', [1, somestatus[1], 0])
continuegame()
}

function dealwithpasses(somenum)
{
if (somenum==0) 
{
SetLocalVal('gamepasses', 0)
}
else
{
SetLocalVal('gamepasses', 1+(GetLocalVal('gamepasses')*1))

}

}

var racks
var scores
var cellsize
var celltextsize


function cellimage(someindex, sometype)
{

// sometype: 0=letters if not empty; 1=values if not empty; 2=board only
var somecontent
var someboardcontent=gameboard[someindex]

var somelettercontent=gameboardletters[someindex]
if (sometype==2 || somelettercontent==-1) 
{somecontent='board'+someboardcontent}
else
{
if (sometype==0)
{somecontent='letter'+somelettercontent}
else
{somecontent='value'+somelettercontent}
}

var someval
var premiumtextsize=Math.floor(celltextsize*1.0)
if (somecontent.slice(0,5)=='board')
{
someval=somecontent.slice(5) 


if (someval=='0') {return '<table border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td style="text-align:center" bgcolor="black">&nbsp;</td></tr></table>'}
if (someval=='1') {return '<table border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td style="text-align:center" bgcolor="green">&nbsp;</td></tr></table>'}
if (someval=='2') {return '<div style="position:relative;left:0px;top:0px;height:100%;width:100%;overflow:hidden"><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=bottom style="text-align:center;font-size:'+premiumtextsize+'px;color:gray;background-color:goldenrod"><b><sub>L</sub></b></td></tr></table><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=top style="text-align:center;font-size:'+premiumtextsize+'px;color:white">2</td></tr></table></div>'}
if (someval=='3') {return '<div style="position:relative;left:0px;top:0px;height:100%;width:100%;overflow:hidden"><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=bottom style="text-align:center;font-size:'+premiumtextsize+'px;color:gray;background-color:goldenrod"><b><sub>L</sub></b></td></tr></table><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=top style="text-align:center;font-size:'+premiumtextsize+'px;color:white">3</td></tr></table></div>'}
if (someval=='4') {return '<div style="position:relative;left:0px;top:0px;height:100%;width:100%;overflow:hidden"><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=bottom style="text-align:center;font-size:'+premiumtextsize+'px;color:gray;background-color:goldenrod"><b><sub>L</sub></b></td></tr></table><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=top style="text-align:center;font-size:'+premiumtextsize+'px;color:white">4</td></tr></table></div>'}
if (someval=='12') {return '<div style="position:relative;left:0px;top:0px;height:100%;width:100%;overflow:hidden"><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=top style="text-align:center;font-size:'+premiumtextsize+'px; color:#FF8888;background-color:cadetblue"><b><sup>W</sup></b></td></tr></table><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=bottom style="text-align:center;font-size:'+premiumtextsize+'px;font-weight:bold">2</td></tr></table></div>'}
if (someval=='13') {return '<div style="position:relative;left:0px;top:0px;height:100%;width:100%;overflow:hidden"><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=top style="text-align:center;font-size:'+premiumtextsize+'px; color:#FF8888;background-color:cadetblue"><b><sup>W</sup></b></td></tr></table><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=bottom style="text-align:center;font-size:'+premiumtextsize+'px;font-weight:bold">3</td></tr></table></div>'}
if (someval=='14') {return '<div style="position:relative;left:0px;top:0px;height:100%;width:100%;overflow:hidden"><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=top style="text-align:center;font-size:'+premiumtextsize+'px; color:#FF8888;background-color:cadetblue"><b><sup>W</sup></b></td></tr></table><table style="position:absolute;left:0px;top:0px" border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td valign=bottom style="text-align:center;font-size:'+premiumtextsize+'px;font-weight:bold">4</td></tr></table></div>'}
return
}

if (somecontent.slice(0,6)=='letter')
{
someval=somecontent.slice(6) 
return boardletterimage(someval*1)
}

}

</script>
<script language="Javascript">

var zoomsize=9
function boardletterimage(somenum)
{
var somecol='black'
if (somenum>=100) {somecol='gray'}
return '<table border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td style="text-align:center;background-color:lemonchiffon;font-weight:bold"><span style="font-size:'+celltextsize+'px;color:'+somecol+'">'+letterfromnum(somenum)+'</span></td></tr></table>'
}

function tempboardletterimage(somenum)
{
var somecol='black'
if (somenum>=100) {somecol='gray'}
return '<table border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td style="text-align:center;background-color:'+playercolours[gamestatus[1]]+';font-weight:bold"><span style="font-size:'+celltextsize+'px;color:'+somecol+'">'+letterfromnum(somenum)+'</span></td></tr></table>'
}


function displaytheboard(someview)
{
theview=someview

var somecellsize=Math.floor(scalef*229/gameboardsize) // 229 instead of 230 because of adding 1 for cell borders
var someborder=Math.floor(scalef*1)
var someboardbgsize=(somecellsize*gameboardsize)+someborder
var sometextsize=somecellsize-Math.floor(scalef*6)
cellsize=somecellsize-someborder
celltextsize=sometextsize
boardbgsize=someboardbgsize
if (zoom==0 || gameboardsize==11)
{
var sometable='<table border=0 width='+someboardbgsize+' cellpadding=0 cellspacing=0 align=center><tr><td>'
sometable=sometable+'<div id="maingrid" style="display:inline">'
sometable=sometable+'<div style="position:relative;left:0px;top:0px;width:'+someboardbgsize+'px;height:'+someboardbgsize+'px;background-color:black;">'
var someindex=0
var someclick
for (var i=0; i<gameboardsize; i++)
{
for (var j=0; j<gameboardsize; j++)
{
if (theview==0)
{
someclick='onClick="boardclick('+someindex+')"'
}
else
{
someclick=''
}
sometable=sometable+'<div style="position:absolute; left:'+((j*somecellsize)+someborder)+'px;top:'+((i*somecellsize)+someborder)+'px;width:'+cellsize+'px;height:'+cellsize+'px;background-color:black;font-size:'+sometextsize+'px;font-weight:bold" '+someclick+' id="cell'+someindex+'">'+cellimage(someindex, theview)+'</div>'
someindex++
}
}

sometable=sometable+'</div></div></td></tr></table>'
}
else // zoom==1 so show an MxM board with movement arrows
{

var someM=zoomsize
somecellsize=Math.floor(scalef*229/(someM+2)) // 229 instead of 230 because of adding 1 for cell borders
someborder=Math.floor(scalef*1)
someboardbgsize=(somecellsize*(someM+2))+someborder
sometextsize=somecellsize-Math.floor(scalef*6)
cellsize=somecellsize-someborder
celltextsize=sometextsize
boardbgsize=someboardbgsize
var sometable='<table border=0 width='+someboardbgsize+' cellpadding=0 cellspacing=0 align=center><tr><td>'
sometable=sometable+'<div id="maingrid" style="display:inline">'
sometable=sometable+'<div style="position:relative;left:0px;top:0px;width:'+someboardbgsize+'px;height:'+someboardbgsize+'px;background-color:purple;">'

sometable=sometable+'<div style="position:absolute;left:'+(somecellsize)+'px;top:'+(somecellsize)+'px;width:'+(someboardbgsize-2*somecellsize)+'px;height:'+(someboardbgsize-2*somecellsize)+'px;background-color:black;"><div id="touchzone" style="position:relative;overflow:hidden;width:'+(someboardbgsize-2*somecellsize)+'px;height:'+(someboardbgsize-2*somecellsize)+'px;background-color:black;">'
var someindex=0
var someclick
var somecentraldelta=(gameboardsize-zoomsize)/2
var somei0=(zoomdelta[0]-1)*somecentraldelta
var somej0=(zoomdelta[1]-1)*somecentraldelta
for (var i=0; i<gameboardsize; i++)
{
for (var j=0; j<gameboardsize; j++)
{
if (theview==0)
{
someclick='onClick="boardclick('+someindex+')"'
}
else
{
someclick=''
}
sometable=sometable+'<div style="position:absolute; left:'+((somej0*somecellsize)+(j*somecellsize)+someborder)+'px;top:'+((somei0*somecellsize)+(i*somecellsize)+someborder)+'px;width:'+cellsize+'px;height:'+cellsize+'px;background-color:black;font-size:'+sometextsize+'px;font-weight:bold" '+someclick+' id="cell'+someindex+'">'+cellimage(someindex, theview)+'</div>'
someindex++
}
}
var somearrows=''
if (zoomdelta[0]<1) somearrows=somearrows+'<img src="up.png" style="position:absolute;left:'+(somecellsize*Math.floor((someM+2)/2)+someborder)+'px;top:'+someborder+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([1, 0])">'
if (zoomdelta[0]>-1) somearrows=somearrows+'<img src="down.png" style="position:absolute;left:'+(somecellsize*Math.floor((someM+2)/2)+someborder)+'px;top:'+(someborder+(somecellsize*(someM+1)))+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([-1, 0])">'
if (zoomdelta[1]<1) somearrows=somearrows+'<img src="left.png" style="position:absolute;top:'+(somecellsize*Math.floor((someM+2)/2)+someborder)+'px;left:'+someborder+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([0, 1])">'
if (zoomdelta[1]>-1) somearrows=somearrows+'<img src="right.png" style="position:absolute;top:'+(somecellsize*Math.floor((someM+2)/2)+someborder)+'px;left:'+(someborder+(somecellsize*(someM+1)))+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([0, -1])">'

if (zoomdelta[0]<1 && zoomdelta[1]<1) somearrows=somearrows+'<img src="upleft.png" style="position:absolute;left:'+someborder+'px;top:'+someborder+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([1, 1])">'
if (zoomdelta[0]<1 && zoomdelta[1]>-1) somearrows=somearrows+'<img src="upright.png" style="position:absolute;left:'+(someborder+(somecellsize*(someM+1)))+'px;top:'+someborder+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([1, -1])">'
if (zoomdelta[0]>-1 && zoomdelta[1]<1) somearrows=somearrows+'<img src="downleft.png" style="position:absolute;left:'+someborder+'px;top:'+(someborder+(somecellsize*(someM+1)))+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([-1, 1])">'
if (zoomdelta[0]>-1 && zoomdelta[1]>-1) somearrows=somearrows+'<img src="downright.png" style="position:absolute;left:'+(someborder+(somecellsize*(someM+1)))+'px;top:'+(someborder+(somecellsize*(someM+1)))+'px;height:'+cellsize+'px;width:'+cellsize+'px" onClick="shift([-1, -1])">'


sometable=sometable+'</div></div>'+somearrows+'</div></div></td></tr></table>'
}
// reset global variables cellsize, celltextsize. boardbgsize back to normal (non-zoom), otherwise layout affected
somecellsize=Math.floor(scalef*229/gameboardsize) // 229 instead of 230 because of adding 1 for cell borders
someborder=Math.floor(scalef*1)
someboardbgsize=(somecellsize*gameboardsize)+someborder
sometextsize=somecellsize-Math.floor(scalef*6)
cellsize=somecellsize-someborder
celltextsize=sometextsize
boardbgsize=someboardbgsize
changetextvalue('theboard', sometable)
if ("ontouchstart" in window)
{dealwithtouchevents()}
/*
if (zoom==0 || gameboardsize==11)
{}
else
{
if ("ontouchstart" in window)
{dealwithtouchevents()}
}
*/
}

// code only for touch control of main board - zoomed and normal
var thetouchstart
var thetouches
function dealwithtouchevents()
{
var someindex=0
var sometouchzone
thetouchstart=[]
thetouches=0
for (var i=0; i<gameboardsize; i++)
{
for (var j=0; j<gameboardsize; j++)
{
sometouchzone=document.getElementById("cell"+someindex);
sometouchzone.addEventListener("touchstart", starttouch, false);
sometouchzone.addEventListener("touchend", endtouch, false);
sometouchzone.addEventListener("touchmove", movetouch, false);
someindex++
}
}
}

function starttouch(event)
{

event.preventDefault();
var somefingers=event.touches.length

var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
thetouchstart=[somey, somex, event.currentTarget.id]
thetouches=somefingers
}

function movetouch(event)
{

event.preventDefault();
if (thetouches==1)
{
var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
thetouchstart=[thetouchstart[0], thetouchstart[1], thetouchstart[2], somey, somex]
}
}

function endtouch(event)
{
event.preventDefault();
if (event.touches.length==0)
{
if (thetouches==1)
{
if (thetouchstart.length==3) // a tap not a slide
{
if (theview==0)
{
boardclick(1*thetouchstart[2].slice(4))
}
}
else // a slide
{
var somediffy=thetouchstart[3]-thetouchstart[0]
var somediffx=thetouchstart[4]-thetouchstart[1]
if (Math.abs(somediffy)<3*scalef && Math.abs(somediffx)<3*scalef) // if very small move treat as tap
{
if (theview==0)
{
boardclick(1*thetouchstart[2].slice(4))
}
}
else
{
// slide only when zoomed
if (zoom==1)
{
if (Math.abs(somediffy)>2*Math.abs(somediffx)) {somediffx=0}
if (Math.abs(somediffx)>2*Math.abs(somediffy)) {somediffy=0}
if (somediffy>0) {somediffy=1}
if (somediffy<0) {somediffy=-1}
if (somediffx>0) {somediffx=1}
if (somediffx<0) {somediffx=-1}
shift([somediffy, somediffx])
}
}
}
thetouchstart=[]
thetouches=0
}
if (thetouches>1) // multi-finger so toggle zoom
{
togglezoom()
}
}
}

// end code for touch slide of zoomed area

// code for touch-based rack control
var theracktouchstart
var theracktouches
function setuprackhandlers()
{
if ("ontouchstart" in window)
{
var sometouchzone
theracktouchstart=[]
theracktouches=0

for (var i=0; i<rackimagehandlerlist; i++)
{
sometouchzone=document.getElementById("racktilecell"+i);
sometouchzone.addEventListener("touchstart", startracktouch, false);
sometouchzone.addEventListener("touchend", endracktouch, false);
sometouchzone.addEventListener("touchmove", moveracktouch, false);
}
}
}

function startracktouch(event)
{

event.preventDefault();
var somefingers=event.touches.length

var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
theracktouchstart=[somey, somex, event.currentTarget.id]
theracktouches=somefingers
}

function moveracktouch(event)
{

event.preventDefault();
if (theracktouches==1)
{
var somey=event.touches[0].pageY
var somex=event.touches[0].pageX
theracktouchstart=[theracktouchstart[0], theracktouchstart[1], theracktouchstart[2], somey, somex]
}
}

function endracktouch(event)
{
event.preventDefault();
if (event.touches.length==0)
{
if (theracktouches==1)
{
if (theracktouchstart.length==3) // a tap not a slide
{
racktile(1*theracktouchstart[2].slice(12))
}
else // a slide
{
var somediffy=theracktouchstart[3]-theracktouchstart[0]
var somediffx=theracktouchstart[4]-theracktouchstart[1]
if (Math.abs(somediffy)<3*scalef && Math.abs(somediffx)<3*scalef) // if very small move treat as tap
{
racktile(1*theracktouchstart[2].slice(12))
}
else
{
handlerackslide(event)
}
}
theracktouchstart=[]
theracktouches=0
}
}
}

function handlerackslide(event)
{
var sometarget=event.currentTarget
var sometargettilenum=sometarget.id.slice(12)*1
var sometargetleft=sometarget.getBoundingClientRect().left;
var someinsertleft=theracktouchstart[4]
var someinserttop=theracktouchstart[3]
var somerack=document.getElementById('therack')
var someracktop=somerack.getBoundingClientRect().top;
var somerackbottom=somerack.getBoundingClientRect().bottom;

if (someinserttop>somerackbottom)
{
return
}
if (someinserttop<someracktop)
{
var someboard=document.getElementById('theboard')
var someboardbottom=someboard.getBoundingClientRect().bottom;
if (someinserttop<someboardbottom)
{
myalert('<table cellpadding=2 border=0><tr><td align=left>Tiles are placed on the board as a group, not individually.<br><br>Order the tiles you wish to lay, then move the arrow &lt;&lt; immediately to the right of these, then tap the square that will contain the first of the letters.<br><br>For example, if your rack shows &lt;&lt;YOTDG?I and you wish to lay letters DOG, re-arrange the rack so that it begins with DOG&lt;&lt;, then press the cell on which the D is to be laid, which will then turn white.  You will then need to press the Right or Down button.  Press Help for more details.</td></tr></table>')
}
return
}
var someracktilesleft=sometargetleft-sometargettilenum*Math.floor(scalef*20)
var somehalftileleft=someracktilesleft+Math.floor(scalef*10)
var someinsertindex=gamenumtiles+1 // default to cover moving too far right

for (var i=0; i<gamenumtiles+2; i++)
{
if (someinsertleft<=somehalftileleft+(i+1)*Math.floor(scalef*20))
{
someinsertindex=i;
break
}
}
if (sometargettilenum>0 && tileselected==-1)
{

tileselected=sometargettilenum
racktile(someinsertindex)

}


}

// end of code for touch-based rack control


var countdowntimer
function setcountdowntime(sometime)
{
gametimeleft=sometime
SetLocalVal('gametimeleft', gametimeleft)
var mintext=''
var somemins=Math.floor(gametimeleft/60)
var somesecs=gametimeleft-(somemins*60)
var someadd=''
if (somesecs<10) {someadd='0'}
mintext=somemins+':'+someadd+somesecs
changetextvalue('countdown', mintext)
}

function handlecountdown()
{
setcountdowntime(gametimeleft-1)

if (gametimeleft>0)
{
clearTimeout(countdowntimer)
countdowntimer = setTimeout("handlecountdown()",1000)
}
else
{
gamestatus=gamestatus.slice(0,3)
gamestatus[2]=6

SetLocalVal('gamestatus', gamestatus)
dealwithpasses(0)
var somescoretext='<tr style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'"><td style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'">'+textinitialsfor(gamestatus[1])+'</td><td align=center>Ran out of time</td><td align=center>0</td><td align=center>'+GetLocalVal('score'+gamestatus[1])+'</td></tr>'
SetLocalVal('gamerecord', GetLocalVal('gamerecord')+somescoretext)

myalert('Time limit reached - move lost!')
}
}

var resetadbreakcounter=7
var adbreakcounter
function dealwithadbreak()
{
/*
if (adsrequired==1)
{
adbreakcounter=GetLocalVal('adbreakcounter')*1
adbreakcounter--
if (adbreakcounter<=0)
{
showadbreak()
}
else
{
SetLocalVal('adbreakcounter', adbreakcounter)
continuegame()
}
}
else
{
continuegame()
}
*/
continuegame()
}




var textscore
var potentialscore
function continuegame()
{
// reset some variables
if (lettertimer!=null) {clearTimeout(lettertimer)}
lettertimer=null
myalerton=0

changetextvalue('countdown', '&nbsp;')
if (GetLocalVal('gamestatus')==null) {SetLocalVal('gamestatus', [0])}
gamestatus=GetLocalList('gamestatus')
changetextvalue('statusdisplay', gamestatus)
if (gamestatus[0]==0) 
{
if (gamestatus.length==1)
{
if (countdowntimer != null) {clearTimeout(countdowntimer)}
changetextvalue('bagnum', '&nbsp;')
showintro() 


return
}
else
{
defineuserinitials()
}
}
if (GetLocalVal('gamepasses')*1==gamenumplayers) // if all players have now passed
{
gamestatus[2]=7
SetLocalVal('gamestatus', gamestatus)
SetLocalVal('gamepasses', 0)
myalert('All players have now passed, so game ends')
return
}
if (gamestatus[0]==1) 
{
theview=0

gamename=GetLocalList('gamename')
gamenametext=namegame(gamename)
gameletters=GetLocalList('gameletters')
gamewilds=GetLocalVal('gamewilds')*1
gamenumtiles=GetLocalVal('gamenumtiles')*1
gamealllettersbonus=GetLocalVal('gamealllettersbonus')*1
gameendactions=GetLocalVal('gameendactions')*1
gamenumplayers=GetLocalVal('gamenumplayers')*1
gameboardsize=GetLocalVal('gameboardsize')*1
gameboard=GetLocalList('gameboard')
gameboardletters=GetLocalList('gameboardletters')
tempgameboardletters=GetLocalList('gameboardletters')
gamebag=GetLocalList('gamebag')
gamevalues=GetLocalList('gamevalues')
gameinitials=GetLocalList('gameinitials')
gameusetimer=GetLocalVal('gameusetimer')*1
gametimelimit=GetLocalVal('gametimelimit')*1
gametimeleft=GetLocalVal('gametimeleft')*1





rack0=GetLocalList('rack0')
rack1=GetLocalList('rack1')
rack2=GetLocalList('rack2')
rack3=GetLocalList('rack3')
score0=GetLocalVal('score0')*1
score1=GetLocalVal('score1')*1
score2=GetLocalVal('score2')*1
score3=GetLocalVal('score3')*1

racks=[rack0, rack1, rack2, rack3]
scores=[score0, score1, score2, score3]

for (var i=0; i<gamenumplayers; i++)
{

changetextvalue('score'+i, '<table cellpadding=0 cellspacing=0 border=0 width=100%><tr><td align=center width=50%><b>'+textinitialsfor(i)+'</b></td><td align=center width=50%><b>'+scores[i]+'</b></td></tr></table>')
changebgcolor('score'+i, playercolours[i])
}                

changetextvalue('bagnum', gamebag.length)

changetextvalue('banner', 'Xword<sup>4x4</sup> '+gamenametext)

if (gamestatus[2]==0 && gameusetimer==1) {displaytheboard(2)} else {displaytheboard(0)}

var sometext=''
if (gamestatus[2]==0)
{
sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="showtilesinitially()">'+graphicfor('Tiles')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">'+textinitialsfor(gamestatus[1])+'\'s go.<br>Press Tiles to see tiles.</td><td width='+Math.floor(scalef*50)+' onClick="showtilesinitially()">'+graphicfor('Tiles')+'</td></tr></table>'
sometext=sometext+currentadtext()

changetextvalue('output', sometext)

}

if (gamestatus[2]==1)
{
sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="swaptiles()">'+graphicfor('Swap')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">Put &lt;&lt; to right of ordered tiles & tap start square or Swap/Pass.</td><td width='+Math.floor(scalef*50)+' onClick="passgo()">'+graphicfor('Pass')+'</td></tr></table>'
sometext=sometext+'<div id="therack">'+rackimage(gamestatus[1], 0)+'</div>'
changetextvalue('output', sometext)
tileselected=-1
setuprackhandlers()
}
/* no longer use status = 2 - tile movements now all part of status=1
if (gamestatus[2]==2)
{
sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="swaptiles()">'+graphicfor('Swap')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">Tile selected for moving.<br>Now tap destination in rack.</td><td width='+Math.floor(scalef*50)+' onClick="passgo()">'+graphicfor('Pass')+'</td></tr></table>'
sometext=sometext+'<div id="therack">'+rackimage(gamestatus[1], 1)+'</div>'
changetextvalue('output', sometext)

changetextvalue('tilemarker'+gamestatus[3], '<table border=0 bgcolor=white width=100% height='+Math.floor(scalef*2)+'><tr><td></td></tr></table>')
}
*/
if (gamestatus[2]==3)
{
tileselected=-1
sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="placeletters(0)">'+graphicfor('Down')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">Press Right or Down to place tiles that are left of &lt;&lt;. </td><td width='+Math.floor(scalef*50)+' onClick="placeletters(1)">'+graphicfor('Right')+'</td></tr></table>'
sometext=sometext+'<div id="therack">'+rackimage(gamestatus[1], 0)+'</div>'
changetextvalue('output', sometext)
changetextvalue('cell'+gamestatus[3], '<div style="width:100%;height:100%;background-color:white"></div>')
setuprackhandlers()

}


if (gamestatus[2]==4 || gamestatus[2]==5)
{
if (gamestatus[2]==4)
{
sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="userhappy(0)">'+graphicfor('Back')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">Press OK if happy<br>Press Back to withdraw</td><td width='+Math.floor(scalef*50)+' onClick="userhappy(1)">'+graphicfor('OK')+'</td></tr></table>'
}
else
{
sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="acceptword(0)">'+graphicfor('Reject')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">Players should agree whether to Accept or Reject the words</td><td width='+Math.floor(scalef*50)+' onClick="acceptword(1)">'+graphicfor('Accept')+'</td></tr></table>'
}

var somerack=racks[gamestatus[1]]
var sometiles=chosentiles(somerack)
var somestart=gamestatus[3]
var somedirection=gamestatus[4]
var someblankmappings=gamestatus.slice(5)
var somenewtiles=[]
var somemap
for (var i=0; i<sometiles.length; i++)
{
if (sometiles[i]==26) // ?
{
somemap=someblankmappings[0]
someblankmappings=someblankmappings.slice(1)
somenewtiles[i]=100+(gamewilds*100)+somemap
}
else
{
somenewtiles[i]=sometiles[i]
}
}
var someplacements=cellsforplacement(somestart, somenewtiles, somedirection)
var someimage

// add the temporary letter placements to gameboardletters and to gameboard view so that they can be clicked
var someM=zoomsize
var somecellsize=Math.floor(scalef*229/(someM+2)) // 229 instead of 230 because of adding 1 for cell borders
var someborder=Math.floor(scalef*1)
var someboardbgsize=(somecellsize*(someM+2))+someborder
var sometextsize=somecellsize-Math.floor(scalef*6)

if (zoom==1)
{
cellsize=somecellsize-someborder
celltextsize=sometextsize
boardbgsize=someboardbgsize
}
for (var i=0; i<someplacements.length; i++)
{
tempgameboardletters[someplacements[i]]=somenewtiles[i]
changetextvalue('cell'+someplacements[i], tempboardletterimage(somenewtiles[i]))
}

var somescore=evaluatescores(someplacements, somenewtiles, somedirection)
textscore=[somescore[0], somescore[1]]
potentialscore=somescore[0]
changetextvalue('output', sometext+'<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div>'+'<div style="height:'+Math.floor(scalef*2)+'px"></div><table align=center border=1 width=75% bgcolor='+playercolours[gamestatus[1]]+'><tr><td align=center><b>Score: '+somescore[0]+'</b><br>'+somescore[1]+'</td></tr></table>')
somecellsize=Math.floor(scalef*229/gameboardsize) // 229 instead of 230 because of adding 1 for cell borders
someborder=Math.floor(scalef*1)
someboardbgsize=(somecellsize*gameboardsize)+someborder
sometextsize=somecellsize-Math.floor(scalef*6)
cellsize=somecellsize-someborder
celltextsize=sometextsize
boardbgsize=someboardbgsize

 

}

if (gamestatus[2]==6)
{
var somenextplayer=gamestatus[1]+1
if (somenextplayer==gamenumplayers) {somenextplayer=0}

sometext='<div style="width:100%;height:'+Math.floor(scalef*2)+'"></div><table width='+(1+gameboardsize*(cellsize+1))+' border=0 cellspacing=0 cellpadding=0 align=center><tr><td width='+Math.floor(scalef*50)+' onClick="hiderackatend('+somenextplayer+')">'+graphicfor('Hide')+'</td><td id=\'feedback\' align=center bgcolor='+playercolours[gamestatus[1]]+' height='+Math.floor(scalef*25)+' style="font-size:'+Math.floor(scalef*8)+'px">Press Hide when ready and pass to the next player: <span style="background-color:'+playercolours[somenextplayer]+'">&nbsp;'+textinitialsfor(somenextplayer)+'&nbsp;</span></td><td width='+Math.floor(scalef*50)+' onClick="hiderackatend('+somenextplayer+')">'+graphicfor('Hide')+'</td></tr></table>'
sometext=sometext+'<div id="therack">'+rackimage(gamestatus[1], 0)+'</div>'
changetextvalue('output', sometext)
setuprackhandlers()

}

if (gamestatus[2]==7)
{
var remainders=[]
var lastrack
var someremscore
var somenumtilesleft=[]
var someremtilestext=[]
var sometiletext
for (var i=0; i<gamenumplayers; i++)
{
lastrack=racks[i]
someremscore=0
sometiletext=[]
for (var j=0; j<lastrack.length; j++)
{
if (lastrack[j]>=0 && lastrack[j]<26)
{
someremscore=someremscore+gamevalues[lastrack[j]]
}
if (lastrack[j]>=0)
{
sometiletext[j]=letterfromnum(lastrack[j])
}
}
remainders[i]=someremscore
somenumtilesleft[i]=lastrack.length-1 // ignore separator
someremtilestext[i]=sometiletext
}

var sometotaladdbonus=0
for (var i=0; i<remainders.length; i++)
{
sometotaladdbonus=sometotaladdbonus+remainders[i]
}
var someaddbonuslist=[]
for (var i=0; i<somenumtilesleft.length; i++)
{
if (somenumtilesleft[i]==0)
{someaddbonuslist[i]=sometotaladdbonus}
else
{someaddbonuslist[i]=0}
}

var somerealfinalscores=[]
var somerealfinalscore
for (var i=0; i<gamenumplayers; i++)
{
somerealfinalscore=scores[i]
if (gameendactions>0) 
{
somerealfinalscore=somerealfinalscore-remainders[i]
}
if (gameendactions==1)
{
somerealfinalscore=somerealfinalscore+someaddbonuslist[i]
}
somerealfinalscores[i]=somerealfinalscore
}

sometext='<table border=0 align=center style="font-size:'+Math.floor(scalef*8)+'px"><tr><td>Player</td>'
for (var i=0; i<gamenumplayers; i++)
{
sometext=sometext+'<td align=center width='+Math.floor(scalef*40)+' bgcolor='+playercolours[i]+'>'+textinitialsfor(i)+'</td>'
}
sometext=sometext+'</tr><tr><td>Play score</td>'
for (var i=0; i<gamenumplayers; i++)
{
sometext=sometext+'<td align=center >'+scores[i]+'</td>'
}
sometext=sometext+'</tr>'

sometext=sometext+'<tr><td>Tiles left</td>'
for (var i=0; i<gamenumplayers; i++)
{
sometext=sometext+'<td align=center >'+somenumtilesleft[i]+'</td>'
}
sometext=sometext+'</tr>'

if (gameendactions>0)
{ 
sometext=sometext+'<tr><td>Deductions</td>'
for (var i=0; i<gamenumplayers; i++)
{
sometext=sometext+'<td align=center >'+remainders[i]+'</td>'
}
sometext=sometext+'</tr>'

if (gameendactions==1)
{
sometext=sometext+'<tr><td>End Bonus</td>'
for (var i=0; i<gamenumplayers; i++)
{
sometext=sometext+'<td align=center >'+someaddbonuslist[i]+'</td>'
}
sometext=sometext+'</tr>'

}

}

sometext=sometext+'<tr><td>Final score</td>'
for (var i=0; i<gamenumplayers; i++)
{
sometext=sometext+'<td align=center ><b>'+somerealfinalscores[i]+'</b></td>'
}
sometext=sometext+'</tr></table>'

for (var i=0; i<gamenumplayers; i++)
{
changetextvalue('score'+i, somerealfinalscores[i])
}
changetextvalue('output', sometext)


}


if (gameusetimer==1 && member(gamestatus[2], [1, 2, 3, 4])==true)
{
setcountdowntime(gametimeleft)
if (gametimeleft>0)
{
countdowntimer = setTimeout("handlecountdown()",1000)
}
}
else
{
if (countdowntimer != null) {clearTimeout(countdowntimer)}

}

}
}

function openwebpage(someurl)
{
document.location.href=someurl
}

var displayadnum=0
var displayhelptexts=
[
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'market://search?q=pub:TopAccolades\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="xword4x4icon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Press Help for context-sensitive help.<br>To change board layout, letter values and numbers, & more, press New then Design.</td></tr></table>',
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'market://search?q=pub:TopAccolades\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="xword4x4icon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*9)+'px"><span style="font-weight:bold">TopAccolades</span><br>Apps and web services</td></tr></table>',
'<table width=100% border=0 bgcolor="lightblue" onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> i.compactfun.com</b><br>This app and other apps are also accessible online from many devices at i.compactfun.com</td></tr></table>'

]

var displayadtexts=displayhelptexts

var displayupgradetexts=
[
]

var displayapptexts=
[
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="rummyicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Rummy 7 -  Try the app now!</b><br>Play 7-card Rummy against the system or another player.  Full animation.</td></tr></table>',
'<table width=100% border=0 bgcolor="#FF8888" onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="csisherlock144.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>CSI Sherlock -  Try the app now!</b><br>Vic has been killed.  Try to solve who killed Vic, with what, and where, in this great interactive logic puzzle.</td></tr></table>',
'<table width=100% border=0 bgcolor=cyan onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="kublitzcubeicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Kublitz Cube -  Download the app now!</b><br>Separated cubelets let you see/know all sides without turning the puzzle cube.  Guide, tools & notation to help you solve it</td></tr></table>',
'<table width=100% border=0 bgcolor=limegreen onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*40)+'"><img src="pegsolitaireicon.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Peg Solitaire -  Download the app now!</b><br>Play the full puzzle or a cut-down version.  Guide and notation to help you solve and remember the full puzzle</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>31 classic/original games and puzzles in one app: words, numbers, logic, blocks, strategy...</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Rummy, 4-in-a-line, Pentad, Letters & Numbers Games, Turncoat and Yak</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Hangman, WordSearch, Pentad, Linkword Snap and Word Ladder</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Step Challenge, Pyramid Numbers, Sudoku and Numberskull </td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Sudoku, Memory Pairs, Master Code, Mystery Clues and Bidinca </td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="compactfuniconlarge.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Compact Fun -  Try the app now!</b><br>Includes Peg Solitaire, Towers of Hanoi, Poker Pentad, Mancala and Code 4x6 </td></tr></table>',
'<table width=100% border=0 bgcolor=cyan onClick="openwebpage(\'http://i.compactfun.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="bbflogo.png" align=center valign=middle  width="'+Math.floor(scalef*36)+'"  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>BrainBoxFun -  Try the app now!</b><br>10 brain-training exercises inc.: memory, verbal comprehension, pattern recognition, word power and mental arithmetic</td></tr></table>'


]

var displaywmltexts=
[
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Dedicate one of our many personal home pages to someone you love for a Birthday, Anniversary, Valentine\'s, Mother\'s Day or Father\'s Day.</td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Our personal web site addresses come in two parts:<br><b><span style="color:#FF0000">Defined by you</span>.<span style="color:green">Supplied by us</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>The parts we supply include:<br><b><span style="color:green">in-the.land</span><br><span style="color:green">in-the-whole.world</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>With these ones you supply an OPINION or maybe a NAME plus an OPINION</td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Full examples: <b><span style="color:#FF0000">best-wife</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">sexiest-lover</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-husband</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">greatest</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>More examples: <b><span style="color:#FF0000">best-mom</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-dad</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">best-daughter</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">sexiest</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>More examples: <b><span style="color:#FF0000">best-lover</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">joe-best-husband</span>.<span style="color:green">in-the-whole.world</span><br><span style="color:#FF0000">raj-best-son</span>.<span style="color:green">in-the.land</span>, <span style="color:#FF0000">top-dad</span>.<span style="color:green">in-the.land</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Other parts we supply are:<br><b><span style="color:green">best-in-the.world</span>, <span style="color:green">the-world-to.me</span><br><span style="color:green">supremely.sexy</span>, <span style="color:green">just-so.sexy</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br>Full examples: <b><span style="color:#FF0000">tim-wild</span>.<span style="color:green">best-in-the.world</span><br><span style="color:#FF0000">emma</span>.<span style="color:green">supremely.sexy</span>, <span style="color:#FF0000">george</span>.<span style="color:green">just-so.sexy</span><br><span style="color:#FF0000">lola</span>.<span style="color:green">the-world-to.me</span></b></td></tr></table>',
'<table width=100% border=0 bgcolor="#FFCCCC" onClick="openwebpage(\'http://www.with-my-love.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="wmllogo.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b> With-my-love.com</b><br><span style="color:purple"><b>Imagine your loved one\'s thrill at seeing such a home page dedicated to them on the special day!</b></span></td></tr></table>'
]

var displayllatexts=
[
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="A_1_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px"><b>Letter Lookalikes</b><br>Photos resembling letters, numbers and symbols</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="E_1_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Frames for names and wishes for birthdays, anniversaries, Valentine\'s Day, Mother\'s Day, etc.</td></tr></table>',
'<table width=100% border=0 bgcolor=lightblue onClick="openwebpage(\'http://www.letterlookalikes.com/\')"><tr><td align=center valign=middle  width="'+Math.floor(scalef*36)+'"><img src="H_5_colour.jpg" align=center valign=middle  height="'+Math.floor(scalef*36)+'"></td><td style="text-align:center;font-size:'+Math.floor(scalef*8)+'px">Pictures that say 1000s of words<br><b>www.letterlookalikes.com</b></td></tr></table>'
]


if (adsrequired==1)
{
displayadtexts=
displayhelptexts.concat(displayupgradetexts).concat(displaywmltexts).concat(displayllatexts).concat(displayapptexts)
}
else
{
displayadtexts=displayhelptexts
}



function increaseadnum()
{
displayadnum++
if (displayadnum>=displayadtexts.length) {displayadnum=0}
}

function showcountdownad()
{
changetextvalue('countdownadtext', currentadtext())

}

function currentadtext()
{
var sometext='<div style="width:100%;height:'+Math.floor(scalef*3)+'px"></div><table width=100% border=0 align=center bgcolor=silver><tr><td align=center>'+displayadtexts[displayadnum]+'</td></tr></table>'
increaseadnum()
return sometext
}



function passgo()
{
var sometext='Please confirm that you wish to pass.'
if (GetLocalVal('gamepasses')*1==gamenumplayers-1) // if all players but one have now passed
{
sometext=sometext+'<br><br><span style="color:red">Warning!</span><br><br>If you do pass, this will end the game as all players will then have passed consecutively.  If you wish to miss your go but not end the game, press Cancel, then place any word but Reject it.'
}
mydecision(sometext, 'contpassgo()', 'backpassgo()')

}

function contpassgo()
{
gamestatus[2]=6
gamestatus=gamestatus.slice(0,3)
SetLocalVal('gamestatus', gamestatus)
dealwithpasses(1)
var somescoretext='<tr style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'"><td style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'">'+textinitialsfor(gamestatus[1])+'</td><td align=center>Passed</td><td align=center>0</td><td align=center>'+GetLocalVal('score'+gamestatus[1])+'</td></tr>'
SetLocalVal('gamerecord', GetLocalVal('gamerecord')+somescoretext)

if (countdowntimer != null) {clearTimeout(countdowntimer)}

continuegame()
}

function backpassgo()
{
gamestatus[2]=1
gamestatus=gamestatus.slice(0,3)
SetLocalVal('gamestatus', gamestatus)
continuegame()
}

function mydecision(somemessage, someok, somecancel)
{

changetextvalue('output', '')
changetextvalue('theboard', '<br><br><table width=80% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0 align=center bgcolor=white><tr><td><table width=100% border=0><tr><td  colspan=2 bgcolor=lemonchiffon align=center height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'><td colspan=2></td></tr><tr><td  onClick="'+somecancel+'" align=center>'+graphicfor('Cancel')+'</td><td onClick="'+someok+'" align=center>'+graphicfor('OK')+'</td></tr></table></td></tr></table>')

}

function swaptiles()
{
var somerack=racks[gamestatus[1]]
var sometiles=chosentiles(somerack)
if (sometiles.length==0)
{
myalert('You have not selected any tiles to swap.  Move the &lt;&lt; separator to the right of the tiles to be swapped.')
return
}
var someletters=[]
for (var i=0; i<sometiles.length; i++)
{
someletters[i]=letterfromnum(sometiles[i])
}
var somename='tiles'
if (sometiles.length==1) {somename='tile'}
mydecision('Please confirm that you wish to swap the '+sometiles.length+' '+somename+' to the left of the &lt;&lt;<br>'+someletters+'<br><br>Play then passes to the next player', 'contswaptiles()', 'backswaptiles()')
}

function contswaptiles()
{
var somerack=racks[gamestatus[1]]
var sometiles=chosentiles(somerack)
if (sometiles.length>gamebag.length)
{
myalert('Sorry! Only '+gamebag.length+' tiles left to draw and you have specified '+sometiles.length)
return
}
gamebag=shufflearray(gamebag) // first shuffle the gamebag
var somenew=gamebag.slice(0, sometiles.length)
gamebag=shufflearray(gamebag.slice(sometiles.length).concat(sometiles))
var somenewrack=somerack.slice(sometiles.length).concat(somenew)
SetLocalVal('rack'+gamestatus[1], somenewrack)
SetLocalVal('gamebag', gamebag)
gamestatus[2]=6
gamestatus=gamestatus.slice(0,3)
SetLocalVal('gamestatus', gamestatus)
var somescoretext='<tr style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'"><td style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'">'+textinitialsfor(gamestatus[1])+'</td><td align=center>Swapped '+sometiles.length+'</td><td align=center>0</td><td align=center>'+GetLocalVal('score'+gamestatus[1])+'</td></tr>'

SetLocalVal('gamerecord', GetLocalVal('gamerecord')+somescoretext)

dealwithpasses(0)
if (countdowntimer != null) {clearTimeout(countdowntimer)}


continuegame()

}

function backswaptiles()
{
gamestatus[2]=1
gamestatus=gamestatus.slice(0,3)
SetLocalVal('gamestatus', gamestatus)
continuegame()
}

function hiderackatend(somenextplayer)
{
changetextvalue('squaredetails', '')
gamestatus=[1,somenextplayer, 0]
SetLocalVal('gamestatus', gamestatus)
dealwithadbreak()

}

function userhappy(somenum)
{
if (somenum==0)
{
gamestatus=gamestatus.slice(0,4)
gamestatus[2]=3
}
else
{
gamestatus[2]=5
if (countdowntimer != null) {clearTimeout(countdowntimer)}

setcountdowntime(0)
}
SetLocalVal('gamestatus', gamestatus)

continuegame()
}

function acceptword(somenum)
{
if (somenum==1)
{
var somerack=racks[gamestatus[1]]
var sometiles=chosentiles(somerack)
SetLocalVal('rack'+gamestatus[1], somerack.slice(sometiles.length))
var somestart=gamestatus[3]
var somedirection=gamestatus[4]
var someblankmappings=gamestatus.slice(5)
var somenewtiles=[]
var somemap
for (var i=0; i<sometiles.length; i++)
{
if (sometiles[i]==26) // ?
{
somemap=someblankmappings[0]
someblankmappings=someblankmappings.slice(1)
somenewtiles[i]=100+(gamewilds*100)+somemap
}
else
{
somenewtiles[i]=sometiles[i]
}
}
var someplacements=cellsforplacement(somestart, somenewtiles, somedirection)
for (var i=0; i<someplacements.length; i++)
{
gameboardletters[someplacements[i]]=somenewtiles[i]
}
SetLocalVal('gameboardletters', gameboardletters)
gamestatus=gamestatus.slice(0,3)
SetLocalVal('score'+gamestatus[1], scores[gamestatus[1]]+potentialscore)
gamestatus[2]=6

var somescoretext='<tr style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'"><td style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'">'+textinitialsfor(gamestatus[1])+'</td><td align=center>'+textscore[1]+'</td><td align=center>'+textscore[0]+'</td><td align=center>'+GetLocalVal('score'+gamestatus[1])+'</td></tr>'

SetLocalVal('gamerecord', GetLocalVal('gamerecord')+somescoretext)
var somenewtilesrequired=someplacements.length
if (gamebag.length==0 && (somerack.length-somenewtilesrequired)==1) // game over when no real tiles left
{
gamestatus[2]=7
}
else
{
if (somenewtilesrequired>gamebag.length)
{
somenewtilesrequired=gamebag.length
}
addtilestorack(gamestatus[1], somenewtilesrequired)
}
}
else // rejected
{
gamestatus=gamestatus.slice(0,3)
gamestatus[2]=6
var somescoretext='<tr style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'"><td style="text-align:center;background-color:'+playercolours[gamestatus[1]]+'">'+textinitialsfor(gamestatus[1])+'</td><td align=center>Rejected</td><td align=center>0</td><td align=center>'+GetLocalVal('score'+gamestatus[1])+'</td></tr>'
SetLocalVal('gamerecord', GetLocalVal('gamerecord')+somescoretext)

}
SetLocalVal('gamestatus', gamestatus)
dealwithpasses(0)

continuegame()
}

var boardbgsize
/*
*/
var directionplaced
function placeletters(sometype)
{
blankmappings=[]
directionplaced=sometype
placeletterscont(sometype)
}

function cellsforplacement(somestart, sometiles, sometype)
{
var someindex
var somearray
if (sometype==1) // place rightwards
{
var somecells=[]
someindex=somestart
for (var i=0; i<gameboardsize; i++)
{
somecells=somecells.concat([someindex])
someindex++
if (Math.floor(someindex/gameboardsize)==someindex/gameboardsize)
{break}
}
}
if (sometype==0) // place downwards
{
var somecells=[]
someindex=somestart
for (var i=0; i<gameboardsize; i++)
{
somecells=somecells.concat([someindex])
someindex=someindex+gameboardsize

if (someindex>=gameboardsize*gameboardsize)
{break}
}
}
// somecells is a list of all relevant cells to right or below selected square as appropriate
var somecellplaces=[]
for (var i=0; i<somecells.length; i++)
{
if (gameboardletters[somecells[i]]==-1) // find all empty cells
{
if (gameboard[somecells[i]]==0) // black square so must stop here
{
break
}
somecellplaces=somecellplaces.concat([somecells[i]])
}
}
// now have all empty squares up to but not including first black square

if (somecellplaces.length<sometiles.length) {myalert('Invalid placement!<br><br>Not enough valid empty squares: '+sometiles.length+' required but only '+somecellplaces.length+' available.');return}

var somecellplaces=somecellplaces.slice(0, sometiles.length)
// somecellplaces now the actual cells on which the letters will be placed
return somecellplaces

}

function wordsfromtilesplaced(somecellplaces, sometype)
{
// need to check for letters before and after line of letters (or between) and all adjacent ones in other direction
var somewordindirection=wordindirection(sometype, somecellplaces)
var somewordsinotherdirection=[]
for (var i=0; i<somecellplaces.length; i++)
{
somewordsinotherdirection[i]=wordindirection(1-sometype, [somecellplaces[i]])
}
var someallwords=[somewordindirection].concat(somewordsinotherdirection)
var someacceptableletterwords=[]
for (var i=0; i<someallwords.length; i++)
{
if (someallwords[i][0].length>=2)
{
someacceptableletterwords=someacceptableletterwords.concat([someallwords[i]])
}
}

return someacceptableletterwords
}

function evaluatescores(someplacements, sometiles, somedirection)
{
var somewords=wordsfromtilesplaced(someplacements, somedirection)
// note: the above returns cells for words, not the actual letters!!
var sometext=''
var sometotal=0
var somescore
for (var i=0; i<somewords.length; i++)
{
somescore=scoreoneword(sometiles, someplacements, somewords[i])
sometotal=sometotal+somescore[0]
sometext=sometext+somescore[1]
}
if (sometiles.length==gamenumtiles) 
{
sometotal=sometotal+gamealllettersbonus
sometext=sometext+'+ '+gamenumtiles+'-letter lay bonus of '+gamealllettersbonus
}

return [sometotal, sometext]
}



function ith(someitem, somelist)
{
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]==someitem) {return[i]}
}
return -1
}

function scoreoneword(sometiles, someplacements, sometriple)
{
var somecells=sometriple[0]
var somenewcells=sometriple[1]
var someexistingcells=sometriple[2]
var someexistingscore=0
var someletter
var someletterscore
var someexistingletters=[]
for (var i=0; i<someexistingcells.length; i++)
{
someletter=gameboardletters[someexistingcells[i]]
someexistingletters[i]=someletter
someexistingscore=someexistingscore+valueforletternum(someletter)
}
var somenewscore=0
var somepremium
var somemultiplier
var somenewletters=[]
for (var i=0; i<somenewcells.length; i++)
{
someletter=sometiles[ith(somenewcells[i], someplacements)]
somenewletters[i]=someletter
somepremium=gameboard[somenewcells[i]]
somemultiplier=1
if (somepremium<10) {somemultiplier=somepremium}
somenewscore=somenewscore+(somemultiplier*valueforletternum(someletter))
}
var somewordmult=1
for (var i=0; i<somenewcells.length; i++)
{
somepremium=gameboard[somenewcells[i]]
if (somepremium>10) {somewordmult=somewordmult*(somepremium-10)}
}
var sometotalscore=(someexistingscore+somenewscore)*somewordmult

var sometextword=''
var sometotalcells=someexistingcells.concat(somenewcells)
var sometotalletters=someexistingletters.concat(somenewletters)
for (var i=0; i<somecells.length; i++)
{
sometextword=sometextword+letterfromnum(sometotalletters[ith(somecells[i], sometotalcells)])
}
return [sometotalscore, sometextword+'('+sometotalscore+') ']
}

function placeletterscont()
{
sometype=directionplaced
var somecells=[]
var somerack=racks[gamestatus[1]]
var sometiles=chosentiles(somerack)
if (sometiles.length==0) {myalert('Invalid tile selection!<br><br>No words to left of &lt;&lt;');return}
var somestart=gamestatus[3]

var somecellplaces=cellsforplacement(somestart, sometiles, sometype)

// somecellplaces now the actual cells on which the letters will be placed

// just check that either this includes center square or else that is already in use
var centreindex=Math.floor((gameboardsize*gameboardsize)/2)
if (gameboardletters[centreindex]==-1 && member(centreindex, somecellplaces)==false) {myalert('Invalid placement!<br><br>First word must include middle square');return}
// now need to find all the words

var someacceptableletterwords=wordsfromtilesplaced(somecellplaces, sometype)

if (someacceptableletterwords.length==0) {myalert('Invalid placement!<br><br>No words of at least two letters formed');return}

if (someacceptableletterwords.length==1 && someacceptableletterwords[0][0].length==somecellplaces.length && member(centreindex, somecellplaces)==false) 
// if there's only one word and this is the same length as the letters put down, then, unless this is the first word, it's unacceptable as it doesn't join others
{
myalert('Invalid placement!<br><br>Letters do not adjoin other existing words');return
}
// all words identified - now need to get mappings for any ?s
var someblankindex=-1
var somenumblanks=0
for (var i=0; i<sometiles.length; i++)
{
if (sometiles[i]==26) 
{
somenumblanks++; 
if (somenumblanks>blankmappings.length)
{
someblankindex=i
break
}
else
{
sometiles[i]=blankmappings[somenumblanks-1]
}
}
}

if (someblankindex>=0)
{
mapblank(someblankindex, sometiles, 26)
}
else
{
gamestatus[4]=sometype
gamestatus=gamestatus.concat(blankmappings)
gamestatus[2]=4
SetLocalVal('gamestatus', gamestatus)
continuegame()
return
}
}

var blankmappings=[]
function mapblank(someindex, sometiles, somecurrent)
{
var sometext=''
var racksize=sometiles.length

sometext=sometext+'<div style="height:'+boardbgsize+'px;width:100%"><br><table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'
for (var i=0; i<racksize; i++)
{
if (i!=someindex)
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
else
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="background-color:black;text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
}
sometext=sometext+'</tr><tr>'
var someletter
var somechar
var someval

for (var i=0; i<sometiles.length; i++)
{
someletter=sometiles[i]
if (i==someindex) {someletter=somecurrent}
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}
sometext=sometext+'</tr></table>'
if (somecurrent==26)
{
sometext=sometext+'<p style="text-align:center"><br>Tap a letter below to show what the ? marked above represents<br><br>'
}
else
{
sometext=sometext+'<p style="text-align:center"><br>Click OK to confirm this letter, or else select a different letter<br><br>'

}
sometext=sometext+'<table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'


for (var i=0; i<9; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapblank('+someindex+', ['+sometiles+'], '+i+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

sometext=sometext+'</tr><tr>'

for (var i=9; i<18; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapblank('+someindex+', ['+sometiles+'], '+i+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

sometext=sometext+'</tr><tr>'
for (var i=18; i<26; i++)
{
someletter=i
somechar=letterfromnum(someletter)
sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold" onClick="mapblank('+someindex+', ['+sometiles+'], '+i+')"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold">'+somechar+'</td></tr></table></td>'
}

if (somecurrent==26)
{
sometext=sometext+'<td></td></tr><tr></table></div>'
}
else
{
sometext=sometext+'<td></td></tr><tr></table><br><table border=0 align=center><tr><td  onClick="mapto('+somecurrent+')">'+graphicfor('OK')+'</td></tr></table></div>'
}
changetextvalue('theboard', sometext)
changetextvalue('output', '')
}

function mapto(someletter)
{
blankmappings=blankmappings.concat([someletter])
placeletterscont()
}

function cellsinrow(somecell)
{
var someindex=somecell
var someright=[]

for (var i=0; i<gameboardsize; i++)
{
someindex++
if (Math.floor(someindex/gameboardsize)==someindex/gameboardsize)
{break}
someright=someright.concat([someindex])
}

var someleft=[]
someindex=somecell
for (var i=0; i<gameboardsize; i++)
{
someleft=someleft.concat([someindex])
if (Math.floor(someindex/gameboardsize)==someindex/gameboardsize)
{break}
someindex--
}
return someleft.reverse().concat(someright)
}

function cellsincolumn(somecell)
{
var someindex=somecell
var somedown=[]

for (var i=0; i<gameboardsize; i++)
{
someindex=someindex+gameboardsize
if (someindex>=gameboardsize*gameboardsize)
{break}
somedown=somedown.concat([someindex])
}

var someup=[]
someindex=somecell
for (var i=0; i<gameboardsize; i++)
{
someup=someup.concat([someindex])
someindex=someindex-gameboardsize
if (someindex<0)
{break}
}
return someup.reverse().concat(somedown)
}

function splitliston(someitem, somelist)
{
var someindex
for (var i=0; i<somelist.length; i++)
{
if (somelist[i]==someitem) 
{
someindex=i
break
}
}
var somebeg=somelist.slice(0, someindex)
var someend=somelist.slice(someindex+1)
return([somebeg, someend])
}

function wordindirection(somedirection, somecells)
{
//somedirection=1 means right, 0 means down
var someindex
var somelinecells
if (somedirection==1)
{
somelinecells=cellsinrow(somecells[0])
}
else
{
somelinecells=cellsincolumn(somecells[0])
}
var somebefore=splitliston(somecells[0], somelinecells)[0]
var someafter=splitliston(somecells[somecells.length-1], somelinecells)[1]
var somemiddle=[]
for (var i=0; i<somelinecells.length; i++)
{
if (member(somelinecells[i], somebefore)==false && member(somelinecells[i], someafter)==false)
{
somemiddle=somemiddle.concat([somelinecells[i]])
}
}
var somewordbefore=[]
somebefore.reverse()
for (var i=0; i<somebefore.length; i++)
{
if (gameboardletters[somebefore[i]]!=-1)
{
somewordbefore[i]=somebefore[i]
}
else
{
break
}
}
somewordbefore.reverse()
var somewordafter=[]
for (var i=0; i<someafter.length; i++)
{
if (gameboardletters[someafter[i]]!=-1)
{
somewordafter[i]=someafter[i]
}
else
{
break
}
}
var sometotalwordcells=somewordbefore.concat(somemiddle).concat(somewordafter)
var somecellsalreadydown=[]
for (var i=0; i<sometotalwordcells.length; i++)
{
if (member(sometotalwordcells[i], somecells)==false) {somecellsalreadydown=somecellsalreadydown.concat([sometotalwordcells[i]])}
}

return [sometotalwordcells, somecells, somecellsalreadydown]
}

var myalerton=0
function myalert(somemessage)
{
myalerton=1

changetextvalue('output', '')
changetextvalue('theboard', '<br><br><table width=80% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=white><tr><td><table width=100% border=0><tr><td  bgcolor=lemonchiffon height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'><td></td></tr><tr><td><table border=0 align=center><tr><td onClick="acknowledge()">'+graphicfor('OK')+'</td></tr></table></td></tr></table></td></tr></table>')
}

function acknowledge()
{
myalerton=0
continuegame()

}

function chosentiles(somearray)
{
for (var i=0; i<somearray.length; i++)
{
if (somearray[i]==-2) {return somearray.slice(0, i)}
}
}

var lettertimer=null
var boardcellandtext
function showlettervalue(somecell)
{
if (lettertimer != null) {return}
boardcellandtext=[somecell, document.getElementById('cell'+somecell).innerHTML]
changetextvalue('cell'+somecell, '<table border=0 width=100% height=100% cellpadding=0 cellspacing=0><tr><td style="text-align:center;background-color:purple;font-weight:bold"><span style="font-size:'+celltextsize+'px;color:white">'+valueforletternum(tempgameboardletters[somecell])+'</span></td></tr></table>')
lettertimer = setTimeout("tempboardview()",1000);
}



function tempboardview()
{
changetextvalue('cell'+boardcellandtext[0], cellimage(boardcellandtext[0], 2))
lettertimer = setTimeout("revertview()",1000);

}

function revertview()
{
lettertimer=null
changetextvalue('cell'+boardcellandtext[0], boardcellandtext[1])
}

function showsquaredetails(somecell)
{
var sometile=tempgameboardletters[somecell]
var someletter
if (sometile>=0)
{
someletter=letterfromnum(sometile)
}
var someval=-1
if (sometile>=0)
{
someval=valueforletternum(sometile)
}
var somesquare=gameboard[somecell]
var sometext
if (somesquare==0) {sometext='Black - no tile'}
if (somesquare==1) {sometext='Standard Square'}
if (somesquare==2) {sometext='Double Letter'}
if (somesquare==3) {sometext='Triple Letter'}
if (somesquare==4) {sometext='Quadruple Letter'}
if (somesquare==12) {sometext='Double Word'}
if (somesquare==13) {sometext='Triple Word'}
if (somesquare==4) {sometext='Quadruple Word'}
if (sometile>=0)
{
sometext=someletter+ '('+someval+') on '+sometext
}
changetextvalue('squaredetails', sometext)
}

function boardclick(somecell)
{
var someuser=gamestatus[1]
var somestage=gamestatus[2]
var somerack=racks[gamestatus[1]]
var sometiles=chosentiles(somerack)
// always show square details
showsquaredetails(somecell)

// first check for letters on board.  If so, show its value temporarily.

if (tempgameboardletters[somecell]>=0)
{
showlettervalue(somecell)
return
}

// remind user about placing letters
if ((somestage==1 || somestage==2) && sometiles.length==0 && tileselected>=0)
{
myalert('<table cellpadding=2 border=0><tr><td align=left>Tiles are placed on the board as a group, not individually.<br><br>Order the tiles you wish to lay, then move the arrow &lt;&lt; immediately to the right of these, then tap the square that will contain the first of the letters.<br><br>For example, if your rack shows &lt;&lt;YOTDG?I and you wish to lay letters DOG, re-arrange the rack so that it begins with DOG&lt;&lt;, then press the cell on which the D is to be laid, which will then turn white.  You will then need to press the Right or Down button.  Press Help for more details.</td></tr></table>')
}

if (somestage==1 || somestage==2 || somestage==3)
{
if (gameboard[somecell]==0 || gameboardletters[somecell]>=0 || sometiles.length==0)
{return}
gamestatus=[1, gamestatus[1], 3, somecell]
SetLocalVal('gamestatus', gamestatus)
continuegame()
return
}
}

var tileselected=-1

function racktile(somenumber)
{
if (gamestatus[2]!=1 && gamestatus[2]!=3) {return}
if (gamestatus[2]==3)
{
gamestatus[2]=1
gamestatus=gamestatus.slice(0,3)
SetLocalVal('gamestatus', gamestatus)
continuegame()
return

}
if (tileselected==-1)
{
if (somenumber==0 || somenumber>racks[gamestatus[1]].length)
{} // invalid selection
else
{

changetextvalue('therack', rackimage(gamestatus[1], 1))
tileselected=somenumber
// changetextvalue('tilemarker'+somenumber, '<table border=0 bgcolor=white width=100% height='+Math.floor(scalef*2)+'><tr><td></td></tr></table>')
changebgcolor('tilemarker'+(somenumber-1), 'magenta')
// gamestatus=[1, gamestatus[1], 1]
setuprackhandlers()

return
}
}
if (gamestatus[2]==1 && tileselected>=0) // ready to place
{
var somerack=racks[gamestatus[1]]
if (somenumber>somerack.length) {somenumber=somerack.length}
var someselectedrackindex=tileselected-1
var somevalueselected=somerack[someselectedrackindex]
var someremoved=somerack.slice(0, someselectedrackindex).concat(somerack.slice(someselectedrackindex+1))
var somenewrackindex=somenumber-1
var somenewrack
if (somenewrackindex>=someselectedrackindex)
{
somenewrackindex=somenewrackindex-1
} 
somenewrack=someremoved.slice(0, somenewrackindex+1).concat([somevalueselected]).concat(someremoved.slice(somenewrackindex+1))
// changetextvalue('banner', [somenumber, somenewrackindex+1])
racks[gamestatus[1]]=somenewrack
SetLocalVal('rack'+[gamestatus[1]], somenewrack)
changetextvalue('therack', rackimage(gamestatus[1], 0))
tileselected=-1
setuprackhandlers()

return
}
}

function letterfromnum(someletter)
{
if (someletter>=0 && someletter<26) {return String.fromCharCode(65+someletter)}
if (someletter==26) {return '?'}
if (someletter==-1) {return ''}
if (someletter==-2) {return '<>'}
if (someletter>=100 && someletter<200) {return String.fromCharCode(65+(someletter-100))}
if (someletter>=200 && someletter<300) {return String.fromCharCode(65+(someletter-200))}
}

function valueforletternum(somenum)
{

if (somenum<0) {return ''}
if (somenum==26) {return ''}
if (somenum<26) {return gamevalues[somenum]}
if (somenum>=200) {return gamevalues[somenum-200]}
if (somenum>=100) {return 0}
}

var rackimagehandlerlist
function rackimage(someplayer, someoffset)
{
var sometext=''

var sometiles=racks[someplayer]
var racksize=gamenumtiles+3
var leftmostemptyrackspace='<td><div style="height:'+Math.floor(scalef*20)+'px;width:'+Math.floor(scalef*20)+'px" ></div></td>'

sometext=sometext+'<div style="height:'+Math.floor(scalef*2)+'px"></div><table border=0 cellpadding=0 cellspacing=0 align=center width='+(racksize*Math.floor(scalef*20))+'><tr><td><div style="position:relative;left:0px;top:0px"><table cellspacing=0 cellpadding=0 border=0 align=center style="background-image:url(\'redwood.jpg\')"><tr>'
for (var i=0; i<racksize; i++)
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
sometext=sometext+'</tr><tr>'+leftmostemptyrackspace
var someletter
var somechar
var someval
var somebgcolor
if (gamestatus[2]>=3) {somebgcolor='silver'} else {somebgcolor='black'}

for (var i=0; i<sometiles.length; i++)
{
someletter=sometiles[i]

somechar=letterfromnum(someletter)


if (somechar=='<>') 
{sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*14)+'px;background-color:'+somebgcolor+';color:white;font-weight:bold"><tr><td style="font-size:'+Math.floor(scalef*10)+'px;font-weight:bold;background-color:'+somebgcolor+'" id="tilemarker'+i+'" >&lt;&lt;</td></tr></table></td>'}
else
{sometext=sometext+'<td style="width:'+Math.floor(scalef*20)+'px;height:'+Math.floor(scalef*20)+'px" ><table height=100% width=100% style="border:1px solid gray;text-align:center;font-size:'+Math.floor(scalef*17)+'px;background-color:lemonchiffon;color:black;font-weight:bold"><tr><td style="font-size:'+Math.floor(scalef*13)+'px;font-weight:bold;color:'+somebgcolor+';background-color:lemonchiffon" id="tilemarker'+i+'" >'+somechar+'</td></tr></table></td>'}
}

for (var i=0; i<(racksize-1-sometiles.length); i++)
{
sometext=sometext+'<td><div style="height:'+Math.floor(scalef*20)+'px;width:'+Math.floor(scalef*20)+'px" ></div></td>'
}


sometext=sometext+'</tr><tr style="height:'+Math.floor(scalef*10)+'px;background-image:url(\'redwoodvert.jpg\')"><td></td>'
for (var i=0; i<sometiles.length; i++)
{
someletter=sometiles[i]
someval=''+valueforletternum(someletter)
sometext=sometext+'<td style="font-size:'+Math.floor(scalef*10)+'px;text-align:center;color:white">'+someval+'</td>'
}
for (var i=0; i<(racksize-1-sometiles.length); i++)
{
sometext=sometext+'<td></td>'
}

sometext=sometext+'</tr></table>'

// now putting in a table for clicking on.  1 offset if choosing gap, 0 if selecting tile or others
// in which case offset is half the width of a tile so that it covers the gap
// var someleft=someoffset*Math.floor(scalef*10)
var someleft=0
var someleftbox
if (someoffset==0) {someleftbox=''} else {someleftbox='<td style="width:'+Math.floor(scalef*10)+'px" align=center valign=middle> </td>'}
// so put in table relative to enclosing div
var clicklength=sometiles.length+1
sometext=sometext+'<div style="position:absolute;left:'+someleft+'px;top:0px"><table cellspacing=0 cellpadding=0 border=0 align=center ><tr>'

sometext=sometext+someleftbox

for (var i=0; i<clicklength; i++)
{
sometext=sometext+'<td height='+Math.floor(scalef*5)+' style="text-align:center;color:white;font-weight:bold;font-size:'+Math.floor(scalef*4)+'px">&nbsp;</td>'
}
sometext=sometext+'</tr><tr>'

sometext=sometext+someleftbox

var sometransparency=';background: rgba(255, 255, 255, 0.01)'
rackimagehandlerlist=clicklength
for (var i=0; i<clicklength; i++)
{
// if (i>0 && gamestatus[2]>=3) {sometransparency=';background: rgba(255, 255, 255, 0.5)'} else {sometransparency=';background: rgba(255, 255, 255, 0.01)'}
sometext=sometext+'<td style="height:'+Math.floor(scalef*20)+'px;width:'+Math.floor(scalef*20)+'px'+sometransparency+'" id="racktilecell'+i+'" onClick="racktile('+i+')" align=center valign=middle>&nbsp;</td>'
}
sometext=sometext+'</tr></table></div></div></td></tr></table>'

return sometext
}

function donowt()
{
}

function showtilesinitially()
{
gamestatus[2]=1
SetLocalVal('gamestatus', gamestatus)
setcountdowntime(gametimelimit)
countdowntimer = setTimeout("handlecountdown()",1000)

continuegame()
}

function runonload()
{
// first deal with remoteads
eval(GetLocalVal('remoteads'))
if (GetLocalVal('adbreakcounter')==null) {SetLocalVal('adbreakcounter', resetadbreakcounter)}
if (GetLocalVal('gamestatus')==null) {SetLocalVal('gamestatus', [0])}
if (GetLocalList('gamestatus')[0]==0)
{
// document.getElementById('theboard').style.display='none'
var someadvicetext=''
if (localstorageworks==0) {someadvicetext='<span style="color:red">Certain storage functionality is not available. The application will still work, but the state will not be saved when you exit, so next time you\'ll need to start again.<br><br></span>'}
var somemessage='<b>Welcome to XWord<sup>4x4</sup> from TopAccolades</b><br><br><b>Key buttons</b><table width=95% border=0 align=center bgcolor="#8888FF"><tr><td valign=top style="font-weight:bold;text-align:left">New</td><td valign=top>Start a new game</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">Help</td><td valign=top>Get context-sensitive and general help during play</td></tr><tr><td valign=top style="font-weight:bold;text-align:left">More</td><td valign=top>See letter distribution, settings, and detailed record of moves and scores</td></tr></table><br>'+someadvicetext+'Tap <b>New</b> button above now to begin.'
changetextvalue('output',  '<table width=100% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=lemonchiffon><tr><td><table width=100% border=0 "><tr><td height='+Math.floor(scalef*50)+' align=center valign=middle><br><img src="xword4x4icon.png" width='+Math.floor(scalef*36)+'></td></tr><td  height='+Math.floor(scalef*75)+' align=center valign=middle>'+somemessage+'</td></tr><tr height='+Math.floor(scalef*3)+'></td></tr><tr><td bgcolor=white><table border=0 align=center></table>')
return
}
// above says always give welcome message to start a new series when first loaded



continuegame()
// showad2()
}




function displayrestartconfirmation()
{
changetextvalue('output', '<table border=1 align=center width='+Math.floor(scalef*180)+' style="background-color:white;vertical-align:middle" valign=middle><tr><td align=center><br><img width='+Math.floor(scalef*100)+' src="csisherlockicon.png"><br><br>Please confirm that you wish to restart.  If not, press any button on the second row above to continue.<br><br><table border=0 align=center><tr><td  onClick="continuerestartconfirmation()">'+graphicfor('Confirm')+'</td></tr></table></td></tr></table>')
changetextvalue('banner', 'Xword<sup>4x4</sup>  Restart')


}


function continuerestartconfirmation()
{
showad2() 
}

function showad()
{
if (gameon==1 && restartconfirmationrequired==1 && checkmade==0)
{
displayrestartconfirmation()
}
else
{
showad2()

}
}

var showingads=0
var thecdimage='<table style="background-color:red" valign=middle align=center border=0 cellpadding=0 cellspacing=0><tr height='+Math.floor(scalef*10)+' valign=bottom><td valign=bottom><img width='+Math.floor(scalef*10)+'   name="cd1" src="selected.gif" valign=bottom style="display:block"></td><td align=center valign=bottom><img valign=bottom align=center width='+Math.floor(scalef*10)+'   name="cd0" src="selected.gif" style="display:block"></td><td valign=bottom><img width='+Math.floor(scalef*10)+'   name="cd7" src="selected.gif"  valign=bottom style="display:block"></td></tr><tr height='+Math.floor(scalef*10)+' valign=middle><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd2" src="selected.gif" valign=middle style="display:block"></td><td align=center><img  width='+Math.floor(scalef*36)+' src="xword4x4icon.png" border=0 style="display:block"></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd6" src="selected.gif" valign=middle style="display:block"></td></tr><tr height='+Math.floor(scalef*10)+' valign=middle><td><img width='+Math.floor(scalef*10)+'   name="cd3" src="selected.gif" valign=middle style="display:block"></td><td align=center valign=middle><img valign=middle align=center width='+Math.floor(scalef*10)+'   name="cd4" src="selected.gif" style="display:block"></td><td valign=middle><img width='+Math.floor(scalef*10)+'   name="cd5" src="selected.gif" valign=middle style="display:block"></td></tr></table>'

function showad2()
{
continuegame()
}

function showadbreak()
{

showingads=1
changetextvalue('output', '<p style="text-align:center">This trial version of Xword<sup>4x4</sup> includes these ad breaks.<br><br>You can buy the full version of<p style="color:red;font-weight:bold;text-align:center">Xword<sup>4x4</sup><br>'+thecdimage+'<p style="text-align:center">This, of course, has no countdown ad breaks.<br><br>Also try other games, puzzles and services from TopAccolades:<br><br><div style="width:100%" id="countdownadtext">&nbsp;</div>')
document.getElementById('theboard').style.display='none'
// document.getElementById('output').style.display='inline'
adcountdown(8)

}

function showcountdownimages(somenum)
{
for (var i=0; i<8; i++)
{
document.images['cd'+i].src='adunselected.gif'
}
for (var i=0; i<somenum; i++)
{
document.images['cd'+i].src='adselected.gif'
}
}



var adtimer=null
function adcountdown(somenum)
{
showcountdownimages(somenum)
if (somenum==0)
{
adbreakcounter=resetadbreakcounter
SetLocalVal('adbreakcounter', adbreakcounter)
continueafterad()
}
else
{
showcountdownad()
if (adtimer != null) {clearTimeout(adtimer)}
adtimer = setTimeout("adcountdown("+(somenum-1)+")",4000);
}
}

var showinghelp=0
var helpdivs=['help0.6','help0.0','help0.1','help0.2','help0.3','help0.4','help0.5','help0.7','help1.0','help1.1','help1.2','help1.3','help1.4','help1.5','help1.6','help1.7']
function showhelp()
{
if (showinghelp==1) {hidehelp();return}
if (showingads==1 || myalert==1 || GetLocalList('gamestatus')[0]==0) {return}
showinghelp=1
changetextvalue('squaredetails', '')
for (var i=0; i<helpdivs.length; i++)
{
document.getElementById(helpdivs[i]).style.display='none'
}
var somehelpdiv
var somestatus=gamestatus[0]*1
if (somestatus==1)
{
if (gamestatus.length>2)
{
somehelpdiv='help'+somestatus+'.'+gamestatus[2]
}

}
else
{
somehelpdiv='helpgeneral'
if (somestatus==0)
{
somehelpdiv='help'+somestatus+'.'+starthelpindex
}
}
document.getElementById('theboard').style.display='none'
document.getElementById('output').style.display='none'
document.getElementById(somehelpdiv).style.display='inline'
document.getElementById('help').style.display='inline'

}

function hidehelp()
{
document.getElementById('theboard').style.display='inline'
document.getElementById('output').style.display='inline'
document.getElementById('help').style.display='none'
showinghelp=0

}

var zoom=0
var zoomdelta=[0,0]


function shift(somedelta)
{
zoomdelta[0]=zoomdelta[0]+somedelta[0]
zoomdelta[1]=zoomdelta[1]+somedelta[1]
if (zoomdelta[0]<-1) {zoomdelta[0]=-1}
if (zoomdelta[1]<-1) {zoomdelta[1]=-1}
if (zoomdelta[0]>1) {zoomdelta[0]=1}
if (zoomdelta[1]>1) {zoomdelta[1]=1}
continuegame()
}


function togglezoom()
{
if (showingads==1 || myalert==1 || showinghelp==1 || GetLocalList('gamestatus')[0]==0 ) {return}

zoom=1-zoom
zoomdelta=[0,0]
var sometext
if (zoom==0) 
{
sometext='<span style="color:white;background-color:black">&nbsp;<sup> </sup>zoOM<sup> </sup>&nbsp;</span>'
} 
else
{
sometext='<span style="color:white;background-color:black">&nbsp;<sup> </sup>ZOom<sup> </sup>&nbsp;</span>'
}
changetextvalue('zoom', sometext)
continuegame()
}


// static

documentwrite('<table border=0 align=center valign=top cellspacing=0 cellpadding=0 width='+Math.floor(scalef*230)+'>')
documentwrite('<tr ><td colspan=7 style="height='+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr height='+Math.floor(scalef*20)+'><td width='+Math.floor(scalef*50)+' onClick="startnewgame()">'+graphicfor('New')+'</td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' onClick="showhelp()">'+graphicfor('Help')+'</td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' onClick="showsettings()">'+graphicfor('More')+'</td><td width='+Math.floor(scalef*10)+'><img src="empty.png" width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' >'+graphicfor('TheGame')+'</td></tr>')
documentwrite('<tr height='+Math.floor(scalef*12)+'><td width='+Math.floor(scalef*50)+' >'+graphicfor('Score0')+'</td><td width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' >'+graphicfor('Score1')+'</td><td width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' >'+graphicfor('Score2')+'</td><td width='+Math.floor(scalef*10)+'></td><td width='+Math.floor(scalef*50)+' >'+graphicfor('Score3')+'</td></tr>')
// documentwrite('<tr height='+Math.floor(scalef*10)+'><td colspan=7 ><table width=100% height=100% border=0 cellpadding=0 cellspacing=0><tr><td style="color:red;font-size:'+Math.floor(scalef*8)+'px;font-weight:bold;text-align:left" id="banner" >Xword<sup>4x4</sup></td></table></td></tr>')
documentwrite('<tr height='+Math.floor(scalef*10)+'><td colspan=7 ><table width=100% height=100% border=0 cellpadding=0 cellspacing=0><tr><td style="text-align:left;font-size:'+Math.floor(scalef*8)+'px"><div style="display:inline;color:red;font-size:'+Math.floor(scalef*8)+'px;font-weight:bold;text-align:left" id="banner" >Xword<sup>4x4</sup></div>&nbsp;&nbsp;&nbsp;<div style="display:inline;color:black;font-size:'+Math.floor(scalef*8)+'px;font-weight:bold;text-align:left;font-style:italic" id="squaredetails" ></div></td><td style="color:black;font-size:'+Math.floor(scalef*8)+'px;font-weight:bold;text-align:right;width:15%" id="zoom" onClick="togglezoom()"><span style="color:white;background-color:black">&nbsp;<sup> </sup>zoOM<sup>&nbsp;</sup></span></td></table></td></tr>')
documentwrite('<tr ><td colspan=7 style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="width:'+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="display:inline;width:100%;height:'+Math.floor(scalef*230)+'px"><div style="display:inline;width:100%" id="theboard">&nbsp;</div></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px"><div style="height:'+Math.floor(scalef*2)+'px;width='+Math.floor(scalef*230)+'px"></div></td></tr>')
documentwrite('<tr ><td colspan=7 style="width:'+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" ><div style="display:inline;width:100%" id="output">&nbsp;</div></td></td></tr>')

documentwrite('<tr ><td colspan=7 style="display:none;width='+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" id="statusdisplay"></td></tr>')
documentwrite('<tr ><td colspan=7 style="width:'+Math.floor(scalef*230)+'px;text-align:left;color:black;font-size:'+Math.floor(scalef*10)+'px" ><div style="display:none;width:100%" id="help">')




</SCRIPT>
<div id="helpback" style="display:inline">
<script language="Javascript">documentwrite('<table align=center border=0><tr><td onClick="hidehelp()" width='+Math.floor(scalef*50)+'>'+graphicfor('Back')+'</td></tr></table>')</script>
</div>
<p><span style="font-weight: bold">Contextual Help</span></p>
<div id="help0.6" style="display:none">
<p>You can choose to begin any one of 4 named crossword games for either 2, 3 or 4 players by pressing the relevant 2, 3 or 4 buttons.
<p>Alternatively, you may choose to change the design of any of the 4 named games (including changing its name) by pressing the associated Design button.  You can change the board size and layout, including the positioning of the special (2x, 3x and 4x) word and letter squares and black squares on which no tiles may be placed.
</div>
<div id="help0.0" style="display:none">
<p>When you have selected to change the Design of one of the 4 games, you are offered a screen with six buttons.  
<ul>
<li>Name lets you simply change the name of the game that is displayed at the start and during the game.
<li>Board lets you change the positioning of the special squares and black squares.  By having a border of black squares, you can also effectively change the displayed board size.
<li>Tiles lets you change many features concerned with tiles and scoring.  You can change the number of tiles for a particular letter (1-20), the values associated with the letters (1-20), the number of wild (?) tiles (0-20), the treatment of wilds in scoring (either 0 or the value of the letters they represent), the number of tiles in a complete rack (6-8), the bonus, if any, for laying a complete rack of tiles, and the specification of deductions and bonuses when the game ends.
<li>Timer lets you choose whether or not to use a timer, and, if so, to specify the time limit for a turn (from 2-9 minutes).
<li>Reset lets you revert back to the built-in factory settings for the game, i.e. the game design that was in place when the app was first opened.
<li>Back just takes you back to the screen to choose a new game.
</ul>
</div>
<div id="help0.1" style="display:none">
<p>The name of a game can have up to 8 characters.  Simply tap the letter tiles at the bottom to choose the characters of the name of the game.  If you don't need 8 characters, just press the blank tile to complete the 8 characters.
<p>If you don't want to change the current name, just press the Cancel button at any time.  This takes you back to the main Design screen, as does tapping &gt; or any letter key to confirm the name once all eight have been entered.
<p>The &lt; key (red background) acts as a backspace key to remove letters entered.
</div>
<div id="help0.2" style="display:none">
<p>The complete board of a Xword<sup>4x4</sup> game can be up to 17 squares wide by 17 squares high.
<p>On this screen, a 9x9 section of the current board layout is displayed.  This represents the top-left section of the complete board only, with its bottom-right square representing the middle square of the complete board.  The reason for showing only this section of the board is that the complete board is symmetrical, so you need to design only this section to make changes to the complete board.  The top-right section is a mirror image of the top-left section (i.e. column 10 is the same as column 8, column 11 is the same as column 7 and so on until column 17, which is the same as column 1.  Likewise, the bottom half of the board is a mirror image of the top half.
<p>To change the board layout, tap one of the squares in the palette below the 9x9 board section.  A red arrow is displayed to the right of the squares to show that it has been selected.  Then, just tap the squares in the 9x9 board section that you wish to change to the selected square pattern.  Repeat until you have completed the board layout.
<p>The changes to the design are immediate.  Every time you click on a square in the 9x9 board section, any change to the design is made immediately.
<p>To see the resulting complete board, just press the See All button (and return to the board design screen by pressing the Back button).
<p><b>Board size</b>
<p>While the board layout is always saved as a 9x9 layout, which gives you the complete 17x17 board, as discussed above, the size you see with the complete board may be less than 17x17.  This is due to the location of black squares.  If there is a complete line of black squares on the left and at the top of the 9x9 section, symmetry means that there will be a complete border of black squares, on which no tiles can be placed.  Effectively, the size of the playable board is therefore 15x15.  The complete board is therefore displayed as 15x15.  This approach is also taken for 2 lines and 3 lines of black squares all round, giving effective sizes 13x13 and 11x11.
<p><b>Square patterns</b>
<p>Green squares are standard, i.e. with no special word or letter multipliers.
<p>Orange squares are special letter squares.  These also display a silver L in the background at the bottom, and a white number representing the multiplier towards the top.  So, 2 means double letter, 3 means triple letter, and 4 means quadruple letter.
<p>Blue squares are special word squares.  These also display a red W in the background at the top, and a black number representing the multiplier towards the bottom.  So, 2 means double word, 3 means triple word, and 4 means quadruple word.
<p>Remember that if the letters placed include more than one special word square, both are applied.  So, if the letters are placed on a x2 and a x3 square, the multiplier will be x6.  For this reason, avoid putting these too close together in a line.
<p>Since the first word must go over the middle square, the middle square must not be black.  The system prevents this (without warning).  However, the system does not check for other black square locations, so you need to ensure that there is a path from the middle square of the complete board to every other non-black square on the board.
<p>Press Back to return to the main Design screen.
</div>
<div id="help0.3" style="display:none">
<p>Here, you can configure the game design in terms of tiles, bonuses and deductions.
<p>At the top is a list of all the letter tiles and wild tile (?), together with the current number of these tiles in a complete tile store and the value of these tiles (except for wild tiles).  The number and value each have a two arrows around them:  a &lt; arrow on a red background, which is used to decrease the number or value, and a &gt; arrow on a green background, which is used to increase it.  Simply tap one of these to make changes.
<p>There are certain constraints:
<ul>
<li>The maximum for any number or value is 20, so attempts to increase beyond this will fail (without an error message);
<li>The minimum for any number or value is 1, except for the number of wild tiles, which is 0, so attempts to decrease beyond this will fail;
<li>The minimum number of tiles in total is 50.  A warning to the right of the total is given when this minimum is reached, and attempts to reduce any number at that time will also fail.
</ul>
<p>The value of a wild (?) tile on the board can be set either to 0 or to the value of the letter it represents.  The current setting has a green background.  Simply tap the setting you want in your game.
<p>The number of tiles on a complete rack can be changed using the arrows with the red and green backgrounds.  The minimum is 6, the maximum is 8.
<p>The bonus for laying all the tiles from a complete rack can be changed, in increments of 10.  The minimum is 0, the maximum is 100.
<p>Lastly, you can choose what happens in terms of deductions and bonus at the end of the game.  Again, the current setting is green, and you just tap the setting you want.
<p>Press Back to return to the main Design screen.
</div>
<div id="help0.4" style="display:none">
<p>On the timer settings page, you can specify whether or not a timer is to be used.  The current setting has a green background.  Simply tap the setting you want in your game.
<p>Beneath this setting is a time limit, in minutes, to be used if a timer is in play.  The time limit has two arrows around it:  a &lt; arrow on a red background, which is used to decrease it, and a &gt; arrow on a green background, which is used to increase it.  Simply tap one of these to make changes.  The minimum is 2 minutes, the maximum 9, and attempts to go beyond these limits will fail without an error message.
</div>
<div id="help0.5" style="display:none">
<p>On this screen, you simply have to Confirm or Cancel the resetting of this particular game back to its original factory settings.
</div>
<div id="help0.7" style="display:none">
<p>Before a game begins, following the pressing of a 2, 3 or 4 button, the Player Details screen is displayed.  This gives you information about the player colours, and also about the order in which they take turns.  If you are sitting around a room, you should agree who is going to play with which colour.
<p>Each player has two associated initials.  If the ones shown are not appropriate, press the Reset button.  You will then see the Player Initials screen, with sets of two blank initials, one for each player (colour shown underneath).  Just press the letter tiles to define the initials in turn.  You can Cancel at any time to leave the initials unchanged.  Pressing Cancel, or pressing &gt; or any letter key once all the initials have been entered to confirm them, returns you to the Player Details screen.
<p>The &lt; key (red background) acts as a backspace key to remove letters entered.
<p>From the Player Details screen, press the OK button to begin the game and see the empty board.  A starting colour will be selected at random, so the device should be given to the player associated with that colour.
<p>Note: the initials remain in place until changed, and apply to all games.
</div>
<div id="help1.0" style="display:none">
<p>
The player whose turn it is should take the device and, when nobody else can see the screen, tap the Tiles button.
<p>
This reveals the rack with the player's tiles on it.  If a timer is being used, tapping the Tiles button also reveals any tiles already on the board and sets the timer to count down from the predefined time limit.  The countdown is shown in the green field in the top-right corner.  The timer continues the countdown until the player completes swapping tiles, passes, or, as is usual, confirms the placement of tiles on the board.  Acceptance and rejection of any tile placement is outside the countdown, as this is in others' hands, and may involve looking up words in dictionaries. 
<p>
In the case that a timer is not being used, any tiles already on the board are displayed before the Tiles button is pressed.
</div>
<div id="help1.1" style="display:none">
Once the rack of tiles (and any tiles on the board) are visible to you, you generally have three options (each described further below):
<ul> 
<li>Place tiles on the board
<li>Swap some tiles
<li>Pass (i.e. miss the turn and gain no points)
</ul>
The decision on which is normally taken after inspecting the rack tiles and the board to see what possibilities exist for placing words.  
Most players would, at this stage, wish to move the tiles on the rack around, possibly to form words or parts of words.
<p><i>Moving tiles around in the rack</i></p>
<p>To move any of the tiles from one position to another within the rack, first tap the tile to be moved. The background changes to magenta to highlight that it has been selected.  Then tap on the position to which the tile is to be inserted within the rack, i.e. over the interface between two tiles, or over the edge of the tile if it is an end tile.  The tile will then be moved and inserted in this position, and the selection highlight will be removed.
<p>Alternatively, on a touch screen, you can touch a tile and move it to the insertion point within the rack by dragging/swiping.  Note: if you have already selected a tile by tapping, you cannot use swiping; you must complete the move by tapping.
<p>The &lt;&lt; separator, which is always on the rack and is discussed further down, is moved in the same way as a tile.
<p><i>Placing tiles on the board</i></p>
<p>One or more tiles may be placed onto the board.  If two or more are placed, they must be in a straight line (across or down the board) and can cross over any tiles already on the board.  Tiles may not be placed on any black squares, and there must be no empty squares between the first and last tiles placed.  Particular constraints are:
<ul> 
<li>The first line of tiles placed on the board, containing at least two tiles, must cover the middle square
<li>After the first line has been added, at least one of the tiles placed must be adjacent to (across or down) a tile already on the board.
<li>Every line of tiles of two or more letters that the placed tiles are a part of must make a valid word.
</ul>
<p>Tiles are not placed individually but as a group.  You will see in the rack a &lt;&lt; separator, which is used to separate the tiles you wish to place (or swap, see below), to its left, from the remaining letter tiles, if any, to its right. First, order the tiles to be placed to the left of any remaining letter tiles, then move the &lt;&lt; separator to the right of them, so that the arrows point left at them.  To place the tiles, tap on the board square on which the first of the tiles (the leftmost one) is to be placed.  This square will turn white to show that it has been selected as the start position, and two buttons, Down and Right, will be shown.  Tapping one of these will result in the laying out of the tiles on the board in the chosen direction.  This approach to placing tiles is much more efficient than the placing of tiles individually, and also less error-prone on a small device.
<p>As an example, if your rack were &lt;&lt;XSPAODY and you decided to place the word DOPES across the board using an E that is already on the board, then you should re-arrange the rack so that it begins DOPS&lt;&lt;.  You should then tap on the square on which the D should be placed (three to the left of the E), which will turn white, and then press the Right button, which will have appeared.
<p><i>Swapping tiles</i></p>
<p>You may choose to miss the turn and, instead, to swap some or all of the tiles in your rack.  To specify the tiles to be swapped, move them to the left of all the other letter tiles in the rack, move the &lt;&lt; separator to the right of them so that the arrows point left at them, and then press the Swap button.  So, to swap the letters J and Q, re-arrange the rack to begin JQ&lt;&lt; or QJ&lt;&lt;, then press the Swap button. Following confirmation of this swapping request, the selected tiles will be replaced with others taken from the tile store (these will be placed on the right of the rack).  If the number of tiles selected for swapping exceeds the number in the tile store (the current number in the store can always be seen in the black field to the left of the green countdown field at the top right), an error message will be shown.
<p><i>Passing</i></p>
<p>You may choose to miss the turn completely, without swapping any tiles.  This may be because you have tiles that have the potential to form a good word, but not with the current board layout.  To do this, you should press the Pass button, after which confirmation will be requested.
<p>If every player passes in consecutive turns, the game ends, since it is assumed no player can make a valid word. A warning is given to the last player pressing Pass, together with advice on how to avoid ending the game, if desired. 
<p><i>Points to note</i></p>
<ul>
<li>The value of a tile in the rack is shown below the tile.
<li>The value of a tile already on the board may be seen by tapping the tile.  This results firstly in the value of the tile being shown, and then in the display of the board square (showing whether it is standard or a special word or letter square).
<li>Remember that you receive a bonus for placing all the tiles from a complete rack in one go (i.e. one that has the full number of tiles specified for the game).
<li>Pressing the More button lets you see the letter distribution and the values of letters.  You can, of course, press the More button at most stages of the game, but it is useful to press it at this stage to remind yourself of letter values and bonuses.
<li>If a timer is being used, the countdown continues during this stage, as shown in the green field in the top-right corner.  If time runs out, the turn is lost.
<li>In most circumstances, tapping on any board square, whether occupied or not, results in details of the board square, including any contents, being printed in black italics just above the board (after the game name).  This text remains in place until another board square is tapped or play passes to another player.
</ul>

</div>
<div id="help1.2" style="display:none">

</div>
<div id="help1.3" style="display:none">
<p>Once you have selected a square as the start point for placing a line of tiles, the ones to the left of the &lt;&lt; in your rack, the Right and Down buttons appear.  Press whichever is appropriate to lay the tiles on the board.
<p>Before the tiles are laid, you will be asked to specify which letter any wild tiles (?) represent.  The full line of letters in the direction you specify (Right or Down) is shown, and you need to select a letter tile to represent every ? tile in turn (the relevant one is highlighted).  You will need to confirm this by tapping OK, or else choose a different letter. 
<p>The selected tiles will then be shown on the board, at this stage with a background in your colour to make it easy to identify which have been laid.  Any ? tiles laid will be displayed with the letter they represent in silver, so that everyone can see that this is a wild tile with a particular representation. This style of wild representation continues throughout the game. 
<p>The potential score will be shown beneath the board, together with the scores for all the words formed.  You will then need to check these carefully to ensure that you consider them to be valid words before confirming that you wish to proceed.
<p>If there is a problem with your selection of square and direction button, e.g. the tiles are not adjacent to at least one existing tile, or there is inadequate space, an error message will be shown.
<p>Other options are also available once you have selected a square as the starting point:
<ul>
<li>Select a different starting square, by tapping on it;
<li>Return to re-arrange the tiles in the rack (or to swap or pass).  To do this, just tap on a rack tile (or swipe within the rack tiles).  You should notice that these are faded, to indicate that you are no longer on the screen where you can move the tiles around. Tapping on or swiping one of the faded tiles will remove the square selection and the Right and Down buttons, remove the tile fading, and you will again see the Swap and Pass buttons.  You are then in a position to re-arrange the tiles.
</ul>
If a timer is being used, the countdown continues.
</div>
<div id="help1.4" style="display:none">
<p>Once you have pressed the Right or Down button to place tiles, they are placed on the board, at this stage with a background in your colour to make it easy to identify which have been laid.  The potential score is shown beneath the board, together with the individual words formed and their associated scores (in parentheses).  You should check these carefully to ensure that you consider them to be valid words. 
<p>If you wish to proceed with this placement of tiles, press the OK button.  The board and the placement should then be shown to all other players so that they can check that the words formed are acceptable. If you don't wish to proceed, press the Back button, which will take you back to the board showing your selected start square.
<p>The countdown continues at this stage until the OK button is pressed.


</div>
<div id="help1.5" style="display:none">
<p>At this stage, all the other players get involved.  Hand the device around so that they can inspect the words formed, as shown at the bottom, to ensure that they are valid.  If they have doubts about any of them, they should consult a dictionary or dictionaries to check the validity.  To help in this, there are lists below of 2-letter and 3-letter words that would normally be considered as valid in English-language word games across the world, no matter how unfamiliar some may be. Some of these may not appear in your dictionary, while your dictionary may have some not found here.  
<p>The other players should also, at this stage, take the opportunity to become acquainted with the latest board layout so that they are better prepared for their next turn.
<p>Once a decision has been ageed, take back the device and press either the Accept or Reject button, as appropriate. It is important that you do this, rather than one of the other players, as the updated rack with replacement tiles taken at random from the tile store, if available, or unchanged rack if Reject is pressed, is normally then shown.  After briefly looking at your new rack tiles, and maybe making a note of them, you should press one of the Hide buttons and hand the device to the next player.
<p>If all the tiles in your rack have been used, and no replacements can be made from the tile store, the game ends and the overall scores are displayed.
<p><i>Valid 2-letter words</i>
<p>AA, AB, AD, AE, AG, AH, AI, AL, AM, AN, AR, AS, AT, AW, AX, AY<br>
BA, BE, BI, BO, BY<br>
DE, DO<br>
ED, EF, EH, EL, EM, EN, ER, ES, ET, EX<br>
FA, FE<br>
GO<br>
HA, HE, HI, HM, HO<br>
ID, IF, IN, IS, IT<br>
JO<br>
KA, KI<br>
LA, LI, LO<br>
MA, ME, MI, MM, MO, MU, MY<br>
NA, NE, NO, NU<br>
OD, OE, OF, OH, OI, OM, ON, OP, OR, OS, OW, OX, OY<br>
PA, PE, PI<br>
QI<br>
RE<br>
SH, SI, SO<br>
TA, TI, TO<br>
UH, UM, UN, UP, US, UT<br>
WE, WO<br>
XI, XU<br>
YA, YE, YO<br>
ZA<br>
<p><i>Valid 3-letter words</i>
<p>AAH, AAL, AAS, ABA, ABO, ABS, ABY, ACE, ACT, ADD, ADO, ADS, ADZ, AFF, AFT, AGA, AGE, AGO, AGS, AHA, AHI, AHS, AID, AIL, AIM, AIN, AIR, AIS, AIT, ALA, ALB, ALE, ALL, ALP, ALS, ALT, AMA, AMI, AMP, AMU, ANA, AND, ANE, ANI, ANT, ANY, APE, APO, APP, APT, ARB, ARC, ARE, ARF, ARK, ARM, ARS, ART, ASH, ASK, ASP, ASS, ATE, ATT, AUK, AVA, AVE, AVO, AWA, AWE, AWL, AWN, AXE, AYE, AYS, AZO<br>
BAA, BAD, BAG, BAH, BAL, BAM, BAN, BAP, BAR, BAS, BAT, BAY, BED, BEE, BEG, BEL, BEN, BES, BET, BEY, BIB, BID, BIG, BIN, BIO, BIS, BIT, BIZ, BOA, BOB, BOD, BOG, BOO, BOP, BOS, BOT, BOW, BOX, BOY, BRA, BRO, BRR, BUB, BUD, BUG, BUM, BUN, BUR, BUS, BUT, BUY, BYE, BYS<br>
CAB, CAD, CAM, CAN, CAP, CAR, CAT, CAW, CAY, CEE, CEL, CEP, CHI, CIG, CIS, COB, COD, COG, COL, CON, COO, COP, COR, COS, COT, COW, COX, COY, COZ, CRU, CRY, CUB, CUD, CUE, CUM, CUP, CUR, CUT, CWM<br>
DAB, DAD, DAG, DAH, DAK, DAL, DAM, DAN, DAP, DAW, DAY, DEB, DEE, DEF, DEL, DEN, DEV, DEW, DEX, DEY, DIB, DID, DIE, DIF, DIG, DIM, DIN, DIP, DIS, DIT, DOC, DOE, DOG, DOL, DOM, DON, DOR, DOS, DOT, DOW, DRY, DUB, DUD, DUE, DUG, DUH, DUI, DUN, DUO, DUP, DYE<br>
EAR, EAT, EAU, EBB, ECU, EDH, EDS, EEK, EEL, EFF, EFS, EFT, EGG, EGO, EKE, ELD, ELF, ELK, ELL, ELM, ELS, EME, EMS, EMU, END, ENG, ENS, EON, ERA, ERE, ERG, ERN, ERR, ERS, ESS, ETA, ETH, EVE, EWE, EYE<br>
FAB, FAD, FAG, FAN, FAR, FAS, FAT, FAX, FAY, FED, FEE, FEH, FEM, FEN, FER, FES, FET, FEU, FEW, FEY, FEZ, FIB, FID, FIE, FIG, FIL, FIN, FIR, FIT, FIX, FIZ, FLU, FLY, FOB, FOE, FOG, FOH, FON, FOP, FOR, FOU, FOX, FOY, FRO, FRY, FUB, FUD, FUG, FUN, FUR<br>
GAB, GAD, GAE, GAG, GAL, GAM, GAN, GAP, GAR, GAS, GAT, GAY, GED, GEE, GEL, GEM, GEN, GET, GEY, GHI, GIB, GID, GIE, GIG, GIN, GIP, GIT, GNU, GOA, GOB, GOD, GOO, GOR, GOS, GOT, GOX, GOY, GUL, GUM, GUN, GUT, GUV, GUY, GYM, GYP<br>
HAD, HAE, HAG, HAH, HAJ, HAM, HAO, HAP, HAS, HAT, HAW, HAY, HEH, HEM, HEN, HEP, HER, HES, HET, HEW, HEX, HEY, HIC, HID, HIE, HIM, HIN, HIP, HIS, HIT, HMM, HOB, HOD, HOE, HOG, HON, HOP, HOS, HOT, HOW, HOY, HUB, HUE, HUG, HUH, HUM, HUN, HUP, HUT, HYP<br>
ICE, ICH, ICK, ICY, IDS, IFF, IFS, IGG, ILK, ILL, IMP, INK, INN, INS, ION, IRE, IRK, ISM, ITS, IVY<br>
JAB, JAG, JAM, JAR, JAW, JAY, JEE, JET, JEU, JEW, JIB, JIG, JIN, JOB, JOE, JOG, JOT, JOW, JOY, JUG, JUN, JUS, JUT<br>
KAB, KAE, KAF, KAS, KAT, KAY, KEA, KEF, KEG, KEN, KEP, KEX, KEY, KHI, KID, KIF, KIN, KIP, KIR, KIS, KIT, KOA, KOB, KOI, KOP, KOR, KOS, KUE, KYE<br>
LAB, LAC, LAD, LAG, LAM, LAP, LAR, LAS, LAT, LAV, LAW, LAX, LAY, LEA, LED, LEE, LEG, LEI, LEK, LES, LET, LEU, LEV, LEX, LEY, LEZ, LIB, LID, LIE, LIN, LIP, LIS, LIT, LOB, LOG, LOO, LOP, LOT, LOW, LOX, LUG, LUM, LUV, LUX, LYE<br>
MAC, MAD, MAE, MAG, MAN, MAP, MAR, MAS, MAT, MAW, MAX, MAY, MED, MEG, MEL, MEM, MEN, MET, MEW, MHO, MIB, MIC, MID, MIG, MIL, MIM, MIR, MIS, MIX, MOA, MOB, MOC, MOD, MOG, MOL, MOM, MON, MOO, MOP, MOR, MOS, MOT, MOW, MUD, MUG, MUM, MUN, MUS, MUT, MYC<br>
NAB, NAE, NAG, NAH, NAM, NAN, NAP, NAW, NAY, NEB, NEE, NEG, NET, NEW, NIB, NIL, NIM, NIP, NIT, NIX, NOB, NOD, NOG, NOH, NOM, NOO, NOR, NOS, NOT, NOW, NTH, NUB, NUN, NUS, NUT<br>
OAF, OAK, OAR, OAT, OBA, OBE, OBI, OCA, ODA, ODD, ODE, ODS, OES, OFF, OFT, OHM, OHO, OHS, OIL, OKA, OKE, OLD, OLE, OMS, ONE, ONO, ONS, OOH, OOT, OPE, OPS, OPT, ORA, ORB, ORC, ORE, ORS, ORT, OSE, OUD, OUR, OUT, OVA, OWE, OWL, OWN, OXO, OXY<br>
PAC, PAD, PAH, PAL, PAM, PAN, PAP, PAR, PAS, PAT, PAW, PAX, PAY, PEA, PEC, PED, PEE, PEG, PEH, PEN, PEP, PER, PES, PET, PEW, PHI, PHT, PIA, PIC, PIE, PIG, PIN, PIP, PIS, PIT, PIU, PIX, PLY, POD, POH, POI, POL, POM, POO, POP, POT, POW, POX, PRO, PRY, PSI, PST, PUB, PUD, PUG, PUL, PUN, PUP, PUR, PUS, PUT, PYA, PYE, PYX<br>
QAT, QIS, QUA<br>
RAD, RAG, RAH, RAI, RAJ, RAM, RAN, RAP, RAS, RAT, RAW, RAX, RAY, REB, REC, RED, REE, REF, REG, REI, REM, REP, RES, RET, REV, REX, RHO, RIA, RIB, RID, RIF, RIG, RIM, RIN, RIP, ROB, ROC, ROD, ROE, ROM, ROT, ROW, RUB, RUE, RUG, RUM, RUN, RUT, RYA, RYE<br>
SAB, SAC, SAD, SAE, SAG, SAL, SAP, SAT, SAU, SAW, SAX, SAY, SEA, SEC, SEE, SEG, SEI, SEL, SEN, SER, SET, SEW, SEX, SHA, SHE, SHH, SHY, SIB, SIC, SIM, SIN, SIP, SIR, SIS, SIT, SIX, SKA, SKI, SKY, SLY, SOB, SOD, SOL, SOM, SON, SOP, SOS, SOT, SOU, SOW, SOX, SOY, SPA, SPY, SRI, STY, SUB, SUE, SUK, SUM, SUN, SUP, SUQ, SYN<br>
TAB, TAD, TAE, TAG, TAJ, TAM, TAN, TAO, TAP, TAR, TAS, TAT, TAU, TAV, TAW, TAX, TEA, TED, TEE, TEG, TEL, TEN, TET, TEW, THE, THO, THY, TIC, TIE, TIL, TIN, TIP, TIS, TIT, TOD, TOE, TOG, TOM, TON, TOO, TOP, TOR, TOT, TOW, TOY, TRY, TSK, TUB, TUG, TUI, TUN, TUP, TUT, TUX, TWA, TWO, TYE<br>
UDO, UGH, UKE, ULU, UMM, UMP, UNS, UPO, UPS, URB, URD, URN, URP, USE, UTA, UTE, UTS<br>
VAC, VAN, VAR, VAS, VAT, VAU, VAV, VAW, VEE, VEG, VET, VEX, VIA, VID, VIE, VIG, VIM, VIS, VOE, VOW, VOX, VUG, VUM<br>
WAB, WAD, WAE, WAG, WAN, WAP, WAR, WAS, WAT, WAW, WAX, WAY, WEB, WED, WEE, WEN, WET, WHA, WHO, WHY, WIG, WIN, WIS, WIT, WIZ, WOE, WOG, WOK, WON, WOO, WOP, WOS, WOT, WOW, WRY, WUD, WYE, WYN<br>
XIS<br>
YAG, YAH, YAK, YAM, YAP, YAR, YAW, YAY, YEA, YEH, YEN, YEP, YES, YET, YEW, YID, YIN, YIP, YOB, YOD, YOK, YOM, YON, YOU, YOW, YUK, YUM, YUP<br>
ZAG, ZAP, ZAS, ZAX, ZED, ZEE, ZEK, ZEP, ZIG, ZIN, ZIP, ZIT, ZOA, ZOO, ZUZ<br>
<br>



</div>
<div id="help1.6" style="display:none">
<p>Any tiles laid are now shown with the normal cream background.  This is your opportunity to see your rack tiles before handing the device on to another player.  These are shown faded to emphasize the fact that you cannot move them around - just look at them. Once you are ready, press either of the Hide buttons and hand the device to the next player.
</div>
<div id="help1.7" style="display:none">
<p>The board found at the end of the game is displayed, together with the scores for each player.  These scores show the totals from laying tiles and also any deductions and bonuses due because of tiles remaining in the racks and the overall totals.  The player with the highest overall total wins.
<p>Although the More button can be pressed at most stages of the game, pressing it here is particularly useful as it can remind you of the rules in play concerning deductions and bonuses.  In addition, the Scores button is shown, which allows you to see a complete history of the scores, actions (e.g. including swaps, passes and rejections) and totals.
<p>To start a New game, press the New button. This can be done at any time during the game, but this is the time when you would normally start a new game.
</div>
<div id="helpgeneral" style="display:inline">
<p><span style="font-weight: bold">About Xword<sup>4x4</sup></span>
<p>Xword<sup>4x4</sup> is a crossword game, or, rather, a set of highly configurable crossword games.  It is a Play and Pass game only (you can't play against the system) designed for use by 2-4 players playing in a physical location using one portable device, such as a tablet, phone or laptop.
<p>It does not require internet access, so can be played just about anywhere, including in trains, planes or cars.  Highly sociable, it is just right for playing with family or friends when out and about.
<p>When you exit from the game, the current game state is saved.  Start it again, and you can continue where you left off, which makes it great for situations where you are likely to be interrupted.
<p>It has many features that it shares with other crossword games:
<ul>
<li>Letters with different values;
<li>Valid words of two or more letters must be formed;
<li>The first word laid must pass over the middle square
<li>After the first word, a single tile or a line of tiles must be placed, at least one of which is adjacent to a tile already on the board;
<li>There are special squares that apply to letters placed or words formed;
<li>Tiles may be swapped, and turns may be passed;
<li>Once tiles have been validly placed on the board, replacement tiles are drawn from the tile store, if possible, so that the player again has a complete rack.
<li>Optionally, there are wilds (in this case ? tiles), which can represent any other letter;
<li>The game ends when one player's rack of tiles is empty, and the tile store is also empty.  It also ends if no player can add tiles to the board to make valid words.
<li>Optionally, there are deductions for tiles remaining at the end of the game, and a bonus for the player with no tiles left.
</ul> 

<p>Xword<sup>4x4</sup> has several unusual features:
<ul>
<li>Optionally, the use of black squares (as found on normal paper crosswords), on which letters cannot be placed and through which words cannot pass;
<li>Optionally, the assignment of a value to a wild tile (?): the value of the letter it represents;
<li>Quadruple letter and word special squares, as well as double and triple;
<li>Optional use of a timer to help keep the game moving;
<li>Novel means of placing tiles onto the board, in which the tiles to be placed are put into the correct order, separated from the others, then placed on the board by simply selecting the square on which the first tile should be placed, and choosing to lay out the tiles in a specific direction (Right or Down).
</ul>

However, probably its most unusual feature is its configurability.  It is called 4x4 because it is for up to 4 players but also allows you to specify and save 4 different games.  For each you can:
<ul>
<li>Define a name for the game;
<li>Choose a playing board size up to 17x17;
<li>Specify the number of tiles for each letter (1-20) and also the value to be associated with it (1-20);
<li>Define the positioning of special word and letter squares and also of black squares (Note: the use of black squares can effectively produce boards that are not square);
<li>Choose the number of wilds (0-20) and the treatment of these (value 0 or the value of the letters they represent);
<li>Choose the number of tiles in a complete rack (6-8);
<li>Choose the value of bonuses for laying all the tiles from a complete rack;
<li>Choose whether to have deductions for remaining tiles and, if so, whether to give these as a bonus to the player with no tiles remaining;
<li>Choose whether to use a timer, and, if so, the time limit for each turn (2-9 minutes).
</ul>

<p><span style="font-weight: bold">Key playing functionality and features</span>
<p>The zoom button (initially displayed as zoOM, to emphasize that it makes letters look bigger) on the right above the main playing board, provides you with a larger scale 9x9 view of the main playing board, initially focusing on the central section of the board.  You can tap on any of the arrows around this to move to one of the other 8 overlapping areas of focus.  So, to focus on the top-left corner of the board when looking at the central section, tap the arrow in the top-left corner.  To revert to the normal view of the complete board, press the same zoom button (now displayed as ZOom).  Note: zoom only operates on 13x13 boards or larger.
<p>Alternatively, on a touch screen, you can zoom or unzoom by any two-finger gesture, such as pinch, zoom or spread, on the main board (standard or larger scale).  Once the larger scale board is displayed, you can use a single-finger swipe to move the board around.  A swipe in one direction is equivalent to tapping an arrow pointing in the opposite direction.
<p>The New button can be pressed to end any current game and start a new game.  You can then choose which of the 4 games to play, and whether to play a 2-, 3-, or 4-player game.  You can also choose to redesign any one of the four games.
<p>The Help button can be pressed to provide context-sensitive help, as well as this more general help and information.
<p>The More button can be pressed once a game is underway.  This provides a summary of the game design (layout, letter numbers, bonuses, and so on).  It also gives you access to a Scores button, which, when pressed, provides a full history of the game so far (actions and scores).
<p>At the top-right corner are two fields: the black one always displays the number of tiles left in the tile store; the green one displays the time remaining in the countdown (minutes:seconds), if a timer is being used.
<p>Each player has an associated colour: red, yellow green or blue.  During play, guidance below the board and potential scores for tile placements are all displayed with a background colour - the one associated with that player.  Likewise, when the tiles are placed, they temporarily have the player's colour as their background, until they are accepted.
<p>Beneath the buttons and fields are four score fields.  These take on the colours of any player playing, and display that player's selected initials and current score.
<p>If all players Pass consecutively, the system assumes that nobody can go so the game ends.  A warning is given to the last player, together with advice on how to avoid ending the game, if desired.
<p>Tap the device back twice to exit the application.  The current game state is remembered so that you can continue where you left off when you open the application again.
<p><span style="font-weight: bold">Board squares and word scoring</span>
<p>Green squares are standard, i.e. with no special word or letter multipliers.
<p>Orange squares are special letter squares.  These also display a silver L in the background at the bottom, and a white number representing the multiplier towards the top.  So, 2 means double letter, 3 means triple letter, and 4 means quadruple letter.
<p>Blue squares are special word squares.  These also display a red W in the background at the top, and a black number representing the multiplier towards the bottom.  So, 2 means double word, 3 means triple word, and 4 means quadruple word.
<p>Black squares are squares on which no tiles may be placed and through which words may not pass.
<p>When tiles are added to the board in a line, any line of two or more letters formed in this direction or in the other direction by these letters is scored.   These lines of two or more letters must be valid words as agreed by the players or as defined in a dictionary whose use is agreed by the players.  Generally such words may not include hyphens, spaces or apostrophes, or require capitalization, and should not be classified only as an abbreviation; any deviation from this should be agreed by the players at the beginning of a game.
<p>The score for a word is calculated as follows:
<ul>
<li>Any tiles that form part of the word but were already on the board contribute just their face value (with the treatment of wilds depending on the design); special squares are ignored for existing tiles.
<li>Any tiles that form part of the word but are part of this tile placement contribute their face value (with the treatment of wilds depending on the design) multiplied by the relevant multiplier if the square on which it is placed is a special letter square. So, if the letter value is 4 and it is placed on a double letter square, it contributes 8 to the word total.
<li>Once the total for the word is derived from its individual letters, a multiplier to this total is applied if any of the tiles that form part of the word and are part of this tile placement are on special word squares.  So, if one of the newly-laid tiles is on a triple word square, the multiplier is 3.  If more than one newly-laid tile is on a special word square, all multipliers are applied.  So, if one is on a double word and another is on a triple word square, then the multiplier is 6.  So, in this case, if the basic score for the word is 15, the total for the word is 90.
<li>The total score for the tile placement is the sum of all the word scores.  In addition, a bonus is won if the number of tiles laid is the same as the number of tiles in a complete rack (this number and bonus as defined in the game design).
<li>Note: a special square can be used for words in both directions.
</ul>
<p>Xword<sup>4x4</sup> has been devised and developed by Dr David Wolstenholme.
<p><span style="font-weight: bold">Terms of use</span><p>This software may be used for personal purposes only.  It may not be used for commercial purposes.</p> 
<p>The software, code and script of this application may not be copied or be distributed to others.</p> 
<p>The software, code and script may not be altered in any way.</p> 
<p >Copyright of the software, code and script, and its help documentation, is held by TopAccolades Limited. No part of the software, code, script or documentation may be copied or used in another application or document.</p> 
<p >Although every effort has been made to ensure that this software functions as intended, TopAccolades Limited provides no warranty of merchantability, or fitness for a particular purpose, in relation to this application or its support.</p> 
<p >TopAccolades Limited shall not be liable for any damages whatsoever arising out of the use of or inability to use this application or the provision of or failure to provide support.</p> 
<p style="font-style: italic;">Copyright TopAccolades Limited<br>www.topaccolades.com</p>
<p><br>Version <script language="Javascript">documentwrite(appversion)</script><br>
Scale <script language="Javascript">documentwrite(scalef)</script>
</div>

<script language="Javascript">
documentwrite('</div></td></tr></table>')

var remoteads=[]

if (GetLocalVal('remoteads')==null)
{
// default remoteads
SetLocalVal('remoteads', 'remoteads=[]')

}
if (GetLocalVal('lastremoteadstime')==null) {SetLocalVal('lastremoteadstime', 0)}
// if (Date.now()-(1*GetLocalVal('lastremoteadstime'))>0)
// If it's more than 5 days since last remote ad update, then we upload it.
// However, if there's no internet access, then this loading can hang the app up.  So, we set the last time of upload to be 4 days ago
// then try to reload.  If it fails and hangs up, we're showing a Reload button, which will reload the page, this time without needing to upload the remote ad
if (Date.now()-(1*GetLocalVal('lastremoteadstime'))>(5*24*60*60*1000)) // if more than 5 days
{
if (localstorageworks==1)
{
document.getElementById('theboard').style.display='none'
changetextvalue('output', '')
changetextvalue('theboard', '<br><br><table width=80% height='+Math.floor(scalef*100)+' border=1 cellpadding=0 cellspacing=0  align=center bgcolor=white><tr><td><table width=100% border=0><tr><td  bgcolor=lemonchiffon height='+Math.floor(scalef*75)+' align=center valign=middle>Internet access is required for certain updates, which is currently not available.  Please tap the Reload button and a further attempt will be made after 24 hours.</td></tr><tr height='+Math.floor(scalef*3)+'><td></td></tr><tr><td><table border=0 align=center><tr><td onClick="location.reload()">'+graphicfor('Reload')+'</td></tr></table></td></tr></table></td></tr></table>')
documentwrite('<sc'+'ript src="http://www.compactfun.com/remoteads/largeadsuntimed.js?time='+Date.now()+'"></sc'+'ript>')
// ?time=current time above helps to ensure that the javascript is reloaded and that a cached version is not used

}
}


</script>

</body></html>